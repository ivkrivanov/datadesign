<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serenity.Net.Entity</name>
    </assembly>
    <members>
        <member name="T:Serenity.Data.IDeleteLogRow">
            <summary>
            Interface for rows that have DeleteUserId and DeleteDate fields.
            </summary>
        </member>
        <member name="P:Serenity.Data.IDeleteLogRow.DeleteUserIdField">
            <summary>
            Gets the delete user identifier field.
            </summary>
            <value>
            The delete user identifier field.
            </value>
        </member>
        <member name="P:Serenity.Data.IDeleteLogRow.DeleteDateField">
            <summary>
            Gets the delete date field.
            </summary>
            <value>
            The delete date field.
            </value>
        </member>
        <member name="T:Serenity.Data.IDisplayOrderRow">
            <summary>
              Basic interface for rows that has a display order field and provides a default sorting order.</summary>
        </member>
        <member name="P:Serenity.Data.IDisplayOrderRow.DisplayOrderField">
            <summary>
              Gets display order field for this row.</summary>
        </member>
        <member name="T:Serenity.Data.IEntity">
            <summary>
            An interface for entities with Table property
            </summary>
        </member>
        <member name="P:Serenity.Data.IEntity.Table">
            <summary>
            Table name</summary>
        </member>
        <member name="T:Serenity.Data.IEntityWithJoins">
            <summary>
            Interface for an entity with join information
            </summary>
        </member>
        <member name="T:Serenity.Data.IFieldWithJoinInfo">
            <summary>
            Interface for a field with join and referenced join alias information
            </summary>
            <seealso cref="T:Serenity.Data.IField" />
        </member>
        <member name="P:Serenity.Data.IFieldWithJoinInfo.ReferencedAliases">
            <summary>
            List of referenced joins in field expression</summary>
        </member>
        <member name="P:Serenity.Data.IFieldWithJoinInfo.Joins">
            <summary>
            List of all joins in fields entity</summary>
        </member>
        <member name="T:Serenity.Data.IIdRow">
            <summary>
              Basic interface for rows that has an ID field. You should put [IdProperty] attribute to corresponding field.</summary>
        </member>
        <member name="T:Serenity.Data.IInsertLogRow">
            <summary>
            Interface for rows that have InsertUserId and InsertDate fields
            </summary>
        </member>
        <member name="P:Serenity.Data.IInsertLogRow.InsertUserIdField">
            <summary>
            Gets the insert user identifier field.
            </summary>
            <value>
            The insert user identifier field.
            </value>
        </member>
        <member name="P:Serenity.Data.IInsertLogRow.InsertDateField">
            <summary>
            Gets the insert date field.
            </summary>
            <value>
            The insert date field.
            </value>
        </member>
        <member name="T:Serenity.Data.IIsActiveDeletedRow">
            <summary>
            Marks an IIsActiveRow that -1 is used as deleted value
            </summary>
        </member>
        <member name="T:Serenity.Data.IIsActiveRow">
            <summary>
            Interface for an entity with active field
            </summary>
        </member>
        <member name="P:Serenity.Data.IIsActiveRow.IsActiveField">
            <summary>
            Gets the is active field. 
            1 means active, 0 means inactive, if the row also
            has IIsActiveDeletedRow interface, then -1 means deleted.
            </summary>
            <value>
            The is active field.
            </value>
        </member>
        <member name="T:Serenity.Data.IIsDeletedRow">
            <summary>
            Determines that this row uses soft delete and the field that holds this flag
            </summary>
        </member>
        <member name="P:Serenity.Data.IIsDeletedRow.IsDeletedField">
            <summary>
            Gets the is deleted field.
            </summary>
            <value>
            The is deleted field.
            </value>
        </member>
        <member name="T:Serenity.Data.ILoggingRow">
            <summary>
            A combination of IUpdateLogRow and IInsertLogRow
            </summary>
            <seealso cref="T:Serenity.Data.IUpdateLogRow" />
            <seealso cref="T:Serenity.Data.IInsertLogRow" />
        </member>
        <member name="T:Serenity.Data.INameRow">
            <summary>
            Marks a row as having a Name field (e.g. description for row).
            You should put [NameProperty] attribute to corresponding field
            </summary>
        </member>
        <member name="T:Serenity.Data.IParentIdRow">
            <summary>
            Interface for rows that has a ParentId field
            </summary>
            <seealso cref="T:Serenity.Data.IRow" />
        </member>
        <member name="P:Serenity.Data.IParentIdRow.ParentIdField">
            <summary>
            Gets the parent identifier field.
            </summary>
            <value>
            The parent identifier field.
            </value>
        </member>
        <member name="T:Serenity.Data.IUpdateLogRow">
            <summary>
            Interface for rows that has a UpdateUserId and UpdateDate fields
            </summary>
        </member>
        <member name="P:Serenity.Data.IUpdateLogRow.UpdateUserIdField">
            <summary>
            Gets the update user identifier field.
            </summary>
            <value>
            The update user identifier field.
            </value>
        </member>
        <member name="P:Serenity.Data.IUpdateLogRow.UpdateDateField">
            <summary>
            Gets the update date field.
            </summary>
            <value>
            The update date field.
            </value>
        </member>
        <member name="T:Serenity.Data.AliasedFields">
            <summary>
              Contains extension method to create aliased fields
            </summary>
        </member>
        <member name="M:Serenity.Data.AliasedFields.As``1(``0,System.String)">
            <summary>Aliases the fields with the specified alias.</summary>
            <typeparam name="TFields">The type of the fields.</typeparam>
            <param name="fields">The fields.</param>
            <param name="alias">The alias.</param>
            <returns>
              An instance of RowFieldsBase with T0 replaced with specified alias
            </returns>
            <exception cref="T:System.ArgumentNullException">alias</exception>
        </member>
        <member name="T:Serenity.Data.EntityConnectionExtensions">
            <summary>
            Contains extension methods to perform entity CRUD operations directly on connections.
            Please note that all these methods operate on a low level, and none of them call 
            service behaviors or performs service validations.
            </summary>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.ById``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Finds an entity by its ID value. This method selects only the table fields,
            and no foreign / calculated fields. Use other overloads if you want to 
            select different set of fields.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="id">The identifier.</param>
            <returns>Entity with given ID</returns>
            <exception cref="T:Serenity.Services.ValidationError">Record with specified ID is not found</exception>
            <exception cref="T:System.InvalidOperationException">Multiple records with the ID found</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.TryById``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Tries to finds an entity by its ID value. This method selects only the table fields,
            and no foreign / calculated fields. Use other overloads if you want to 
            select different set of fields.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="id">The identifier.</param>
            <returns>Entity with given ID, or null if not found</returns>
            <exception cref="T:System.InvalidOperationException">Multiple records with the ID found</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.ById``1(System.Data.IDbConnection,System.Object,System.Action{Serenity.Data.SqlQuery})">
            <summary>
            Finds an entity by its ID value. This method does not select any fields
            by default and allows you to edit the query to select fields you want.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="id">The identifier.</param>
            <param name="editQuery">Callback to edit the query.</param>
            <returns>Entity with given ID</returns>
            <exception cref="T:Serenity.Services.ValidationError">Record with specified ID is not found</exception>
            <exception cref="T:System.InvalidOperationException">Multiple records with the ID found</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.TryById``1(System.Data.IDbConnection,System.Object,System.Action{Serenity.Data.SqlQuery})">
            <summary>
            Tries to find an entity by its ID value. This method does not select any fields
            by default and allows you to edit the query to select fields you want.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="id">The identifier.</param>
            <param name="editQuery">Callback to edit the query.</param>
            <returns>Entity with given ID, or null if not found</returns>
            <exception cref="T:System.InvalidOperationException">Multiple records with the ID found</exception> 
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.Single``1(System.Data.IDbConnection,Serenity.ICriteria)">
            <summary>
            Finds a single entity matching the specified criteria.
            This method selects only the table fields,
            and no foreign / calculated fields. Use other overloads if you want to 
            select different set of fields.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="where">The where criteria.</param>
            <returns>The single entity matching the specified criteria</returns>
            <exception cref="T:Serenity.Services.ValidationError">No matching records found</exception>
            <exception cref="T:System.InvalidOperationException">Multiple records matching the specified criteria.</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.TrySingle``1(System.Data.IDbConnection,Serenity.ICriteria)">
            <summary>
            Tries to find a single entity matching the specified criteria. 
            This method selects only the table fields,
            and no foreign / calculated fields. Use other overloads if you want to 
            select different set of fields.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="where">The where criteria.</param>
            <returns>The single entity matching the specified criteria, or null if no matching record found</returns>
            <exception cref="T:System.InvalidOperationException">Multiple records matching the criteria found</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.Single``1(System.Data.IDbConnection,System.Action{Serenity.Data.SqlQuery})">
            <summary>
            Finds a single entity, allowing caller to edit the criteria
            and set of fields to load through a editQuery callback.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="editQuery">The callback to edit query.</param>
            <returns>Single entity matching the criteria set by editQuery.</returns>
            <exception cref="T:Serenity.Services.ValidationError">No records matching the specified criteria.</exception>
            <exception cref="T:System.InvalidOperationException">Multiple records matching the specified criteria.</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.TrySingle``1(System.Data.IDbConnection,System.Action{Serenity.Data.SqlQuery})">
            <summary>
            Tries to find a single entity, allowing caller to edit the criteria
            and set of fields to load through a editQuery callback.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="editQuery">The edit query.</param>
            <returns>Single entity matching the criteria set by editQuery, or null if not found.</returns>
            <exception cref="T:System.InvalidOperationException">Multiple records matching the specified criteria.</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.First``1(System.Data.IDbConnection,Serenity.ICriteria)">
            <summary>
            Finds first entity matching a where criteria.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="where">The where criteria.</param>
            <returns>First entity matching the where criteria.</returns>
            <exception cref="T:Serenity.Services.ValidationError">No records matching the specified criteria.</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.TryFirst``1(System.Data.IDbConnection,Serenity.ICriteria)">
            <summary>
            Tries to find first entity matching a where criteria.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="where">The where criteria.</param>
            <returns>First entity matching the where criteria or null if not found.</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.First``1(System.Data.IDbConnection,System.Action{Serenity.Data.SqlQuery})">
            <summary>
            Finds first entity, allowing the caller to set criteria and fields to select 
            through an editQuery callback.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="editQuery">The edit query callback.</param>
            <returns>First entity matching the criteria.</returns>
            <exception cref="T:Serenity.Services.ValidationError">No records matching the specified criteria.</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.TryFirst``1(System.Data.IDbConnection,System.Action{Serenity.Data.SqlQuery})">
            <summary>
            Tries to finds first entity, allowing the caller to set criteria and fields to select 
            through an editQuery callback.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="editQuery">The edit query callback.</param>
            <returns>First entity matching the criteria, or null if not found.</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.Count``1(System.Data.IDbConnection)">
            <summary>
            Gets count of all records.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <returns>Number of records in the table</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.Count``1(System.Data.IDbConnection,Serenity.ICriteria)">
            <summary>
            Gets count of records matching a specified criteria.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="where">The where criteria.</param>
            <returns>Number of records matching the specified criteria</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.ExistsById``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Checks if the record with specified ID exists.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="id">The identifier.</param>
            <returns>True if record exists</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.Exists``1(System.Data.IDbConnection,Serenity.ICriteria)">
            <summary>
            Checks if record matching specified criteria exists.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="where">The where criteria.</param>
            <returns>True if record matching criteria exists.</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.List``1(System.Data.IDbConnection)">
            <summary>
            Lists all records. This method selects only the table fields,
            and no foreign / calculated fields. Use other overloads if you want to 
            select different set of fields.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <returns>All records</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.List``1(System.Data.IDbConnection,Serenity.ICriteria)">
            <summary>
            Lists the records matching specified where criteria.
            This method selects only the table fields, and no foreign / calculated fields. 
            Use other overloads if you want to select different set of fields.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="where">The where criteria.</param>
            <returns>Records matching the specified criteria</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.List``1(System.Data.IDbConnection,System.Action{Serenity.Data.SqlQuery})">
            <summary>
            Lists the records, allowing the caller to specify criteria and 
            set of fields to select through an editQuery callback.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="editQuery">The edit query callback.</param>
            <returns>List of records matching the edited query.</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.Insert``1(System.Data.IDbConnection,``0)">
            <summary>
            Inserts the specified entity. Note that this operates at a low level,
            it does not perform any validation or permission check, and does not call service behaviors / handlers.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.InsertAndGetID``1(System.Data.IDbConnection,``0)">
            <summary>
            Inserts the specified entity and returns the ID of record inserted.
            Only works for identity columns of integer type. Note that this operates at a low level,
            it does not perform any validation or permission check and does not call service behaviors / handlers.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="row">The row.</param>
            <returns>The ID of the record inserted.</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.UpdateById``1(System.Data.IDbConnection,``0,Serenity.Data.ExpectedRows)">
            <summary>
            Updates the entity by its identifier. Note that this operates at a low level,
            it does not perform any validation or permission check and does not call service behaviors / handlers.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="row">The row.</param>
            <param name="expectedRows">The expected number of rows to be updated, by default 1.</param>
            <exception cref="T:System.InvalidOperationException">ID field of row has null value!</exception>
            <exception cref="T:System.InvalidOperationException">Expected rows and number of updated rows does not match!</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.DeleteById``1(System.Data.IDbConnection,System.Object,Serenity.Data.ExpectedRows)">
            <summary>
            Deletes the entity by its identifier. Note that this operates at a low level,
            it does not perform any validation or permission check and does not call service behaviors / handlers.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="connection">The connection.</param>
            <param name="id">The identifier.</param>
            <param name="expectedRows">The expected number of rows to be deleted, 1 by default.</param>
            <exception cref="T:System.InvalidOperationException">Expected rows and number of deleted rows does not match!</exception>
            <returns>Number of deleted rows</returns>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.ToSqlInsert(Serenity.Data.IRow)">
            <summary>
            Converts the entity to an SqlInsert object by setting only 
            the assigned fields.
            </summary>
            <param name="row">The row with field values to set in new record (must be in TrackAssignments mode).</param>
            <returns>SqlInsert object</returns>
            <exception cref="T:System.ArgumentNullException">row is null</exception>
        </member>
        <member name="M:Serenity.Data.EntityConnectionExtensions.ToSqlUpdateById(Serenity.Data.IIdRow)">
            <summary>
            Converts the entity to an SqlUpdate object by ID setting only 
            the assigned fields.
            </summary>
            <param name="row">The row with field values to set in new record (must be in TrackAssignments mode).</param>
            <returns>SqlUpdate object</returns>
            <exception cref="T:System.ArgumentNullException">row is null</exception>
        </member>
        <member name="T:Serenity.Data.EntityFieldExtensions">
            <summary>
              Contains static extension methods for Field objects.</summary>
        </member>
        <member name="M:Serenity.Data.EntityFieldExtensions.IsTableField(Serenity.Data.Field)">
            <summary>
            Checks to see if field is an actual table field, e.g. not a foreign or calculated
            field. This is determined by field flags and having expression.
            </summary>
            <param name="field">The field.</param>
            <returns>
            True if field seems to be an actual table field.
            </returns>
            <exception cref="T:System.ArgumentNullException">field</exception>
        </member>
        <member name="M:Serenity.Data.EntityFieldExtensions.EnumerateTableFields(Serenity.Data.IRow)">
            <summary>
              Gets a dictionary of table fields (e.g. not a foreign or calculated field) in a row.</summary>
            <param name="row">
              The row to return dictionary of table fields</param>
            <returns>
              A dictionary of table fields in which field objects are keys.</returns>
        </member>
        <member name="M:Serenity.Data.EntityFieldExtensions.GetTableFields(Serenity.Data.IRow)">
            <summary>
              Gets a dictionary of table fields (e.g. not a foreign or calculated field) in a row.</summary>
            <param name="row">
              The row to return dictionary of table fields</param>
            <returns>
              A dictionary of table fields in which field objects are keys.</returns>
        </member>
        <member name="M:Serenity.Data.EntityFieldExtensions.AutoTrim(Serenity.Data.Field,Serenity.Data.IRow)">
            <summary>
            Automatically performs trim on field value based on the field flags
            TrimToEmpty and Trim.
            </summary>
            <param name="field">The field.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:Serenity.Data.EntityFieldExtensions.OfJoin``1(``0,Serenity.Data.Join,System.String,Serenity.Data.FieldFlags)">
            <summary>
            Returns a new field an expression with specified join alias. Avoid using.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="field">The field.</param>
            <param name="join">The join.</param>
            <param name="origin">The origin.</param>
            <param name="extraFlags">The extra flags.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">join</exception>
        </member>
        <member name="M:Serenity.Data.EntityFieldExtensions.GetAttribute``1(Serenity.Data.Field)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="field">The field.</param>
            <returns>First attribute with specified type.</returns>
        </member>
        <member name="M:Serenity.Data.EntityFieldExtensions.GetAttributes``1(Serenity.Data.Field)">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="field">The field.</param>
            <returns>Attributes with specified type.</returns>
        </member>
        <member name="T:Serenity.Data.EntityQueryExtensions">
            <summary>
              Extensions for objects implementing IDbWhere interface.</summary>
        </member>
        <member name="M:Serenity.Data.EntityQueryExtensions.WhereEqual``1(``0,Serenity.Data.IRow)">
            <summary>
              Adds all field values in a row to where clause with equality operator and auto named parameters 
              (field name prefixed with '@').</summary>
            <param field="row">
              The row with modified field values to be added to the where clause (key row).  Must be in TrackAssignments mode, 
              or an exception is raised.</param>
            <returns>
              Object itself.</returns>
        </member>
        <member name="M:Serenity.Data.EntityQueryExtensions.Set``1(``0,Serenity.Data.IRow,Serenity.Data.IField)">
            <summary>
              Sets all field values in a row with auto named parameters (field name prefixed with '@').</summary>
            <param field="row">
              The row with modified field values. Must be in TrackAssignments mode, or an exception is raised.</param>
            <returns>
              Object itself.</returns>
        </member>
        <member name="M:Serenity.Data.EntityQueryExtensions.SelectTableFields(Serenity.Data.SqlQuery,Serenity.Data.IRow,Serenity.Data.Field[])">
            <summary>
              Adds actual table fields in a row to select list of a query.</summary>
            <param name="query">
              Query to select fields into (required).</param>
            <param name="row">
              Row with fields to be selected (required).</param>
            <param name="exclude">
              Fields to be excluded (optional).</param>
        </member>
        <member name="M:Serenity.Data.EntityQueryExtensions.SelectForeignFields(Serenity.Data.SqlQuery,Serenity.Data.IRow,Serenity.Data.Field[])">
            <summary>
              Adds foreign / calculated table fields in a row to select list of a query.</summary>
            <param name="query">
              Query to select fields into (required).</param>
            <param name="row">
              Row with fields to be selected (required).</param>
            <param name="exclude">
              Fields to be excluded (optional).</param>
        </member>
        <member name="M:Serenity.Data.EntityQueryExtensions.SelectNonTableFields(Serenity.Data.SqlQuery)">
            <summary>
              Adds foreign / calculated table fields in a row to select list of a query.</summary>
            <param name="query">
              Query to select fields into (required).</param>
        </member>
        <member name="M:Serenity.Data.EntityQueryExtensions.SelectTableFields(Serenity.Data.SqlQuery,Serenity.Data.Field[])">
            <summary>
              Adds actual table fields in a row to select list of a query.</summary>
            <param name="query">
              Query to select fields into (required).</param>
            <param name="exclude">
              Fields to be excluded (optional).</param>
        </member>
        <member name="M:Serenity.Data.EntityQueryExtensions.Set``1(``0,Serenity.Data.IField,System.Object)">
            <summary>
              Sets a field value with a parameter.</summary>
            <param field="field">
              Field name.</param>
            <param field="param">
              Parameter name</param>
            <param field="value">
              Parameter value</param>
            <returns>
              Object itself.</returns>
        </member>
        <member name="T:Serenity.Data.EntitySqlHelper">
            <summary>
            Contains extension methods to query entities directly
            </summary>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.GetFirst(Serenity.Data.SqlQuery,System.Data.IDbConnection)">
            <summary>
            Gets the first entity returned by executing the query.
            The result is loaded into the loader row of the query.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <returns>True if any rows returned</returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.GetFirst(Serenity.Data.SqlQuery,System.Data.IDbConnection,Serenity.Data.IEntity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the first entity returned by executing the query into the specified row.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="row">The row.</param>
            <param name="param">The parameter dictionary.</param>
            <returns>True if any results returned from reader.</returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.GetSingle(Serenity.Data.SqlQuery,System.Data.IDbConnection)">
            <summary>
            Gets the single entity returned by executing the query. 
            The values are loaded into the loader row of the query.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <returns>True if any results returned from data reader</returns>
            <exception cref="T:System.InvalidOperationException">Query returned more than one result!</exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.GetSingle(Serenity.Data.SqlQuery,System.Data.IDbConnection,Serenity.Data.IRow,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the single entity returned by executing the query into the specified row.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="row">The row to load data into.</param>
            <param name="param">The parameter.</param>
            <returns>True if one result</returns>
            <exception cref="T:System.InvalidOperationException">Query returned more than one result!</exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.ForFirst(Serenity.Data.SqlQuery,System.Data.IDbConnection,System.Action)">
            <summary>
            Executes the specified callback for the first result returned from executing the query.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="callBack">The call back.</param>
            <returns>True if any result returned.</returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.ForFirst(Serenity.Data.SqlQuery,System.Data.IDbConnection,Serenity.Data.ReaderCallBack)">
            <summary>
            Executes the specified reader callback for the first result returned from executing the query.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="callBack">The call back.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.ForEach(Serenity.Data.SqlQuery,System.Data.IDbConnection,System.Action)">
            <summary>
            Executes the specified callback for all rows returned from executing the query.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="callBack">The call back.</param>
            <returns>Number of returned results.</returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.ForEach(Serenity.Data.SqlQuery,System.Data.IDbConnection,Serenity.Data.ReaderCallBack)">
            <summary>
            Executes the specified data reader callback for all rows returned from executing the query.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="callBack">The call back.</param>
            <returns>Number of returned results</returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.List``1(Serenity.Data.SqlQuery,System.Data.IDbConnection,``0)">
            <summary>
            Lists the rows returned from executing the query.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="loaderRow">The loader row.</param>
            <returns>List of rows</returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.GetFromReader(Serenity.Data.SqlQuery,System.Data.IDataReader)">
            <summary>
            Gets field values from data reader into the query loader row.
            </summary>
            <param name="query">The query.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Serenity.Data.EntitySqlHelper.GetFromReader(Serenity.Data.SqlQuery,System.Data.IDataReader,System.Collections.Generic.IList{System.Object})">
            <summary>
            Gets field values from data reader into the set of specified into rows.
            </summary>
            <param name="query">The query.</param>
            <param name="reader">The reader.</param>
            <param name="into">The into rows list.</param>
            <exception cref="T:System.InvalidOperationException">An exception occurred during conversion</exception>
        </member>
        <member name="T:Serenity.Data.EntitySqlQueryExtensions">
            <summary>
              Extensions for SqlQuery.</summary>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.From(Serenity.Data.SqlQuery,Serenity.Data.IEntity)">
            <summary>
            Adds a table to the FROM statement with "T0" alias and sets it as target for future field selections.
            </summary>
            <param name="query">The query.</param>
            <param name="entity">The entity.</param>
            <returns>
            The query itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">row</exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.Into(Serenity.Data.SqlQuery,Serenity.Data.IEntity)">
            <summary>
            Add the specified entity to INTO list of the query, 
            and sets it as current INTO row.
            </summary>
            <param name="query">The query.</param>
            <param name="into">The into.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.Select(Serenity.Data.SqlQuery,Serenity.Data.IField)">
            <summary>
            Adds a field's expression to the SELECT statement with its own column name. 
            If a join alias is referenced in the field expression, and the join is defined in 
            field's entity class, it is automatically included in the query. 
            The field is marked as a target at current index for future loading from a data reader.
            </summary>
            <param name="field">Field object</param>
            <param name="query">The sql query</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.Select(Serenity.Data.SqlQuery,Serenity.Data.IField,System.String)">
            <summary>
            Adds a field's expression to the SELECT statement with a given column name.
            If a join alias is referenced in the field expression, and the join is defined in
            field's entity class, it is automatically included in the query.
            The field is marked as a target at current index for future loading from a data reader.
            </summary>
            <param name="query">The query.</param>
            <param name="field">Field object</param>
            <param name="columnName">Name of the column.</param>
            <returns>
            The query itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            field
            or
            columnName
            </exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.Select(Serenity.Data.SqlQuery,Serenity.Data.IAlias,Serenity.Data.IField)">
            <summary>
            Adds a field of a given table alias to the SELECT statement.
            </summary>
            <param name="query">The query.</param>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="field">A field that only name will be used. It won't be set as a target.</param>
            <returns>
            The query itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            alias
            or
            field
            </exception>
            <remarks>
            No column name is set for the selected field.
            Also field is not set as a target, unlike field only overload, only field name is used.
            </remarks>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.Select(Serenity.Data.SqlQuery,Serenity.Data.IAlias,Serenity.Data.IField,System.String)">
            <summary>
            Adds a field of a given table alias to the SELECT statement.
            </summary>
            <param name="query">The query.</param>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="field">A field that only its field name will be used. It won't be set as a target.</param>
            <param name="columnName">A column name</param>
            <returns>
            The query itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            alias
            or
            field
            or
            columnName
            </exception>
            <remarks>
            Field is not set as a target, unlike field only overload, only field name is used.
            </remarks>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.Select(Serenity.Data.SqlQuery,Serenity.Data.IField[])">
            <summary>
            For each field in the fields array, adds expression of the field to
            the SELECT statement with a column name of its name.
            If a join alias is referenced in the field expression, and the join is defined in
            field's entity class, it is automatically included in the query.
            The fields are marked as a target at current index for future loading from a data reader.
            </summary>
            <param name="query">The query.</param>
            <param name="fields">Field objects</param>
            <returns>
            The query itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">fields</exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.SelectAs(Serenity.Data.SqlQuery,System.String,Serenity.Data.IField)">
            <summary>
            Adds a field or an expression to the SELECT statement with a column name of a
            field's name. The field is marked as a target at current index for future loading
            from a data reader.
            </summary>
            <param name="query">The query.</param>
            <param name="expression">A field name or an expression</param>
            <param name="intoField">A field object whose name to be used as a column name.</param>
            <returns>
            The query itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            field
            or
            alias
            </exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.OrderBy(Serenity.Data.SqlQuery,Serenity.Data.IField,System.Boolean)">
            <summary>
            Adds fields expression to order by list
            </summary>
            <param name="query">The query.</param>
            <param name="field">The field.</param>
            <param name="desc">if set to <c>true</c> [desc].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field</exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.OrderBy(Serenity.Data.SqlQuery,Serenity.Data.IField[])">
            <summary>
            Adds fields expressions to order by list
            </summary>
            <param name="query">The query.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fields</exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.GroupBy(Serenity.Data.SqlQuery,Serenity.Data.IField)">
            <summary>
            Adds fields expressions to group by list
            </summary>
            <param name="query">The query.</param>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field</exception>
        </member>
        <member name="M:Serenity.Data.EntitySqlQueryExtensions.GroupBy(Serenity.Data.SqlQuery,Serenity.Data.IField[])">
            <summary>
            Adds fields expression to group by list
            </summary>
            <param name="query">The query.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fields</exception>
        </member>
        <member name="T:Serenity.Data.RowExtensions">
            <summary>
            Contains extensions for row objects
            </summary>
        </member>
        <member name="M:Serenity.Data.RowExtensions.Clone``1(``0)">
            <summary>
            Clones the specified row.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowExtensions.ApplyDefaultValues``1(``0,System.Boolean)">
            <summary>
            Applies the default values.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="row">The row.</param>
            <param name="unassignedOnly">if set to <c>true</c> [unassigned only].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">row</exception>
        </member>
        <member name="M:Serenity.Data.RowExtensions.FindField(Serenity.Data.IRow,System.String)">
            <summary>
            Finds the field by its name
            </summary>
            <param name="row">The row.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowExtensions.FindFieldByPropertyName(Serenity.Data.IRow,System.String)">
            <summary>
            Finds the field by property name.
            </summary>
            <param name="row">The row.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowExtensions.GetFields(Serenity.Data.IRow)">
            <summary>
            Gets the fields.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.BooleanField">
            <summary>
            Field with boolean value
            </summary>
        </member>
        <member name="M:Serenity.Data.BooleanField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Boolean}},System.Action{Serenity.Data.IRow,System.Nullable{System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.BooleanField"/> class.
            </summary>
            <param name="collection">The field collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value callback.</param>
            <param name="setValue">The set value callback.</param>
        </member>
        <member name="M:Serenity.Data.BooleanField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Boolean}},System.Action{Serenity.Data.IRow,System.Nullable{System.Boolean}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BooleanField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.BooleanField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Converts field value to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.BooleanField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Gets field value from JSON.
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader is null</exception>
        </member>
        <member name="T:Serenity.Data.ByteArrayField">
            <summary>
            Field with a byte[] value
            </summary>
        </member>
        <member name="M:Serenity.Data.ByteArrayField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Byte[]},System.Action{Serenity.Data.IRow,System.Byte[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ByteArrayField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.ByteArrayField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Byte[]},System.Action{Serenity.Data.IRow,System.Byte[]})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.ByteArrayField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.ByteArrayField.CompareValues(System.Byte[],System.Byte[])">
            <summary>
            Compares the values.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.ByteArrayField.Clone(System.Byte[])">
            <summary>
            Clones the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.ByteArrayField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.ByteArrayField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.CustomClassField`1">
            <summary>
            Base class for custom fields with reference type values
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Serenity.Data.GenericClassField`1" />
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,`0},System.Action{Serenity.Data.IRow,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.CustomClassField`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.GetFromReader(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.CompareValues(`0,`0)">
            <summary>
            Compares the values.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.IndexCompare(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Compares the field values for two rows for an ascending index sort
            </summary>
            <param name="row1">The row1.</param>
            <param name="row2">The row2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.ValueToJson(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.ValueFromJson(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.Clone(`0)">
            <summary>
            Clones the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.CustomClassField`1.Copy(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Serenity.Data.DateTimeField">
            <summary>
            Field with a DateTime value
            </summary>
        </member>
        <member name="M:Serenity.Data.DateTimeField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.DateTime}},System.Action{Serenity.Data.IRow,System.Nullable{System.DateTime}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DateTimeField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.DateTimeField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.DateTime}},System.Action{Serenity.Data.IRow,System.Nullable{System.DateTime}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DateTimeField.ConvertValue(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DateTimeField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="P:Serenity.Data.DateTimeField.DateOnly">
            <summary>
            Gets or sets a value indicating whether the field is date only, e.g. no time part.
            </summary>
            <value>
              <c>true</c> if date only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.DateTimeField.DateTimeKind">
            <summary>
            Gets or sets the kind of the date time.
            Unspecified means no date/time conversions, Local means local time zone, Utc means UTC time zone
            </summary>
            <value>
            The kind of the date time.
            </value>
        </member>
        <member name="M:Serenity.Data.DateTimeField.ToDateTimeKind(System.DateTime,System.Nullable{System.DateTimeKind})">
            <summary>
            Converts the value to specified DateTimeKind
            </summary>
            <param name="value">The value.</param>
            <param name="dateTimeKind">Kind of the date time.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DateTimeField.ToDateTimeKind(System.DateTimeOffset,System.Nullable{System.DateTimeKind})">
            <summary>
            Converts the value to specified DateTimeKind
            </summary>
            <param name="value">The value.</param>
            <param name="dateTimeKind">Kind of the date time.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.DateTimeField.Item(Serenity.Data.IRow)">
            <summary>
            Gets or sets the value of this field with the specified row.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Serenity.Data.DateTimeField.AsObject(Serenity.Data.IRow)">
            <summary>
            Gets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Serenity.Data.DateTimeField.AsObject(Serenity.Data.IRow,System.Object)">
            <summary>
            Sets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.DateTimeField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.DateTimeField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.DateTimeOffsetField">
            <summary>
            Field with a DateTimeOffset value
            </summary>
        </member>
        <member name="M:Serenity.Data.DateTimeOffsetField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.DateTimeOffset}},System.Action{Serenity.Data.IRow,System.Nullable{System.DateTimeOffset}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DateTimeOffsetField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.DateTimeOffsetField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.DateTimeOffset}},System.Action{Serenity.Data.IRow,System.Nullable{System.DateTimeOffset}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DateTimeOffsetField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="P:Serenity.Data.DateTimeOffsetField.Item(Serenity.Data.IRow)">
            <summary>
            Gets or sets the value of this field with the specified row.
            </summary>
            <value>
            The <see cref="T:System.Nullable`1"/>.
            </value>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DateTimeOffsetField.AsObject(Serenity.Data.IRow)">
            <summary>
            Gets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DateTimeOffsetField.AsObject(Serenity.Data.IRow,System.Object)">
            <summary>
            Sets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.DateTimeOffsetField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.DateTimeOffsetField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.DecimalField">
            <summary>
            Field with a Decimal value
            </summary>
        </member>
        <member name="M:Serenity.Data.DecimalField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Decimal}},System.Action{Serenity.Data.IRow,System.Nullable{System.Decimal}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DecimalField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.DecimalField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Decimal}},System.Action{Serenity.Data.IRow,System.Nullable{System.Decimal}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DecimalField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.DecimalField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.DecimalField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.DoubleField">
            <summary>
            Field with a Double value
            </summary>
        </member>
        <member name="M:Serenity.Data.DoubleField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Double}},System.Action{Serenity.Data.IRow,System.Nullable{System.Double}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DoubleField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.DoubleField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Double}},System.Action{Serenity.Data.IRow,System.Nullable{System.Double}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DoubleField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.DoubleField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.DoubleField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.EnumField`1">
            <summary>
            Field with an Enum value
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
        </member>
        <member name="M:Serenity.Data.EnumField`1.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Int32}},System.Action{Serenity.Data.IRow,System.Nullable{System.Int32}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.EnumField`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <exception cref="T:System.InvalidProgramException">
            </exception>
        </member>
        <member name="P:Serenity.Data.EnumField`1.Item(Serenity.Data.IRow)">
            <summary>
            Gets or sets the value of this field with the specified row.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Field">
            <summary>
            Base Field class
            </summary>
            <seealso cref="T:Serenity.Data.IFieldWithJoinInfo" />
        </member>
        <member name="M:Serenity.Data.Field.IsNull">
            <summary>
            Creates a new "the Field IS NULL" criteria
            </summary>
        </member>
        <member name="M:Serenity.Data.Field.IsNotNull">
            <summary>
            Creates a new "the Field IS NOT NULL" criteria
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.Like(System.String)">
            <summary>
            Creates a new "the Field LIKE mask" criteria
            </summary>
            <param name="mask">The mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.NotLike(System.String)">
            <summary>
            Creates a new "the Field NOT LIKE mask" criteria
            </summary>
            <param name="mask">The mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.StartsWith(System.String)">
            <summary>
            Creates a new "the Field STARTS WITH mask" criteria
            </summary>
            <param name="mask">The mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.EndsWith(System.String)">
            <summary>
            Creates a new "the Field ENDS WITH mask" criteria
            </summary>
            <param name="mask">The mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.Contains(System.String)">
            <summary>
            Creates a new "the Field CONTAINS mask" criteria
            </summary>
            <param name="mask">The mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.NotContains(System.String)">
            <summary>
            Creates a new "the Field NOT CONTAINS mask" criteria
            </summary>
            <param name="mask">The mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.In``1(``0[])">
            <summary>
            Creates a new "the Field IN (values...)" criteria
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.NotIn``1(``0[])">
            <summary>
            Creates a new "the Field NOT IN (values...)" criteria
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,System.DateTime)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,System.Decimal)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,Serenity.Data.Field)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="field2">The field2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,System.Guid)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,System.Int32)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,System.Int64)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,Serenity.Data.Parameter)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Equality(Serenity.Data.Field,System.String)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,System.DateTime)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,System.Decimal)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,Serenity.Data.Field)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="field2">The field2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,System.Guid)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,System.Int32)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,System.Int64)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,Serenity.Data.Parameter)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_Inequality(Serenity.Data.Field,System.String)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,System.DateTime)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,System.Decimal)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,Serenity.Data.Field)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="field2">The field2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,System.Guid)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,System.Int32)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,System.Int64)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,Serenity.Data.Parameter)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThan(Serenity.Data.Field,System.String)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,System.DateTime)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,System.Decimal)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,Serenity.Data.Field)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="field2">The field2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,System.Guid)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,System.Int32)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,System.Int64)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,Serenity.Data.Parameter)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_LessThanOrEqual(Serenity.Data.Field,System.String)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,System.DateTime)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,System.Decimal)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,Serenity.Data.Field)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="field2">The field2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,System.Guid)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,System.Int32)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,System.Int64)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,Serenity.Data.Parameter)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThan(Serenity.Data.Field,System.String)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,System.DateTime)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,System.Decimal)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,Serenity.Data.Field)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="field2">The field2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,System.Guid)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,System.Int32)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,System.Int64)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,Serenity.Data.Parameter)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.op_GreaterThanOrEqual(Serenity.Data.Field,System.String)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Serenity.Data.Field.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},Serenity.Data.FieldType,System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Field"/> class.
            </summary>
            <param name="fields">The fields.</param>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="P:Serenity.Data.Field.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.Index">
            <summary>
            Gets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.Name">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:Serenity.Data.Field.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.ReferencedAliases">
            <summary>
            Gets or sets the referenced aliases.
            </summary>
            <value>
            The referenced aliases.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.AutoTextKey">
            <summary>
            Gets the automatic text key.
            </summary>
            <value>
            The automatic text key.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
            <value>
            The flags.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.CustomAttributes">
            <summary>
            Gets or sets the custom attributes.
            </summary>
            <value>
            The custom attributes.
            </value>
        </member>
        <member name="M:Serenity.Data.Field.JsonUnexpectedToken(Newtonsoft.Json.JsonReader)">
            <summary>
            Jsons the unexpected token.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">Unexpected token when deserializing row: " + reader.TokenType</exception>
        </member>
        <member name="M:Serenity.Data.Field.CopyNoAssignment(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Copies the no assignment.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Serenity.Data.Field.Expression">
            <summary>
            The expression (can be equal to name if no expression)
            </summary>
        </member>
        <member name="P:Serenity.Data.Field.JoinAlias">
            <summary>
            Gets the join alias.
            </summary>
            <value>
            The join alias.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.Join">
            <summary>
            Gets the join.
            </summary>
            <value>
            The join.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.Origin">
            <summary>
            Gets the origin.
            </summary>
            <value>
            The origin.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.ForeignTable">
            <summary>
            Gets or sets the foreign table.
            </summary>
            <value>
            The foreign table.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.ForeignField">
            <summary>
            Gets or sets the foreign field.
            </summary>
            <value>
            The foreign field.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.ForeignJoinAlias">
            <summary>
            Gets or sets the foreign join alias.
            </summary>
            <value>
            The foreign join alias.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.InsertPermission">
            <summary>
            Gets or sets the insert permission.
            </summary>
            <value>
            The insert permission.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.MinSelectLevel">
            <summary>
            Gets or sets the minimum select level.
            </summary>
            <value>
            The minimum select level.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.NaturalOrder">
            <summary>
            Gets or sets the natural order.
            </summary>
            <value>
            The natural order.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.ReadPermission">
            <summary>
            Gets or sets the read permission.
            </summary>
            <value>
            The read permission.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.TextualField">
            <summary>
            Gets or sets the textual field.
            </summary>
            <value>
            The textual field.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.UpdatePermission">
            <summary>
            Gets or sets the update permission.
            </summary>
            <value>
            The update permission.
            </value>
        </member>
        <member name="M:Serenity.Data.Field.ForeignJoin(System.Nullable{System.Int32})">
            <summary>
            Creates a left join from the foreign join index.
            </summary>
            <param name="foreignIndex">Index of the foreign.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">ForeignTable</exception>
        </member>
        <member name="M:Serenity.Data.Field.OnRowInitialization">
            <summary>
            Called when [row initialization].
            </summary>
        </member>
        <member name="M:Serenity.Data.Field.CheckUnassignedRead(Serenity.Data.IRow)">
            <summary>
            Checks the unassigned read.
            </summary>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">row</exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Serenity.Data.Field.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.Field.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.Field.Copy(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Serenity.Data.Field.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
        </member>
        <member name="P:Serenity.Data.Field.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="M:Serenity.Data.Field.ConvertValue(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.IndexCompare(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Compares the field values for two rows for an ascending index sort
            </summary>
            <param name="row1">The row1.</param>
            <param name="row2">The row2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.AsObject(Serenity.Data.IRow)">
            <summary>
            Gets the value of this row as an object.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.AsObject(Serenity.Data.IRow,System.Object)">
            <summary>
            Gets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.Field.GetIsNull(Serenity.Data.IRow)">
            <summary>
            Gets if the field value is null.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.AsSqlValue(Serenity.Data.IRow)">
            <summary>
            Gets the value of this row as an SQL value.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.IsNull(Serenity.Data.IRow)">
            <summary>
            Determines whether the specified row is null.
            </summary>
            <param name="row">The row.</param>
            <returns>
              <c>true</c> if the specified row is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Serenity.Data.Field.Criteria">
            <summary>
            Gets the criteria.
            </summary>
            <value>
            The criteria.
            </value>
        </member>
        <member name="P:Serenity.Data.Field.IsLookup">
            <summary>
            Gets if this field is one with a LookupInclude attribute or ID or Name field
            </summary>
        </member>
        <member name="P:Serenity.Data.Field.ColumnAlias">
            <summary>
            Select as column alias. Can be equal to property name or name.
            </summary>
        </member>
        <member name="M:Serenity.Data.Field.GetTitle(Serenity.ITextLocalizer)">
            <summary>
            Gets the title.
            </summary>
            <param name="localizer">The localizer.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Field.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Serenity.Data.FieldType">
            <summary>
            Enumeration of field types
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Int16">
            <summary>
            Int16
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Int32">
            <summary>
            Int32
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Int64">
            <summary>
            Int64
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Single">
            <summary>
            Single
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.DateTime">
            <summary>
            Date/Time
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Stream">
            <summary>
            Stream
            </summary>
        </member>
        <member name="F:Serenity.Data.FieldType.Object">
            <summary>
            Other types (Object)
            </summary>
        </member>
        <member name="T:Serenity.Data.GenericClassField`1">
            <summary>
            Base class for fields with reference type values
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Serenity.Data.Field" />
        </member>
        <member name="F:Serenity.Data.GenericClassField`1._getValue">
            <summary>
            The get value callback
            </summary>
        </member>
        <member name="F:Serenity.Data.GenericClassField`1._setValue">
            <summary>
            The set value callback
            </summary>
        </member>
        <member name="M:Serenity.Data.GenericClassField`1.Copy(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Serenity.Data.GenericClassField`1.Item(Serenity.Data.IRow)">
            <summary>
            Gets or sets the value of this field with the specified row.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.GenericClassField`1.ConvertValue(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.GenericClassField`1.AsObject(Serenity.Data.IRow)">
            <summary>
            Gets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Serenity.Data.GenericClassField`1.AsObject(Serenity.Data.IRow,System.Object)">
            <summary>
            Sets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.GenericClassField`1.GetIsNull(Serenity.Data.IRow)">
            <summary>
            Gets if the field value is null.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.GenericClassField`1.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="T:Serenity.Data.GenericField`1">
            <summary>
            Base generic class for fields with a value
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Serenity.Data.Field" />
        </member>
        <member name="F:Serenity.Data.GenericField`1._getValue">
            <summary>
            The get value
            </summary>
        </member>
        <member name="F:Serenity.Data.GenericField`1._setValue">
            <summary>
            The set value
            </summary>
        </member>
        <member name="M:Serenity.Data.GenericField`1.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},Serenity.Data.FieldType,System.String,System.String,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,`0},System.Action{Serenity.Data.IRow,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.GenericField`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.GenericField`1.Copy(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Serenity.Data.GenericField`1.Item(Serenity.Data.IRow)">
            <summary>
            Gets or sets the value of this field with the specified row.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="T:Serenity.Data.GenericValueField`1">
            <summary>
            Base class for fields with a value type value
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Serenity.Data.Field" />
            <seealso cref="T:Serenity.Data.IEnumTypeField" />
        </member>
        <member name="F:Serenity.Data.GenericValueField`1._getValue">
            <summary>
            The get value
            </summary>
        </member>
        <member name="F:Serenity.Data.GenericValueField`1._setValue">
            <summary>
            The set value
            </summary>
        </member>
        <member name="F:Serenity.Data.GenericValueField`1._enumType">
            <summary>
            The enum type
            </summary>
        </member>
        <member name="M:Serenity.Data.GenericValueField`1.ConvertValue(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.GenericValueField`1.EnumType">
            <summary>
            Gets or sets the type of the enum.
            </summary>
            <value>
            The type of the enum.
            </value>
        </member>
        <member name="M:Serenity.Data.GenericValueField`1.Copy(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Serenity.Data.GenericValueField`1.Item(Serenity.Data.IRow)">
            <summary>
            Gets or sets the value of this field with the specified row.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Serenity.Data.GenericValueField`1.AsObject(Serenity.Data.IRow)">
            <summary>
            Gets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Serenity.Data.GenericValueField`1.AsObject(Serenity.Data.IRow,System.Object)">
            <summary>
            Sets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidCastException">Invalid cast exception while trying to set the value of {Name} field on {row.GetType().Name} as object.</exception>
        </member>
        <member name="M:Serenity.Data.GenericValueField`1.GetIsNull(Serenity.Data.IRow)">
            <summary>
            Gets if the field value is null.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.GenericValueField`1.IndexCompare(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Compares the field values for two rows for an ascending index sort
            </summary>
            <param name="row1">The row1.</param>
            <param name="row2">The row2.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.GenericValueField`1.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="T:Serenity.Data.GuidField">
            <summary>
            Field with a Guid value
            </summary>
        </member>
        <member name="M:Serenity.Data.GuidField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Guid}},System.Action{Serenity.Data.IRow,System.Nullable{System.Guid}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.GuidField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.GuidField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Guid}},System.Action{Serenity.Data.IRow,System.Nullable{System.Guid}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.GuidField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.GuidField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.GuidField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.GuidField.ConvertValue(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.IEnumTypeField">
            <summary>
            Interface for fields with an enum type property
            </summary>
        </member>
        <member name="P:Serenity.Data.IEnumTypeField.EnumType">
            <summary>
            Gets or sets the type of the enum.
            </summary>
            <value>
            The type of the enum.
            </value>
        </member>
        <member name="T:Serenity.Data.Int16Field">
            <summary>
            Field with Int16 value
            </summary>
        </member>
        <member name="M:Serenity.Data.Int16Field.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Int16}},System.Action{Serenity.Data.IRow,System.Nullable{System.Int16}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Int16Field"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.Int16Field.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Int16}},System.Action{Serenity.Data.IRow,System.Nullable{System.Int16}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Int16Field.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.Int16Field.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.Int16Field.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.Int32Field">
            <summary>
            Field with Int32 value
            </summary>
        </member>
        <member name="M:Serenity.Data.Int32Field.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Int32}},System.Action{Serenity.Data.IRow,System.Nullable{System.Int32}})">
            <summary>Initializes a new instance of the <see cref="T:Serenity.Data.Int32Field" /> class.</summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.Int32Field.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Int32}},System.Action{Serenity.Data.IRow,System.Nullable{System.Int32}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Int32Field.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.Int32Field.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.Int32Field.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.Int64Field">
            <summary>
            Field with Int64 value
            </summary>
        </member>
        <member name="M:Serenity.Data.Int64Field.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Int64}},System.Action{Serenity.Data.IRow,System.Nullable{System.Int64}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Int64Field"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.Int64Field.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Int64}},System.Action{Serenity.Data.IRow,System.Nullable{System.Int64}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Int64Field.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.Int64Field.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.Int64Field.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.JsonField`1">
            <summary>
            Field with JSON value
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Serenity.Data.JsonField`1.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,`0},System.Action{Serenity.Data.IRow,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.JsonField`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.JsonField`1.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,`0},System.Action{Serenity.Data.IRow,`0})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.JsonField`1.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="P:Serenity.Data.JsonField`1.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="M:Serenity.Data.JsonField`1.AsSqlValue(Serenity.Data.IRow)">
            <summary>
            Gets the value of this row as an SQL value.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.JsonField`1.IndexCompare(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Compares the field values for two rows for an ascending index sort
            </summary>
            <param name="row1">The row1.</param>
            <param name="row2">The row2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.JsonField`1.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.JsonField`1.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.ListField`1">
            <summary>
            Field with a list value
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Serenity.Data.ListField`1.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Collections.Generic.List{`0}},System.Action{Serenity.Data.IRow,System.Collections.Generic.List{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ListField`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.ListField`1.CompareValues(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            Compares the values.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.ListField`1.Clone(System.Collections.Generic.List{`0})">
            <summary>
            Clones the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.RowField`1">
            <summary>
            Field with a Row value
            </summary>
            <typeparam name="TForeign">The type of the foreign.</typeparam>
            <seealso cref="T:Serenity.Data.CustomClassField`1" />
        </member>
        <member name="M:Serenity.Data.RowField`1.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,`0},System.Action{Serenity.Data.IRow,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.RowField`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.RowField`1.CompareValues(`0,`0)">
            <summary>
            Compares the values.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowField`1.Clone(`0)">
            <summary>
            Clones the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.RowListField`1">
            <summary>
            Field with a RowList value
            </summary>
            <typeparam name="TForeign">The type of the foreign.</typeparam>
        </member>
        <member name="M:Serenity.Data.RowListField`1.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Collections.Generic.List{`0}},System.Action{Serenity.Data.IRow,System.Collections.Generic.List{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.RowListField`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.RowListField`1.CompareValues(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            Compares the values.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowListField`1.Clone(System.Collections.Generic.List{`0})">
            <summary>
            Clones the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.SingleField">
            <summary>
            Field with a Single value
            </summary>
        </member>
        <member name="M:Serenity.Data.SingleField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Single}},System.Action{Serenity.Data.IRow,System.Nullable{System.Single}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.SingleField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.SingleField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.Single}},System.Action{Serenity.Data.IRow,System.Nullable{System.Single}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SingleField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.SingleField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.SingleField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.StreamField">
            <summary>
            Field with a Stream value
            </summary>
        </member>
        <member name="M:Serenity.Data.StreamField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.IO.Stream},System.Action{Serenity.Data.IRow,System.IO.Stream})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.StreamField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.StreamField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.IO.Stream},System.Action{Serenity.Data.IRow,System.IO.Stream})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.StreamField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.StreamField.IndexCompare(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Compares the field values for two rows for an ascending index sort
            </summary>
            <param name="row1">The row1.</param>
            <param name="row2">The row2.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Serenity.Data.StreamField.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the stream.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            dest
            </exception>
        </member>
        <member name="M:Serenity.Data.StreamField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.StreamField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.StringField">
            <summary>
            Field with a String value
            </summary>
        </member>
        <member name="M:Serenity.Data.StringField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.String},System.Action{Serenity.Data.IRow,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.StringField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.StringField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.String},System.Action{Serenity.Data.IRow,System.String})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.StringField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.StringField.IndexCompare(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Compares the field values for two rows for an ascending index sort
            </summary>
            <param name="row1">The row1.</param>
            <param name="row2">The row2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.StringField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.StringField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.TimeSpanField">
            <summary>
            Field with a TimeSpan value
            </summary>
        </member>
        <member name="M:Serenity.Data.TimeSpanField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.TimeSpan}},System.Action{Serenity.Data.IRow,System.Nullable{System.TimeSpan}})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.TimeSpanField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.TimeSpanField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Nullable{System.TimeSpan}},System.Action{Serenity.Data.IRow,System.Nullable{System.TimeSpan}})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.TimeSpanField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="P:Serenity.Data.TimeSpanField.Item(Serenity.Data.IRow)">
            <summary>
            Gets or sets the <see cref="T:System.Nullable`1"/> with the specified row.
            </summary>
            <value>
            The <see cref="T:System.Nullable`1"/>.
            </value>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.TimeSpanField.AsObject(Serenity.Data.IRow)">
            <summary>
            Gets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Serenity.Data.TimeSpanField.AsObject(Serenity.Data.IRow,System.Object)">
            <summary>
            Sets the value of this field in specified row as object.
            </summary>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.TimeSpanField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.TimeSpanField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.VariantField">
            <summary>
            Field with a Variant (e.g. SQL VARIANT) value
            </summary>
        </member>
        <member name="M:Serenity.Data.VariantField.#ctor(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Object},System.Action{Serenity.Data.IRow,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.VariantField"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="M:Serenity.Data.VariantField.Factory(System.Collections.Generic.ICollection{Serenity.Data.Field},System.String,Serenity.LocalText,System.Int32,Serenity.Data.FieldFlags,System.Func{Serenity.Data.IRow,System.Object},System.Action{Serenity.Data.IRow,System.Object})">
            <summary>
            Static factory for field, for backward compatibility, avoid using.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="caption">The caption.</param>
            <param name="size">The size.</param>
            <param name="flags">The flags.</param>
            <param name="getValue">The get value.</param>
            <param name="setValue">The set value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.VariantField.GetFromReader(System.Data.IDataReader,System.Int32,Serenity.Data.IRow)">
            <summary>
            Gets field value from a data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="index">The index.</param>
            <param name="row">The row.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:Serenity.Data.VariantField.IndexCompare(Serenity.Data.IRow,Serenity.Data.IRow)">
            <summary>
            Compares the field values for two rows for an ascending index sort
            </summary>
            <param name="row1">The row1.</param>
            <param name="row2">The row2.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.VariantField.ValueToJson(Newtonsoft.Json.JsonWriter,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes this fields value to JSON
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Serenity.Data.VariantField.ValueFromJson(Newtonsoft.Json.JsonReader,Serenity.Data.IRow,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes this fields value from JSON
            </summary>
            <param name="reader">The reader.</param>
            <param name="row">The row.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="T:Serenity.Data.DefaultRowFieldsProvider">
            <summary>
            Default row fields instance provider, that resolves row fields instances
            using ActivatorUtilities.CreateInstance through a IServiceProvider.
            </summary>
            <seealso cref="T:Serenity.Data.IRowFieldsProvider" />
        </member>
        <member name="M:Serenity.Data.DefaultRowFieldsProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DefaultRowFieldsProvider"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException">serviceProvider</exception>
        </member>
        <member name="M:Serenity.Data.DefaultRowFieldsProvider.Resolve(System.Type)">
            <summary>
            Resolves the specified fields type.
            </summary>
            <param name="fieldsType">Type of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.DefaultRowFieldsProvider.ResolveWithAlias(System.Type,System.String)">
            <summary>
            Resolves the with alias.
            </summary>
            <param name="fieldsType">Type of the fields.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">alias</exception>
        </member>
        <member name="T:Serenity.Data.DefaultRowTypeRegistry">
            <summary>
            Default row type registry
            </summary>
            <seealso cref="T:Serenity.Data.IRowTypeRegistry" />
        </member>
        <member name="M:Serenity.Data.DefaultRowTypeRegistry.#ctor(Serenity.Abstractions.ITypeSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DefaultRowTypeRegistry"/> class.
            </summary>
            <param name="typeSource">The type source.</param>
            <exception cref="T:System.ArgumentNullException">typeSource</exception>
        </member>
        <member name="P:Serenity.Data.DefaultRowTypeRegistry.AllRowTypes">
            <summary>
            Gets all row types.
            </summary>
            <value>
            All row types.
            </value>
        </member>
        <member name="M:Serenity.Data.DefaultRowTypeRegistry.ByConnectionKey(System.String)">
            <summary>
            Returns row types by the connection key.
            </summary>
            <param name="connectionKey">The connection key.</param>
            <returns>Row types by the connection key</returns>
        </member>
        <member name="T:Serenity.Data.DialectExpressionSelector">
            <summary>
            Selects field expressions based on dialect
            </summary>
        </member>
        <member name="M:Serenity.Data.DialectExpressionSelector.#ctor(Serenity.Data.ISqlDialect)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DialectExpressionSelector"/> class.
            </summary>
            <param name="dialect">The dialect.</param>
            <exception cref="T:System.ArgumentNullException">dialect</exception>
        </member>
        <member name="M:Serenity.Data.DialectExpressionSelector.GetBestMatch``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Gets the best match.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="attributes">The expressions.</param>
            <param name="getDialect">The get dialect.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.DialectExpressionSelector.Dialect">
            <summary>
            Gets the dialect used for this expression selector
            </summary>
        </member>
        <member name="T:Serenity.Data.FallbackRowFieldsProvider">
            <summary>
            Fallback row fields provider for cases where a IServiceProvider 
            is not available.
            </summary>
            <seealso cref="T:Serenity.Data.IRowFieldsProvider" />
        </member>
        <member name="F:Serenity.Data.FallbackRowFieldsProvider.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:Serenity.Data.FallbackRowFieldsProvider.Resolve(System.Type)">
            <summary>
            Resolves the specified fields type.
            </summary>
            <param name="fieldsType">Type of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.FallbackRowFieldsProvider.ResolveWithAlias(System.Type,System.String)">
            <summary>
            Resolves the with alias.
            </summary>
            <param name="fieldsType">Type of the fields.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">alias</exception>
        </member>
        <member name="T:Serenity.Data.IEditableRow">
            <summary>
            Methods and properties of a row to support desktop app grid etc. editing
            </summary>
        </member>
        <member name="M:Serenity.Data.IEditableRow.AddValidationError(System.String,System.String)">
            <summary>
            Adds the validation error.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Serenity.Data.IEditableRow.ClearValidationErrors">
            <summary>
            Clears the validation errors.
            </summary>
        </member>
        <member name="P:Serenity.Data.IEditableRow.HasErrors">
            <summary>
            Gets a value indicating whether this instance has errors.
            </summary>
            <value>
              <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.IEditableRow.HasPostHandler">
            <summary>
            Gets a value indicating whether this instance has post handler.
            </summary>
            <value>
              <c>true</c> if this instance has post handler; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.IEditableRow.IsAnyFieldChanged">
            <summary>
            Gets a value indicating whether this instance is any field changed.
            </summary>
            <value>
              <c>true</c> if this instance is any field changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.IEditableRow.IsEditing">
            <summary>
            Gets a value indicating whether this instance is editing.
            </summary>
            <value>
              <c>true</c> if this instance is editing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Data.IEditableRow.IsFieldChanged(Serenity.Data.Field)">
            <summary>
            Determines whether [is field changed] [the specified field].
            </summary>
            <param name="field">The field.</param>
            <returns>
              <c>true</c> if [is field changed] [the specified field]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Serenity.Data.IEditableRow.PostEnded">
            <summary>
            The post ended event
            </summary>
        </member>
        <member name="P:Serenity.Data.IEditableRow.OriginalValues">
            <summary>
            Gets the original values.
            </summary>
            <value>
            The original values.
            </value>
        </member>
        <member name="P:Serenity.Data.IEditableRow.PreviousValues">
            <summary>
            Gets the previous values.
            </summary>
            <value>
            The previous values.
            </value>
        </member>
        <member name="M:Serenity.Data.IEditableRow.RemoveValidationError(System.String)">
            <summary>
            Removes the validation error.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Serenity.Data.IEditableRow.ValidationErrors">
            <summary>
            Gets the validation errors.
            </summary>
            <value>
            The validation errors.
            </value>        
        </member>
        <member name="P:Serenity.Data.IEditableRow.PostHandler">
            <summary>
            Gets or sets the post handler.
            </summary>
            <value>
            The post handler.
            </value>
        </member>
        <member name="T:Serenity.Data.IRow">
            <summary>
            Row interface
            </summary>
            <seealso cref="T:Serenity.Data.IEntityWithJoins" />
        </member>
        <member name="M:Serenity.Data.IRow.CreateNew">
            <summary>
            Creates a new instance of the row type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.IRow.CloneRow">
            <summary>
            Clones the row.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.IRow.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="M:Serenity.Data.IRow.FieldAssignedValue(Serenity.Data.Field)">
            <summary>
            Called when field is assigned a value.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Serenity.Data.IRow.GetDictionaryData(System.Object)">
            <summary>
            Gets the dictionary data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.IRow.GetDictionaryDataKeys">
            <summary>
            Gets the dictionary data keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.IRow.SetDictionaryData(System.Object,System.Object)">
            <summary>
            Sets the dictionary data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.IRow.GetIndexedData(System.Int32)">
            <summary>
            Gets the indexed data.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.IRow.SetIndexedData(System.Int32,System.Object)">
            <summary>
            Sets the indexed data.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.Data.IRow.TrackAssignments">
            <summary>
            Gets or sets a value indicating whether to track assignments to field values.
            </summary>
            <value>
              <c>true</c> if assignments are tracked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.IRow.TrackWithChecks">
            <summary>
            Gets or sets a value indicating whether track assignments to field values,
            and raise an exception if an unassigned field is tried to read.
            </summary>
            <value>
              <c>true</c> if track with checks; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.IRow.IgnoreConstraints">
            <summary>
            Gets or sets a value indicating whether [ignore constraints].
            </summary>
            <value>
              <c>true</c> if [ignore constraints]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.IRow.IsAnyFieldAssigned">
            <summary>
            Gets a value indicating whether this row instance has any field assigned.
            </summary>
            <value>
              <c>true</c> if this instance has any field assigned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Data.IRow.IsAssigned(Serenity.Data.Field)">
            <summary>
            Determines whether the specified field is assigned.
            </summary>
            <param name="field">The field.</param>
            <returns>
              <c>true</c> if the specified field is assigned; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.Data.IRow.ClearAssignment(Serenity.Data.Field)">
            <summary>
            Clears the assignment.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:Serenity.Data.IRow.IdField">
            <summary>
            Gets the identifier field.
            </summary>
            <value>
            The identifier field.
            </value>
        </member>
        <member name="P:Serenity.Data.IRow.NameField">
            <summary>
            Gets the name field.
            </summary>
            <value>
            The name field.
            </value>
        </member>
        <member name="P:Serenity.Data.IRow.Item(System.String)">
            <summary>
            Gets or sets a field value with specified name
            </summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="T:Serenity.Data.IRow`1">
            <summary>
            Base interface for Rows with a known Fields type
            </summary>
            <typeparam name="TFields">The type of the fields.</typeparam>
            <seealso cref="T:Serenity.Data.IEntityWithJoins" />
        </member>
        <member name="M:Serenity.Data.IRow`1.CreateNew">
            <summary>
            Creates a new instance of the row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.IRow`1.CloneRow">
            <summary>
            Clones the row.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.IRow`1.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="T:Serenity.Data.IRowFieldsProvider">
            <summary>
            Abstraction for row fields instance providers
            </summary>
        </member>
        <member name="M:Serenity.Data.IRowFieldsProvider.Resolve(System.Type)">
            <summary>
            Resolves the specified fields type.
            </summary>
            <param name="fieldsType">Type of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.IRowFieldsProvider.ResolveWithAlias(System.Type,System.String)">
            <summary>
            Resolves the with alias.
            </summary>
            <param name="fieldsType">Type of the fields.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.IRowTypeRegistry">
            <summary>
            Abstraction for row type registry.
            </summary>
        </member>
        <member name="P:Serenity.Data.IRowTypeRegistry.AllRowTypes">
            <summary>
            Gets all row types.
            </summary>
            <value>
            All row types.
            </value>
        </member>
        <member name="M:Serenity.Data.IRowTypeRegistry.ByConnectionKey(System.String)">
            <summary>
            Returns row types by the connection key.
            </summary>
            <param name="connectionKey">The connection key.</param>
            <returns>Row types by the connection key</returns>
        </member>
        <member name="T:Serenity.Data.JsonRowConverter">
            <summary>
              Serialize/deserialize a row</summary>
        </member>
        <member name="F:Serenity.Data.JsonRowConverter.ShouldSerializeExtension">
            <summary>
            Should serialize extension
            </summary>
        </member>
        <member name="F:Serenity.Data.JsonRowConverter.ShouldDeserializeExtension">
            <summary>
            Should deserialize extension
            </summary>
        </member>
        <member name="M:Serenity.Data.JsonRowConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Writes the JSON representation of the object.</summary>
            <param name="writer">
              The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">
              The value.</param>
            <param name="serializer">
              The calling serializer.</param>
        </member>
        <member name="M:Serenity.Data.JsonRowConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">
              Type of the object.</param>
            <param name="existingValue">
              The existing value of object being read.</param>
            <param name="serializer">
              The calling serializer.</param>
            <returns>
              The object value.</returns>
        </member>
        <member name="M:Serenity.Data.JsonRowConverter.CanConvert(System.Type)">
            <summary>
              Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">
              Type of the object.</param>
            <returns>
              True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="P:Serenity.Data.JsonRowConverter.CanRead">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="P:Serenity.Data.JsonRowConverter.CanWrite">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="T:Serenity.Data.Row`1">
            <summary>
            Base class for Serenity entities
            </summary>
            <typeparam name="TFields">The type of the fields.</typeparam>
            <seealso cref="T:Serenity.Data.IRow" />
            <seealso cref="T:Serenity.Data.IRow`1" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:System.ComponentModel.IEditableObject" />
        </member>
        <member name="F:Serenity.Data.Row`1.fields">
            <summary>
            The fields
            </summary>
        </member>
        <member name="M:Serenity.Data.Row`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Row`1"/> class.
            </summary>
        </member>
        <member name="M:Serenity.Data.Row`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Row`1"/> class.
            </summary>
            <param name="fields">The fields.</param>
            <exception cref="T:System.ArgumentNullException">fields</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">fields</exception>
        </member>
        <member name="M:Serenity.Data.Row`1.GetFields">
            <summary>
            Gets the fields.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.Row`1.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="M:Serenity.Data.Row`1.CloneInto(Serenity.Data.Row{`0},System.Boolean)">
            <summary>
            Clones the row into target.
            </summary>
            <param name="clone">The clone.</param>
            <param name="cloneHandlers">if set to <c>true</c> [clone handlers].</param>
        </member>
        <member name="M:Serenity.Data.Row`1.CloneRow">
            <summary>
            Clones the row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Row`1.CreateNew">
            <summary>
            Creates the new.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Serenity.Data.Row`1.FindField(System.String)">
            <summary>
            Finds the field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Row`1.FindFieldByPropertyName(System.String)">
            <summary>
            Finds the name of the field by property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.Row`1.Serenity#Data#IRow#IsAnyFieldAssigned">
            <summary>
            Gets a value indicating whether this instance is any field assigned.
            </summary>
            <value>
              <c>true</c> if this instance is any field assigned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Row`1.Serenity#Data#IEntity#Table">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:Serenity.Data.Row`1.Serenity#Data#IRow#TrackAssignments">
            <summary>
            Gets or sets a value indicating whether [track assignments].
            </summary>
            <value>
              <c>true</c> if [track assignments]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Row`1.Serenity#Data#IRow#TrackWithChecks">
            <summary>
            Gets or sets a value indicating whether [track with checks].
            </summary>
            <value>
              <c>true</c> if [track with checks]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Row`1.Serenity#Data#IRow#Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified field name.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Row`1.Serenity#Data#IRow#SetDictionaryData(System.Object,System.Object)">
            <summary>
            Sets the dictionary data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.Row`1.Serenity#Data#IRow#GetDictionaryDataKeys">
            <summary>
            Gets the dictionary data keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Row`1.Serenity#Data#IRow#GetDictionaryData(System.Object)">
            <summary>
            Gets the dictionary data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Row`1.IsAssigned(Serenity.Data.Field)">
            <summary>
            Determines whether the specified field is assigned.
            </summary>
            <param name="field">The field.</param>
            <returns>
              <c>true</c> if the specified field is assigned; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.Data.Row`1.ClearAssignment(Serenity.Data.Field)">
            <summary>
            Clears the assignment flag of the field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:Serenity.Data.Row`1.Serenity#Data#IRow#IdField">
            <summary>
            Gets the identifier field.
            </summary>
            <value>
            The identifier field.
            </value>
        </member>
        <member name="P:Serenity.Data.Row`1.Serenity#Data#IRow#NameField">
            <summary>
            Gets the name field.
            </summary>
            <value>
            The name field.
            </value>
        </member>
        <member name="M:Serenity.Data.Row`1.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Serenity.Data.Row`1.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> call.
            </summary>
        </member>
        <member name="M:Serenity.Data.Row`1.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> or <see cref="M:System.ComponentModel.IBindingList.AddNew" /> call into the underlying object.
            </summary>
            <exception cref="T:System.Exception">Please fix the marked fields on the row.</exception>
        </member>
        <member name="P:Serenity.Data.Row`1.Serenity#Data#IEditableRow#IsAnyFieldChanged">
            <summary>
            Gets a value indicating whether this instance is any field changed.
            </summary>
            <value>
              <c>true</c> if this instance is any field changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.Data.RowFieldsBase">
            <summary>
            Base class for row fields collection
            </summary>
            <seealso cref="T:System.Collections.ObjectModel.Collection`1" />
            <seealso cref="T:Serenity.Data.IAlias" />
            <seealso cref="T:Serenity.Data.IHaveJoins" />
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.RowFieldsBase"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="fieldPrefix">The field prefix.</param>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.CreateGeneratedFields">
            <summary>
            Should be only used by row source generator to create field objects it generated
            </summary>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.ParseDatabaseAndSchema(System.String,System.String@,System.String@)">
            <summary>
            Parses the database and schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="database">The database.</param>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.AfterInitialize">
            <summary>
            Afters the initialize.
            </summary>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.Initialize(Serenity.Reflection.IAnnotatedType,Serenity.Data.ISqlDialect)">
            <summary>
            Initializes the specified annotations.
            </summary>
            <param name="annotations">The annotations.</param>
            <param name="dialect">The dialect.</param>
            <exception cref="T:System.ArgumentNullException">dialect</exception>
            <exception cref="T:System.InvalidProgramException">
            </exception>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.GetFieldsByAttribute``1">
            <summary>
            Gets the fields by attribute.
            </summary>
            <typeparam name="TAttr">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.GetFieldsByAttribute(System.Type)">
            <summary>
            Gets the fields by attribute.
            </summary>
            <param name="attrType">Type of the attribute.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.TableName">
            <summary>
            Gets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.Database">
            <summary>
            Gets the database.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.Schema">
            <summary>
            Gets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.TableOnly">
            <summary>
            Gets the table only.
            </summary>
            <value>
            The table only.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.FieldPrefix">
            <summary>
            Gets or sets the field prefix.
            </summary>
            <value>
            The field prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.LocalTextPrefix">
            <summary>
            Gets or sets the local text prefix.
            </summary>
            <value>
            The local text prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.ModuleIdentifier">
            <summary>
            Gets the module identifier.
            </summary>
            <value>
            The module identifier.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.RowIdentifier">
            <summary>
            Gets the row identifier.
            </summary>
            <value>
            The row identifier.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.ConnectionKey">
            <summary>
            Gets the connection key.
            </summary>
            <value>
            The connection key.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.Dialect">
            <summary>
            Gets the dialect.
            </summary>
            <value>
            The dialect.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.GenerationKey">
            <summary>
            Gets or sets the generation key.
            </summary>
            <value>
            The generation key.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.IdField">
            <summary>
            Gets the identifier field.
            </summary>
            <value>
            The identifier field.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.NameField">
            <summary>
            Gets the name field.
            </summary>
            <value>
            The name field.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.PrimaryKeys">
            <summary>
            Gets the primary keys.
            </summary>
            <value>
            The primary keys.
            </value>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.SortOrders">
            <summary>
            Gets the sort orders.
            </summary>
            <value>
            The sort orders.
            </value>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.InsertItem(System.Int32,Serenity.Data.Field)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be <see langword="null" /> for reference types.</param>
            <exception cref="T:System.InvalidOperationException">field collection can't be modified!</exception>
            <exception cref="T:System.ArgumentNullException">item</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">item</exception>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.InvalidOperationException">field collection can't be modified!</exception>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.SetItem(System.Int32,Serenity.Data.Field)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be <see langword="null" /> for reference types.</param>
            <exception cref="T:System.InvalidOperationException">field collection can't be modified!</exception>
            <exception cref="T:System.ArgumentNullException">item</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">item</exception>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.FindField(System.String)">
            <summary>
            Finds the field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.FindFieldByPropertyName(System.String)">
            <summary>
            Finds the name of the field by property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.LockAlias">
            <summary>
            Locks the alias.
            </summary>
        </member>
        <member name="M:Serenity.Data.RowFieldsBase.ReplaceAliasWith(System.String)">
            <summary>
            Replaces the alias with.
            </summary>
            <param name="newAlias">The new alias.</param>
            <exception cref="T:System.ArgumentNullException">newAlias</exception>
            <exception cref="T:System.InvalidOperationException">Please use As() method to alias this fields object!</exception>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.Joins">
            <summary>
            List of all joins in entity
            </summary>
        </member>
        <member name="P:Serenity.Data.RowFieldsBase.AliasName">
            <summary>
            Gets the name of the alias.
            </summary>
            <value>
            The name of the alias.
            </value>
        </member>
        <member name="T:Serenity.Data.RowFieldsProvider">
            <summary>
            Contains extension methods and settings for row fields providers
            </summary>
        </member>
        <member name="P:Serenity.Data.RowFieldsProvider.Current">
            <summary>
            Gets current row fields provider. Returns async local provider if available,
            otherwise the default provider.
            </summary>
        </member>
        <member name="M:Serenity.Data.RowFieldsProvider.SetDefault(Serenity.Data.IRowFieldsProvider)">
            <summary>
            Sets default row fields provider. This instance is required
            as rows might have to be created in contexts where dependency injection
            is not possible, like deserialization. If using a DI container,
            set this at startup to the same singleton service you register with DI.
            </summary>
            <param name="provider">Provider. Required.</param>
            <returns>Old default provider</returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsProvider.SetDefaultFrom(System.IServiceProvider)">
            <summary>
            Sets default row fields provider by resolving it from the service provider.
            </summary>
            <param name="services">Services. Required.</param>
            <returns>Old default provider</returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsProvider.SetLocal(Serenity.Data.IRowFieldsProvider)">
            <summary>
            Sets local row fields provider for current thread and async context. 
            Useful for background tasks, async methods, and testing to set provider locally and for 
            auto spawned threads.
            </summary>
            <param name="provider">Row fields provider. Can be null.</param>
            <returns>Old local provider if any.</returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsProvider.SetLocalFrom(System.IServiceProvider)">
            <summary>
            Sets local row fields provider by resolving it from the service provider.
            </summary>
            <param name="services">Services. Required.</param>
            <returns>Old default provider</returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsProvider.Resolve``1">
            <summary>
            Resolves a fields class using current row fields provider
            </summary>
            <typeparam name="TFields">The type of the fields.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.RowFieldsProvider.Resolve``1(System.String)">
            <summary>
            Resolves an aliased fields class using current row fields provider
            </summary>
            <typeparam name="TFields">The type of the fields.</typeparam>
            <param name="alias">Alias for fields</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">alias</exception>
        </member>
        <member name="T:Serenity.Localization.EntityLocalTexts">
            <summary>
            EntityLocalTexts
            </summary>
        </member>
        <member name="M:Serenity.Localization.EntityLocalTexts.AddRowTexts(Serenity.Abstractions.ILocalTextRegistry,System.Collections.Generic.IEnumerable{Serenity.Data.IRow},System.String)">
            <summary>
            Adds the row texts.
            </summary>
            <param name="registry">The registry.</param>
            <param name="rowInstances">The row instances.</param>
            <param name="languageID">The language identifier.</param>
            <exception cref="T:System.ArgumentNullException">
            registry
            or
            rowInstances
            </exception>
        </member>
        <member name="T:Serenity.Extensions.DependencyInjection.EntityServiceCollectionExtensions">
            <summary>
            Contains extensions to register entity services
            </summary>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.EntityServiceCollectionExtensions.AddEntities(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the annotation types, sql connections, default row type registry and
            row fields provider. 
            Warning: This method sets the singleton row fields provider as
            the default by calling RowFieldsProvider.SetDefault on creation.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="T:Serenity.PropertyGrid.BasicPropertyProcessor">
            <summary>
            Basic property processor
            </summary>
        </member>
        <member name="M:Serenity.PropertyGrid.BasicPropertyProcessor.Process(Serenity.PropertyGrid.IPropertySource,Serenity.ComponentModel.PropertyItem)">
            <summary>
            Sets properties of a PropertyItem by analysing a property source
            </summary>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:Serenity.PropertyGrid.BasicPropertyProcessor.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="T:Serenity.PropertyGrid.DefaultPropertyItemProvider">
            <summary>
            Default property item provider
            </summary>
            <seealso cref="T:Serenity.PropertyGrid.IPropertyItemProvider" />
        </member>
        <member name="M:Serenity.PropertyGrid.DefaultPropertyItemProvider.#ctor(System.IServiceProvider,Serenity.Abstractions.ITypeSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.PropertyGrid.DefaultPropertyItemProvider"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="typeSource">The type source.</param>
            <exception cref="T:System.ArgumentNullException">
            provider or typeSource is null
            </exception>
        </member>
        <member name="M:Serenity.PropertyGrid.DefaultPropertyItemProvider.GetPropertyItemsFor(System.Type,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="type">The type.</param>
            <param name="predicate"><inheritdoc/></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">type is null</exception>
            <exception cref="T:System.InvalidProgramException">CheckNames is true and there is name mismatch</exception>
        </member>
        <member name="T:Serenity.PropertyGrid.IPropertyItemProvider">
            <summary>
            Abstraction for the provider that returns a list of property items for a given type
            </summary>
        </member>
        <member name="M:Serenity.PropertyGrid.IPropertyItemProvider.GetPropertyItemsFor(System.Type,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Gets the property items for specified type
            </summary>
            <param name="type">The type.</param>
            <param name="predicate">Optional predicate that should return true for items to be processed</param>
        </member>
        <member name="T:Serenity.PropertyGrid.IPropertyProcessor">
            <summary>
            Interface for property processors, which sets properties of a PropertyItem
            object by analysing a IPropertySource object.
            </summary>
        </member>
        <member name="M:Serenity.PropertyGrid.IPropertyProcessor.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Serenity.PropertyGrid.IPropertyProcessor.Process(Serenity.PropertyGrid.IPropertySource,Serenity.ComponentModel.PropertyItem)">
            <summary>
            Sets properties of a PropertyItem by analysing a property source
            </summary>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Serenity.PropertyGrid.IPropertyProcessor.PostProcess">
            <summary>
            Called after process in a secondary pass.
            </summary>
        </member>
        <member name="P:Serenity.PropertyGrid.IPropertyProcessor.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.IPropertyProcessor.Type">
            <summary>
            Gets or sets the type property processor is working on.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.IPropertyProcessor.BasedOnRow">
            <summary>
            Gets or sets the based on row.
            </summary>
            <value>
            The based on row.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.IPropertyProcessor.Priority">
            <summary>
            Gets the priority. The processors are called based
            on this priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="T:Serenity.PropertyGrid.IPropertySource">
            <summary>
            Abstracts the property source that returns PropertyInfo and some other info
            </summary>
        </member>
        <member name="P:Serenity.PropertyGrid.IPropertySource.Property">
            <summary>
            Gets the property.
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.IPropertySource.BasedOnField">
            <summary>
            Gets the based on field.
            </summary>
            <value>
            The based on field.
            </value>
        </member>
        <member name="M:Serenity.PropertyGrid.IPropertySource.GetAttribute``1">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttr">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Serenity.PropertyGrid.IPropertySource.GetAttributes``1">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="TAttr">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Serenity.PropertyGrid.IPropertySource.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.IPropertySource.EnumType">
            <summary>
            Gets the type of the enum.
            </summary>
            <value>
            The type of the enum.
            </value>
        </member>
        <member name="T:Serenity.PropertyGrid.PropertyInfoSource">
            <summary>
            Property info source for a reflection PropertyInfo object
            </summary>
            <seealso cref="T:Serenity.PropertyGrid.IPropertySource" />
        </member>
        <member name="M:Serenity.PropertyGrid.PropertyInfoSource.#ctor(System.Reflection.PropertyInfo,Serenity.Data.IRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.PropertyGrid.PropertyInfoSource"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="basedOnRow">The based on row.</param>
            <exception cref="T:System.ArgumentNullException">property</exception>
        </member>
        <member name="M:Serenity.PropertyGrid.PropertyInfoSource.GetAttribute``1">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Serenity.PropertyGrid.PropertyInfoSource.GetAttributes``1">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyInfoSource.Property">
            <summary>
            Gets the property.
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyInfoSource.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyInfoSource.EnumType">
            <summary>
            Gets the type of the enum.
            </summary>
            <value>
            The type of the enum.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyInfoSource.BasedOnRow">
            <summary>
            Gets the based on row.
            </summary>
            <value>
            The based on row.
            </value>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyInfoSource.BasedOnField">
            <summary>
            Gets the based on field.
            </summary>
            <value>
            The based on field.
            </value>
        </member>
        <member name="T:Serenity.PropertyGrid.PropertyProcessor">
            <summary>
            Base class for property processors, which sets properties of a PropertyItem
            object by analysing a IPropertySource object.
            </summary>
            <seealso cref="T:Serenity.PropertyGrid.IPropertyProcessor" />
        </member>
        <member name="M:Serenity.PropertyGrid.PropertyProcessor.Process(Serenity.PropertyGrid.IPropertySource,Serenity.ComponentModel.PropertyItem)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.PropertyGrid.PropertyProcessor.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.PropertyGrid.PropertyProcessor.PostProcess">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyProcessor.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyProcessor.Type">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyProcessor.BasedOnRow">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.PropertyGrid.PropertyProcessor.Items">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.RowValidationContext">
            <summary>
            A validation context for rows
            </summary>
            <seealso cref="T:Serenity.IValidationContext" />
        </member>
        <member name="M:Serenity.Services.RowValidationContext.#ctor(System.Data.IDbConnection,Serenity.Data.IRow,Serenity.ITextLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Services.RowValidationContext"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="row">The row.</param>
            <param name="localizer">The localizer.</param>
        </member>
        <member name="M:Serenity.Services.RowValidationContext.GetFieldValue(System.String)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Services.RowValidationContext.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="P:Serenity.Services.RowValidationContext.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Serenity.Services.RowValidationContext.Localizer">
            <summary>
            Localizer
            </summary>
        </member>
    </members>
</doc>
