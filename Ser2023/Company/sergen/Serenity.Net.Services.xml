<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serenity.Net.Services</name>
    </assembly>
    <members>
        <member name="T:Serenity.Services.JsonServiceClient">
            <summary>
            A JSON service client implementation
            </summary>
        </member>
        <member name="F:Serenity.Services.JsonServiceClient.cookies">
            <summary>
            Cookie container
            </summary>
        </member>
        <member name="M:Serenity.Services.JsonServiceClient.#ctor(System.String)">
            <summary>
            Creates an instance of JsonServiceClient for the passed baseUrl
            </summary>
            <param name="baseUrl">The base url</param>
        </member>
        <member name="P:Serenity.Services.JsonServiceClient.BaseUrl">
            <summary>
            Base url for the client
            </summary>
        </member>
        <member name="M:Serenity.Services.JsonServiceClient.Post``1(System.String,System.Object)">
            <summary>
            Post to JSON service
            </summary>
            <typeparam name="TResponse">The type of response expected</typeparam>
            <param name="relativeUrl">Relative url</param>
            <param name="request">Request object</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.JsonServiceClient.InternalPost``1(System.String,System.Object)">
            <summary>
            Posts to a JSON service, internal version
            </summary>
            <typeparam name="TResponse">Response type</typeparam>
            <param name="relativeUrl">Relative url</param>
            <param name="request">The request object</param>
            <returns>The response</returns>
            <exception cref="T:Serenity.Services.ValidationError">Throws a validation error exception
            if the returned response contains a service error.</exception>
        </member>
        <member name="T:Serenity.Services.JsonSortByConverter">
            <summary>
              Serialize/deserialize a SortBy object as string</summary>
        </member>
        <member name="M:Serenity.Services.JsonSortByConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Writes the JSON representation of the object.</summary>
            <param name="writer">
              The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">
              The value.</param>
            <param name="serializer">
              The calling serializer.</param>
        </member>
        <member name="M:Serenity.Services.JsonSortByConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">
              Type of the object.</param>
            <param name="existingValue">
              The existing value of object being read.</param>
            <param name="serializer">
              The calling serializer.</param>
            <returns>
              The object value.</returns>
        </member>
        <member name="M:Serenity.Services.JsonSortByConverter.CanConvert(System.Type)">
            <summary>
              Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">
              Type of the object.</param>
            <returns>
              True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="P:Serenity.Services.JsonSortByConverter.CanRead">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="P:Serenity.Services.JsonSortByConverter.CanWrite">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="T:Serenity.Services.DeleteRequest">
            <summary>
            Service object for delete requests
            </summary>
        </member>
        <member name="F:Serenity.Services.DeleteRequest.EntityId">
            <summary>
            The ID of the entity to delete.
            </summary>
        </member>
        <member name="T:Serenity.Services.DeleteResponse">
            <summary>
            The response object returned from a delete service
            </summary>
        </member>
        <member name="F:Serenity.Services.DeleteResponse.WasAlreadyDeleted">
            <summary>
            True if the entity was already deleted.
            Not all services support this. Only soft delete
            services may return this information, while 
            others may raise a record not found exception.
            </summary>
        </member>
        <member name="T:Serenity.Services.IIncludeExcludeColumns">
            <summary>
            Abstraction for service objects containing
            include / exclude column sets. 
            See <see cref="T:Serenity.Services.ListRequest"/> and <see cref="T:Serenity.Services.RetrieveRequest"/>.
            </summary>
        </member>
        <member name="P:Serenity.Services.IIncludeExcludeColumns.IncludeColumns">
            <summary>
            Set of include columns. These columns are supposed
            to be additionally selected.
            </summary>
        </member>
        <member name="P:Serenity.Services.IIncludeExcludeColumns.ExcludeColumns">
            <summary>
            Set of exclude columns. These columns should not be
            selected even if they are selected by default by 
            the select level.
            </summary>
        </member>
        <member name="T:Serenity.Services.IListResponse">
            <summary>
            The interface for list response. This is used to easily access 
            list response members as the <see cref="T:Serenity.Services.ListResponse`1"/>
            class itself is generic.
            </summary>
        </member>
        <member name="P:Serenity.Services.IListResponse.Entities">
            <summary>
            List of entities
            </summary>
        </member>
        <member name="P:Serenity.Services.IListResponse.TotalCount">
            <summary>
            Total count of the records. This may be different
            than the number of returned records when paging is active, 
            e.g. when Skip/Take parameters are assigned.
            </summary>
        </member>
        <member name="P:Serenity.Services.IListResponse.Skip">
            <summary>
            Number of records skipped, passed from the ListRequest
            </summary>
        </member>
        <member name="P:Serenity.Services.IListResponse.Take">
            <summary>
            Number of records taken, passed from the ListRequest
            </summary>
        </member>
        <member name="T:Serenity.Services.IRetrieveResponse">
            <summary>
            Interface for a <see cref="T:Serenity.Services.RetrieveResponse`1"/>.
            As the RetrieveResponse itself is generic, this allows easier
            access to its members.
            </summary>
        </member>
        <member name="P:Serenity.Services.IRetrieveResponse.Entity">
            <summary>
            The entity
            </summary>
        </member>
        <member name="P:Serenity.Services.IRetrieveResponse.Localizations">
            <summary>
            Dictionary containing localizations if requested.
            </summary>
        </member>
        <member name="T:Serenity.Services.ISaveRequest">
            <summary>
            Interface for a <see cref="T:Serenity.Services.SaveRequest`1"/>. 
            As the SaveRequest itself is generic, this allows
            easier access to its members.
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequest.EntityId">
            <summary>
            The entity ID to update, should only be
            passed for Update requests.
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequest.Entity">
            <summary>
            Entity to insert / update
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequest.Localizations">
            <summary>
            Dictionary of translations if required.
            </summary>
        </member>
        <member name="T:Serenity.Services.ListRequest">
            <summary>
            The request model for a List service.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.Skip">
            <summary>
            Number of records to skip
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.Take">
            <summary>
            Number of records to take
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.Sort">
            <summary>
            Columns to sort returned records by
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.ContainsText">
            <summary>
            The text to search in columns with the 
            <see cref="T:Serenity.Data.Mapping.QuickSearchAttribute"/>.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.ContainsField">
            <summary>
            If specified, the text is only searched in this 
            column. The column should still have a
            <see cref="T:Serenity.Data.Mapping.QuickSearchAttribute"/>.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.Criteria">
            <summary>
            The where criteria for the query. This is passed
            as an array of arrays in the JSON.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.IncludeDeleted">
            <summary>
            Include the deleted records. Default is false.
            This is only supported by services and entities
            that implement soft delete, e.g. IsActive etc.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.ExcludeTotalCount">
            <summary>
            Exclude the total count from the result. Set this to true
            if you don't need the total number of records when Skip / Take
            parameters are passed. Otherwise, a second query will be
            required to get number of total records.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.EqualityFilter">
            <summary>
            A dictionary of field name / value pairs used to 
            filter those fields by the passed value. 
            Please note that "NULL" values are ignored, so you can't
            filter a field with a NULL value.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.ColumnSelection">
            <summary>
            Group of columns to select. This is ColumnSelection.List,
            e.g. only the table fields, not view fields by default.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.IncludeColumns">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.ListRequest.ExcludeColumns">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.ListRequest.DistinctFields">
            <summary>
            Distinct set of columns. If set a DISTINCT query
            is used, and only these columns can be returned
            from the query.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequest.ExportColumns">
            <summary>
            Gets or sets the set of columns to export. 
            This should only be used to specify list of columns
            for contexts like Excel export etc.
            </summary>
        </member>
        <member name="T:Serenity.Services.ListResponse`1">
            <summary>
            The response model for a list service.
            </summary>
            <typeparam name="T">Type of the returned entities.</typeparam>
        </member>
        <member name="P:Serenity.Services.ListResponse`1.Entities">
            <summary>
            Entities
            </summary>
        </member>
        <member name="P:Serenity.Services.ListResponse`1.Values">
            <summary>
            List of distinct values, if DistinctFields are passed
            in the list request. Each element of the list is
            an array of distinct values if multiple distinct fields
            are requested.
            </summary>
        </member>
        <member name="P:Serenity.Services.ListResponse`1.TotalCount">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.ListResponse`1.Skip">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.ListResponse`1.Take">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.RetrieveColumnSelection">
            <summary>
            The group of columns to retrieve
            </summary>
        </member>
        <member name="F:Serenity.Services.RetrieveColumnSelection.Details">
            <summary>
            Details, e.g. all the fields
            </summary>
        </member>
        <member name="F:Serenity.Services.RetrieveColumnSelection.KeyOnly">
            <summary>
            Key Only, e.g. the primary key(s) and ID of the table
            </summary>
        </member>
        <member name="F:Serenity.Services.RetrieveColumnSelection.List">
            <summary>
            List, e.g. only the table columns
            </summary>
        </member>
        <member name="F:Serenity.Services.RetrieveColumnSelection.None">
            <summary>
            None, don't select any property by default
            </summary>
        </member>
        <member name="F:Serenity.Services.RetrieveColumnSelection.IdOnly">
            <summary>
            Only select Id property by default
            </summary>
        </member>
        <member name="F:Serenity.Services.RetrieveColumnSelection.Lookup">
            <summary>
            Lookup, e.g. ID, Name and fields with LookupInclude attribute
            </summary>
        </member>
        <member name="T:Serenity.Services.RetrieveLocalizationRequest">
            <summary>
            A retrieve request with localization. Don't use. 
            Provided only for compatibility.
            </summary>
        </member>
        <member name="T:Serenity.Services.RetrieveLocalizationResponse`1">
            <summary>
            The service model for a localization retrieve response
            </summary>
            <typeparam name="TEntity">Type of the entities</typeparam>
        </member>
        <member name="P:Serenity.Services.RetrieveLocalizationResponse`1.Entities">
            <summary>
            The dictionary that contains languageID, localized entity
            pairs containing translations.
            </summary>
        </member>
        <member name="T:Serenity.Services.RetrieveRequest">
            <summary>
            The request model for a Retrieve service
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequest.EntityId">
            <summary>
            The entity ID to retrieve
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequest.ColumnSelection">
            <summary>
            The group of columns to select. This is 
            RetrieveColumnSelection.Details by default, e.g.
            all the table / view columns, but not unmapped or
            complex object style (list etc.) columns.
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequest.IncludeColumns">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.RetrieveRequest.ExcludeColumns">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.RetrieveResponse`1">
            <summary>
            The service response model for a Retrieve service
            </summary>
            <typeparam name="T">Type of the entity</typeparam>
        </member>
        <member name="P:Serenity.Services.RetrieveResponse`1.Entity">
            <summary>
            The returned entity
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveResponse`1.Localizations">
            <summary>
            Dictionary containing localizations if requested.
            </summary>
        </member>
        <member name="T:Serenity.Services.SaveRequest`1">
            <summary>
            The service model for a Save (Create / Update) service.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Serenity.Services.SaveRequest`1.EntityId">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.SaveRequest`1.Entity">
            <summary>
            The entity containing only the fields that should
            be inserted / updated. Partial patch is only possible
            with Row types as only it provides assignment information
            from the originating JSON.
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequest`1.Localizations">
            <summary>
            The set of localizations if translations are requested to 
            be updated.
            </summary>
        </member>
        <member name="T:Serenity.Services.SaveWithLocalizationRequest`1">
            <summary>
            A save request with localization. Don't use.
            Provided only for compatibility.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
        </member>
        <member name="T:Serenity.Services.SaveResponse">
            <summary>
            The response model for a Save service
            </summary>
        </member>
        <member name="F:Serenity.Services.SaveResponse.EntityId">
            <summary>
            The entity ID of the created / updated entity.
            </summary>
        </member>
        <member name="T:Serenity.Services.ServiceError">
            <summary>
            The error object model returned from a service
            </summary>
        </member>
        <member name="P:Serenity.Services.ServiceError.Code">
            <summary>
            Error code if any
            </summary>
        </member>
        <member name="P:Serenity.Services.ServiceError.Arguments">
            <summary>
            Custom arguments info for the error. In some cases, 
            this might be the field name the error is related to.
            </summary>
        </member>
        <member name="P:Serenity.Services.ServiceError.Message">
            <summary>
            The error message. In non-development mode the message 
            might be something generic like "some error occured" if the
            error itself is not a <see cref="T:Serenity.Services.ValidationError"/>.
            The detailed error can be seen in exception log.
            </summary>
        </member>
        <member name="P:Serenity.Services.ServiceError.Details">
            <summary>
            Error details, like stack trace etc. Normally, 
            this is only returned in development mode.
            </summary>
        </member>
        <member name="P:Serenity.Services.ServiceError.ErrorId">
            <summary>
            When provided, this might be the related error ID 
            stored in the exception log.
            </summary>
        </member>
        <member name="T:Serenity.Services.ServiceRequest">
            <summary>
            The base request object model for all service requests.
            Your custom request objects should all derive from this type.
            </summary>
        </member>
        <member name="P:Serenity.Services.ServiceRequest.CustomData">
            <summary>
            A custom data dictionary. Please consider subclassing the service request
            before passing data via this property. This should be only used in limited 
            cases where subclassing is not feasible.
            Another option could be to add a [JsonExtensionData] but that could open
            way to the side effect ignoring typos.
            </summary>
        </member>
        <member name="T:Serenity.Services.ServiceResponse">
            <summary>
            The base service response object model for all service response
            types. Your custom response objects should derive from this class.
            </summary>
        </member>
        <member name="P:Serenity.Services.ServiceResponse.Error">
            <summary>
            The error returned if any.
            </summary>
        </member>
        <member name="P:Serenity.Services.ServiceResponse.CustomData">
            <summary>
            A custom data dictionary. Please consider subclassing the service response
            before passing data via this property. This should be only used in limited 
            cases where subclassing is not feasible.
            Another option could be to add a [JsonExtensionData] but that could open
            way to the side effect ignoring typos.
            </summary>
        </member>
        <member name="T:Serenity.Services.SortBy">
            <summary>
            A sort column. In JSON this is deserialized from strings
            in the format "field" or "field desc"
            </summary>
        </member>
        <member name="M:Serenity.Services.SortBy.#ctor">
            <summary>
            Creates an empty SortBy object
            </summary>
        </member>
        <member name="M:Serenity.Services.SortBy.#ctor(System.String)">
            <summary>
            Creates a SortBy object for specified field name.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Serenity.Services.SortBy.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of the SortBy object containg the 
            specified field name, and descending flag.
            </summary>
            <param name="field"></param>
            <param name="descending"></param>
        </member>
        <member name="P:Serenity.Services.SortBy.Field">
            <summary>
            Gets/sets the field name
            </summary>
        </member>
        <member name="P:Serenity.Services.SortBy.Descending">
            <summary>
            Gets/sets the descending flag
            </summary>
        </member>
        <member name="T:Serenity.Services.UndeleteRequest">
            <summary>
            The request model for an undelete service
            </summary>
        </member>
        <member name="F:Serenity.Services.UndeleteRequest.EntityId">
            <summary>
            The entity ID to undelete
            </summary>
        </member>
        <member name="T:Serenity.Services.UndeleteResponse">
            <summary>
            The response model for an undelete service
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteResponse.WasNotDeleted">
            <summary>
            True if the entity was not deleted
            </summary>
        </member>
        <member name="T:Serenity.Services.BehaviorProviderExtensions">
            <summary>
            Extension methods for behavior provider
            </summary>
        </member>
        <member name="M:Serenity.Services.BehaviorProviderExtensions.Resolve``2(Serenity.Services.IBehaviorProvider,System.Type)">
            <summary>
            Resolves behaviors for handler, row and behavior type
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TBehavior">Behavior type</typeparam>
            <param name="provider">Provider</param>
            <param name="handlerType">Handler type</param>
            <returns>Behavior</returns>
        </member>
        <member name="T:Serenity.Services.DefaultBehaviorFactory">
            <summary>
            Default <see cref="T:Serenity.Services.IBehaviorFactory"/> implementation
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultBehaviorFactory.#ctor(System.IServiceProvider)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="provider">Service provider which will be
            used to resolve the services that behavior classes might require</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Serenity.Services.DefaultBehaviorFactory.CreateInstance(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.DefaultBehaviorProvider">
            <summary>
            Default implementation for <see cref="T:Serenity.Services.IBehaviorProvider"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultBehaviorProvider.#ctor(Serenity.Services.IImplicitBehaviorRegistry,Serenity.Services.IBehaviorFactory)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="implicitBehaviors">Registry for implict behaviors.</param>
            <param name="behaviorFactory">Behavior factory</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Serenity.Services.DefaultBehaviorProvider.Resolve(System.Type,System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.DefaultImplicitBehaviorRegistry">
            <summary>
            Default implementation for the <see cref="T:Serenity.Services.IImplicitBehaviorRegistry"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultImplicitBehaviorRegistry.#ctor(Serenity.Abstractions.ITypeSource)">
            <summary>
            Creates a new instance
            </summary>
            <param name="typeSource">The type source to extract <see cref="T:Serenity.Services.IImplicitBehavior"/> types from</param>
        </member>
        <member name="M:Serenity.Services.DefaultImplicitBehaviorRegistry.GetTypes">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.IBehaviorFactory">
            <summary>
            Behavior factory abstraction
            </summary>
        </member>
        <member name="M:Serenity.Services.IBehaviorFactory.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the behavior type
            </summary>
            <param name="behaviorType">The behavior type</param>
        </member>
        <member name="T:Serenity.Services.IBehaviorProvider">
            <summary>
            Interface abstraction for behavior provider which resolves
            list of behavior instances of a specified type, like <see cref="T:Serenity.Services.ISaveBehavior"/> etc.
            </summary>
        </member>
        <member name="M:Serenity.Services.IBehaviorProvider.Resolve(System.Type,System.Type,System.Type)">
            <summary>
            Resolves a list of behavior instances targeted for a handler, row and behaivor type.
            </summary>
            <param name="handlerType">The handler type requesting list of behaviors</param>
            <param name="rowType">Target row type</param>
            <param name="behaviorType">Type of the behaviors</param>
        </member>
        <member name="T:Serenity.Services.IFieldBehavior">
            <summary>
            Represents a request handler behavior that is targeted to a field.
            </summary>
        </member>
        <member name="P:Serenity.Services.IFieldBehavior.Target">
            <summary>
            Gets / sets the target field that current behavior should operate on
            </summary>
        </member>
        <member name="T:Serenity.Services.IImplicitBehavior">
            <summary>
            An implicit behavior is a request handler behavior (save/list/retrieve/delete etc.)
            which can be implicitly activated for a row type without explicitly attached 
            to that row type.
            </summary>
        </member>
        <member name="M:Serenity.Services.IImplicitBehavior.ActivateFor(Serenity.Data.IRow)">
            <summary>
            Returns true if this behavior should be used for the target row type.
            </summary>
            <param name="row">The target row type.</param>
        </member>
        <member name="T:Serenity.Services.IImplicitBehaviorRegistry">
            <summary>
            An interface to query list of implicit behaviors registered through the dependency resolver.
            Implicit behaviors are automatically activated behaviors by querying via their ActivateFor 
            method. See <see cref="T:Serenity.Services.IImplicitBehavior"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.IImplicitBehaviorRegistry.GetTypes">
            <summary>
            Gets type list of implict behavior (<see cref="T:Serenity.Services.IImplicitBehavior"/>) types 
            </summary>
        </member>
        <member name="T:Serenity.Services.BaseDeleteBehavior">
            <summary>
            Base class for types implementing <see cref="T:Serenity.Services.IDeleteBehavior"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.BaseDeleteBehavior.OnPrepareQuery(Serenity.Services.IDeleteRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseDeleteBehavior.OnValidateRequest(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseDeleteBehavior.OnBeforeDelete(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseDeleteBehavior.OnAfterDelete(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseDeleteBehavior.OnAudit(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseDeleteBehavior.OnReturn(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseDeleteBehavior.OnException(Serenity.Services.IDeleteRequestHandler,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.DeleteRequestHandler`3">
            <summary>
            Generic base class for delete request handlers
            </summary>
            <typeparam name="TRow">Entity type</typeparam>
            <typeparam name="TDeleteRequest">Delete request type</typeparam>
            <typeparam name="TDeleteResponse">Delete response type</typeparam>
        </member>
        <member name="F:Serenity.Services.DeleteRequestHandler`3.behaviors">
            <summary>
            Lazy list of behaviors that is activated for this request
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="context">Request context</param>
            <exception cref="T:System.ArgumentNullException">Context is null</exception>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.GetBehaviors">
            <summary>
            Gets the list of delete behaviors
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.Connection">
            <summary>
            Gets current connection from the unit of work
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.OnBeforeDelete">
            <summary>
            Method that is executed before the actual SQL delete operation.
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.GetDisplayOrderFilter">
            <summary>
            Gets the display order filter for current group, if the entity 
            implements <see cref="T:Serenity.Data.IDisplayOrderRow"/> interface
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.OnAfterDelete">
            <summary>
            Method that is executed after the actual SQL delete operation
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.ValidateRequest">
            <summary>
            Validates the parameters of the delete request.
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.PrepareQuery(Serenity.Data.SqlQuery)">
            <summary>
            Prepares the query used to select the existing record
            </summary>
            <param name="query">The query</param>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.LoadEntity">
            <summary>
            Loads the entity that is going to be deleted
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.InvokeDeleteAction(System.Action)">
            <summary>
            Invokes the passed delete action method
            </summary>
            <param name="action">Delete action method</param>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.ExecuteDelete">
            <summary>
            Executes the actual SQL delete operation
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.InvalidateCacheOnCommit">
            <summary>
            Attaches a cache invalidation call to to OnCommit 
            callback of the current unit of work. This would clear
            cached items related to this row type.
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.DoAudit">
            <summary>
            Performs auditing
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.OnReturn">
            <summary>
            The method that is called just before the response is returned.
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.ValidatePermissions">
            <summary>
            Validates the user permissions for delete operation
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.IsDeleted">
            <summary>
            Checks if the entity is already deleted
            </summary>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.Process(Serenity.Data.IUnitOfWork,`1)">
            <summary>
            Processes the delete request. This is the entry point for the handler.
            </summary>
            <param name="unitOfWork">Unit of work</param>
            <param name="request">Request</param>
            <exception cref="T:System.ArgumentNullException">unitofWork or request is null</exception>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`3.Delete(Serenity.Data.IUnitOfWork,`1)">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.Cache">
            <summary>
            Gets the two level cache from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.Context">
            <summary>
            Gets the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.Localizer">
            <summary>
            Gets localizer from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.Permissions">
            <summary>
            Gets permission service from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.User">
            <summary>
            Gets current user from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.UnitOfWork">
            <summary>
            Gets current unit of work
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.Row">
            <summary>
            The entity
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.Request">
            <summary>
            Request object
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.Response">
            <summary>
            Response object
            </summary>
        </member>
        <member name="P:Serenity.Services.DeleteRequestHandler`3.StateBag">
            <summary>
            A state bag for behaviors to preserve state among their methods.
            It will be cleared before each request, e.g. Process call.
            </summary>
        </member>
        <member name="T:Serenity.Services.DeleteRequestHandler`1">
            <summary>
            Base generic class for delete request handlers that use <see cref="T:Serenity.Services.DeleteRequest"/> as
            the request type, and <see cref="T:Serenity.Services.DeleteResponse"/> as the response type.
            </summary>
            <typeparam name="TRow">The entity type</typeparam>
        </member>
        <member name="M:Serenity.Services.DeleteRequestHandler`1.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="context">The request context</param>
        </member>
        <member name="T:Serenity.Services.IDeleteBehavior">
            <summary>
            A delete behavior that can be used as a mixin within a DeleteRequestHandler lifecycle
            </summary>
            <remarks>
            A behavior instance is always cached and reused across requests, so make 
            sure you don't store anything in private variables, and its operation 
            is thread-safe. If you need to pass some state between events, 
            use handler's StateBag.
            </remarks>
        </member>
        <member name="M:Serenity.Services.IDeleteBehavior.OnPrepareQuery(Serenity.Services.IDeleteRequestHandler,Serenity.Data.SqlQuery)">
            <summary>Called when query to load old entity is built</summary>
            <param name="handler">Calling save request handler</param>
            <param name="query">The query</param>
        </member>
        <member name="M:Serenity.Services.IDeleteBehavior.OnValidateRequest(Serenity.Services.IDeleteRequestHandler)">
            <summary>Called when delete request is validated</summary>
            <param name="handler">Calling delete request handler</param>
        </member>
        <member name="M:Serenity.Services.IDeleteBehavior.OnBeforeDelete(Serenity.Services.IDeleteRequestHandler)">
            <summary>Called just before row is inserted to / updated in database</summary>
            <param name="handler">Calling delete request handler</param>
        </member>
        <member name="M:Serenity.Services.IDeleteBehavior.OnAfterDelete(Serenity.Services.IDeleteRequestHandler)">
            <summary>Called after row is inserted to / updated in database</summary>
            <param name="handler">Calling delete request handler</param>
        </member>
        <member name="M:Serenity.Services.IDeleteBehavior.OnAudit(Serenity.Services.IDeleteRequestHandler)">
            <summary>Called after row is inserted to / updated and auditing should be performed</summary>
            <param name="handler">Calling delete request handler</param>
        </member>
        <member name="M:Serenity.Services.IDeleteBehavior.OnReturn(Serenity.Services.IDeleteRequestHandler)">
            <summary>Called before handler is returning the result</summary>
            <param name="handler">Calling delete request handler</param>
        </member>
        <member name="T:Serenity.Services.IDeleteExceptionBehavior">
            <summary>
            This is an extension for delete behaviors that should be called for exceptions 
            that occur during delete. It could be useful to preview the exception and
            raise another exception for FK / PK database errors etc.
            </summary>
        </member>
        <member name="M:Serenity.Services.IDeleteExceptionBehavior.OnException(Serenity.Services.IDeleteRequestHandler,System.Exception)">
            <summary>Called when an exception occurs during delete</summary>
            <param name="handler">Calling delete request handler</param>
            <param name="exception">Exception occurred</param>
        </member>
        <member name="T:Serenity.Services.IDeleteHandler`3">
            <summary>
            Interface for delete request handlers with custom delete request / response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TDeleteRequest">Delete request type</typeparam>
            <typeparam name="TDeleteResponse">Delete response type</typeparam>
        </member>
        <member name="M:Serenity.Services.IDeleteHandler`3.Delete(Serenity.Data.IUnitOfWork,`1)">
            <summary>
            Processes a delete request
            </summary>
            <param name="uow">Unit of work</param>
            <param name="request">The delete request</param>
        </member>
        <member name="T:Serenity.Services.IDeleteHandler`1">
            <summary>
            Interface for delete request handlers that use <see cref="T:Serenity.Services.DeleteRequest"/> as request,
            and <see cref="T:Serenity.Services.DeleteResponse"/> as response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
        </member>
        <member name="T:Serenity.Services.IDeleteRequestHandler">
            <summary>
            Represents a DeleteRequestHandler. Is used with DeleteBehavior objects.
            </summary>
        </member>
        <member name="P:Serenity.Services.IDeleteRequestHandler.Row">
            <summary>
            New row
            </summary>
        </member>
        <member name="P:Serenity.Services.IDeleteRequestHandler.Request">
            <summary>
            Delete request
            </summary>
        </member>
        <member name="P:Serenity.Services.IDeleteRequestHandler.Response">
            <summary>
            Delete response
            </summary>
        </member>
        <member name="P:Serenity.Services.IDeleteRequestHandler.StateBag">
            <summary>
            A state bag that can be used as storage within a request handler context
            </summary>
        </member>
        <member name="P:Serenity.Services.IDeleteRequestHandler.Connection">
            <summary>
            Current connection
            </summary>
        </member>
        <member name="P:Serenity.Services.IDeleteRequestHandler.UnitOfWork">
            <summary>
            Current transaction
            </summary>
        </member>
        <member name="P:Serenity.Services.IDeleteRequestHandler.Context">
            <summary>
            Current request context
            </summary>
        </member>
        <member name="T:Serenity.Services.IDeleteRequestProcessor">
            <summary>
            Abstraction for delete request handlers with a Process method.
            </summary>
        </member>
        <member name="M:Serenity.Services.IDeleteRequestProcessor.Process(Serenity.Data.IUnitOfWork,Serenity.Services.DeleteRequest)">
            <summary>
            Processes the <see cref="T:Serenity.Services.DeleteRequest"/> and returns a <see cref="T:Serenity.Services.DeleteResponse"/>
            </summary>
            <param name="uow">Unit of work</param>
            <param name="request">Delete request</param>
        </member>
        <member name="T:Serenity.Services.BaseRequestHandler">
            <summary>
            An abstract class that can be used as base for request handlers 
            that accept a <see cref="T:Serenity.Services.IRequestContext"/> instance.
            </summary>
        </member>
        <member name="M:Serenity.Services.BaseRequestHandler.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="context">Request context</param>
            <exception cref="T:System.ArgumentNullException">Context is null</exception>
        </member>
        <member name="P:Serenity.Services.BaseRequestHandler.Cache">
            <summary>
            Gets cache from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.BaseRequestHandler.Context">
            <summary>
            Gets the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.BaseRequestHandler.Localizer">
            <summary>
            Gets text localizer from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.BaseRequestHandler.Permissions">
            <summary>
            Gets permission service from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.BaseRequestHandler.User">
            <summary>
            Gets the user from the request context
            </summary>
        </member>
        <member name="T:Serenity.Services.DefaultHandlerActivator">
            <summary>
            Default implementation of the <see cref="T:Serenity.Services.IHandlerActivator"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerActivator.#ctor(System.IServiceProvider)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="provider">Service provider</param>
            <exception cref="T:System.ArgumentNullException">provider is null</exception>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerActivator.CreateInstance(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.DefaultHandlerAttribute">
            <summary>
            Specifies that the class this attribute attached to is the default handler (list, create, delete, update etc).
            and should be used by some behaviors like MasterDetailRelationBehavior instead of creating a generic handler.
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerAttribute.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="isDefault">True to specify this as default.
            Default is true.</param>
        </member>
        <member name="P:Serenity.Services.DefaultHandlerAttribute.Value">
            <summary>
            Gets if the handler marked as default.
            </summary>
        </member>
        <member name="T:Serenity.Services.DefaultHandlerFactory">
            <summary>
            Default implementation for the <see cref="T:Serenity.Services.IDefaultHandlerFactory"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerFactory.#ctor(Serenity.Services.IDefaultHandlerRegistry,Serenity.Services.IHandlerActivator)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="registry">Default handler registry</param>
            <param name="activator">Handler activator</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerFactory.CreateHandler(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.DefaultHandlerFactoryExtensions">
            <summary>
            Extension methods for <see cref="T:Serenity.Services.IDefaultHandlerFactory"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerFactoryExtensions.CreateHandler``1(Serenity.Services.IDefaultHandlerFactory,System.Type)">
            <summary>
            Creates an instance of the default handler for 
            the requested handler interface type.
            </summary>
            <typeparam name="THandler">Handler interface type</typeparam>
            <param name="handlerFactory">Default handler factory</param>
            <param name="rowType">Row type</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Services.DefaultHandlerRegistry">
            <summary>
            Default implentation for the <see cref="T:Serenity.Services.IDefaultHandlerFactory"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerRegistry.#ctor(Serenity.Abstractions.ITypeSource)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="typeSource">Type source containing possible 
            handler classes.</param>
            <exception cref="T:System.ArgumentNullException">typeSource is null</exception>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerRegistry.GetTypes">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.DefaultHandlerRegistry.GetTypes(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.GenericHandlerTypeAttribute">
            <summary>
            Assigns the generic handler type (e.g. <see cref="T:Serenity.Services.SaveRequestHandler`1"/> 
            for a handler interface (like <see cref="T:Serenity.Services.ISaveRequestHandler"/>) 
            </summary>
        </member>
        <member name="M:Serenity.Services.GenericHandlerTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="type">The handler type</param>
        </member>
        <member name="P:Serenity.Services.GenericHandlerTypeAttribute.Value">
            <summary>
            The generic handler type.
            </summary>
        </member>
        <member name="T:Serenity.Services.IDefaultHandlerFactory">
            <summary>
            Interface to get a new instace of a default request handler,
            given its row type and the handler interface
            </summary>
        </member>
        <member name="M:Serenity.Services.IDefaultHandlerFactory.CreateHandler(System.Type,System.Type)">
            <summary>
            Creates a new instance of a default request handler
            for the specified row type and the handler interface
            </summary>
            <param name="rowType"></param>
            <param name="handlerInterface"></param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Services.IDefaultHandlerRegistry">
            <summary>
            Abstaction for the registry that cobtains default
            handler types.
            </summary>
        </member>
        <member name="M:Serenity.Services.IDefaultHandlerRegistry.GetTypes(System.Type)">
            <summary>
            Gets a list of registered handler classes for 
            the requested handler interface type.
            </summary>
            <param name="handlerType">Handler interface type</param>
        </member>
        <member name="T:Serenity.Services.IHandlerActivator">
            <summary>
            Abstraction for request handler activator, that is used
            to create instances of an handler type.
            </summary>
        </member>
        <member name="M:Serenity.Services.IHandlerActivator.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the handler type
            </summary>
            <param name="type">The handler type</param>
        </member>
        <member name="T:Serenity.Services.IRequestHandler">
            <summary>
            Marker interface for standard and custom request handlers
            </summary>
        </member>
        <member name="T:Serenity.Services.IRequestHandler`1">
            <summary>
            Marker interface for request handlers that operate on a specific entity type.
            </summary>
            <typeparam name="TRow">The entity type</typeparam>
        </member>
        <member name="T:Serenity.Services.IRequestHandler`3">
            <summary>
            Marker interface for request handlers that operate on a specific entity type,
            request type and a response type.
            </summary>
            <typeparam name="TRow">The entity type</typeparam>
            <typeparam name="TRequest">Request type</typeparam>
            <typeparam name="TResponse">Response type</typeparam>
        </member>
        <member name="T:Serenity.Services.IRequestType`1">
            <summary>
            Interface to access the request type of a request handler
            </summary>
            <typeparam name="TRequestType">Request type</typeparam>
        </member>
        <member name="T:Serenity.Services.IResponseType`1">
            <summary>
            Interface to access the response type
            of a request handler
            </summary>
            <typeparam name="TResponseType">Response type</typeparam>
        </member>
        <member name="T:Serenity.Services.RequestHandlerExtensions">
            <summary>
            Contains extension methods to create request / response types
            for a request handler instance
            </summary>
        </member>
        <member name="M:Serenity.Services.RequestHandlerExtensions.CreateRequest(Serenity.Services.IListRequestHandler)">
            <summary>
            Creates a request object for the list handler instance
            </summary>
            <param name="handler">List handler instance</param>
        </member>
        <member name="M:Serenity.Services.RequestHandlerExtensions.CreateRequest(Serenity.Services.IRetrieveRequestHandler)">
            <summary>
            Creates a request object for the retrieve handler instance
            </summary>
            <param name="handler">Retrieve handler instance</param>
        </member>
        <member name="M:Serenity.Services.RequestHandlerExtensions.CreateRequest(Serenity.Services.IDeleteRequestHandler)">
            <summary>
            Creates a request object for the delete handler instance
            </summary>
            <param name="handler">Delete handler instance</param>
        </member>
        <member name="M:Serenity.Services.RequestHandlerExtensions.CreateRequest(Serenity.Services.IUndeleteRequestHandler)">
            <summary>
            Creates a request object for the undelete handler instance
            </summary>
            <param name="handler">Undelete handler instance</param>
        </member>
        <member name="M:Serenity.Services.RequestHandlerExtensions.CreateRequest``1(Serenity.Services.ISaveRequestHandler)">
            <summary>
            Creates a request object for the save handler instance
            </summary>
            <param name="handler">Save handler instance</param>
        </member>
        <member name="M:Serenity.Services.RequestHandlerExtensions.CreateRequest(Serenity.Services.ISaveRequestHandler)">
            <summary>
            Creates a request object for the save handler instance
            </summary>
            <param name="handler">Save handler instance</param>
        </member>
        <member name="M:Serenity.Services.RequestHandlerExtensions.GetRequestType(Serenity.Services.IRequestHandler)">
            <summary>
            Gets the request type for the handler instance
            </summary>
            <param name="handler">Handler instance</param>
        </member>
        <member name="M:Serenity.Services.RequestHandlerExtensions.GetResponseType(Serenity.Services.IRequestHandler)">
            <summary>
            Gets the response type for the handler instance
            </summary>
            <param name="handler">Handler instance</param>
        </member>
        <member name="T:Serenity.Services.ServiceHelper">
            <summary>
            Contains some helper methods for service handlers
            </summary>
        </member>
        <member name="M:Serenity.Services.ServiceHelper.CheckParentNotDeleted(System.Data.IDbConnection,System.String,System.Action{Serenity.Data.SqlQuery},Serenity.ITextLocalizer)">
            <summary>
            Checks that parent record is not soft deleted
            </summary>
            <param name="connection">Connection</param>
            <param name="tableName">Table name</param>
            <param name="filter">Filter callback</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.ServiceHelper.SetSkipTakeTotal``1(Serenity.Services.ListResponse{``0},Serenity.Data.SqlQuery)">
            <summary>
            Sets the Skip, Take and Total parameters in the response
            </summary>
            <typeparam name="T">Type of the response entities</typeparam>
            <param name="response">Response object</param>
            <param name="query">Query to get params from</param>
        </member>
        <member name="M:Serenity.Services.ServiceHelper.IsUniqueIndexException(System.Data.IDbConnection,System.Exception,System.String,Serenity.Data.IRow,Serenity.Data.IRow,Serenity.Data.Field[])">
            <summary>
            Checks if an exception seems to be an unique index exception
            </summary>
            <param name="connection">Connection</param>
            <param name="exception">Exception</param>
            <param name="indexName">Optional index name to check</param>
            <param name="oldRow">Old row</param>
            <param name="newRow">New row</param>
            <param name="indexFields">List of index fields</param>
            <exception cref="T:System.ArgumentNullException">connection or exception is null</exception>
        </member>
        <member name="T:Serenity.Services.ServiceQueryHelper">
            <summary>
            Contains static helper methods for service handler queries.
            </summary>
        </member>
        <member name="M:Serenity.Services.ServiceQueryHelper.ApplySort(Serenity.Data.SqlQuery,System.String,System.Boolean)">
            <summary>
            Applies the sort order to the query
            </summary>
            <param name="query">Query</param>
            <param name="sort">Sort field, ignored if null, empty or
            not a usable field (e.g. a field that is selected in the query
            or available in the row)</param>
            <param name="descending">Descending flag</param>
            <exception cref="T:System.ArgumentNullException">query is null</exception>
        </member>
        <member name="M:Serenity.Services.ServiceQueryHelper.ApplySort(Serenity.Data.SqlQuery,Serenity.Services.SortBy)">
            <summary>
            Applies sort order to the query
            </summary>
            <param name="query">Query</param>
            <param name="sortBy">Sort order</param>
        </member>
        <member name="M:Serenity.Services.ServiceQueryHelper.ApplySort(Serenity.Data.SqlQuery,System.Collections.Generic.IList{Serenity.Services.SortBy},Serenity.Services.SortBy[])">
            <summary>
            Applies sort orders to the query
            </summary>
            <param name="query">Query</param>
            <param name="sortByList">Sort orders</param>
            <param name="defaultSortBy">The default sort order</param>
        </member>
        <member name="M:Serenity.Services.ServiceQueryHelper.ApplySkipTakeAndCount(Serenity.Data.SqlQuery,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Applies skip, take and exclude total count parameters to the query
            </summary>
            <param name="query">Query</param>
            <param name="skip">Skip parameter</param>
            <param name="take">Take parameter</param>
            <param name="excludeTotalCount">ExcludeTotalCount flag</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.ServiceQueryHelper.ApplyContainsText(Serenity.Data.SqlQuery,System.String,System.Action{System.String,System.Nullable{System.Int64}})">
            <summary>
            Applies contains text criteria to the query
            </summary>
            <param name="query">Query</param>
            <param name="containsText">Contains text</param>
            <param name="filter">Filter callback</param>
        </member>
        <member name="M:Serenity.Services.ServiceQueryHelper.GetContainsTextFilter(System.String,Serenity.Data.Criteria[])">
            <summary>
            Creates a contains text criteria
            </summary>
            <param name="containsText">Contains text</param>
            <param name="textFields">The list of fields to search contains text in</param>
        </member>
        <member name="M:Serenity.Services.ServiceQueryHelper.GetNotDeletedCriteria(Serenity.Data.IRow)">
            <summary>
            Gets not deleted criteria for a row type, e.g. for 
            rows that support soft delete.
            </summary>
            <param name="row">Row instance</param>
        </member>
        <member name="M:Serenity.Services.ServiceQueryHelper.UseSoftDelete(Serenity.Data.IRow)">
            <summary>
            Returns if row uses soft delete
            </summary>
            <param name="row">Row instance</param>
        </member>
        <member name="T:Serenity.Services.TreeOrdering">
            <summary>
            Tree based sorting helper. E.g. in a tree, a node's parents
            should come before itself. Such an ordering is not easy
            in SQL so we use this helper to do ordering client side.
            </summary>
        </member>
        <member name="M:Serenity.Services.TreeOrdering.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Applies tree based ordering to the items
            </summary>
            <typeparam name="TItem">Type of items</typeparam>
            <typeparam name="TIdentity">Type of ID fields of the items</typeparam>
            <param name="items">List of items</param>
            <param name="getId">Callback to get ID for an item</param>
            <param name="getParentId">Callback to get parent ID for an item</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Services.TwoLevelCacheInvalidationExtensions">
            <summary>
            Contains helper methods for two level cache invalidation
            </summary>
        </member>
        <member name="M:Serenity.Services.TwoLevelCacheInvalidationExtensions.InvalidateOnCommit(Serenity.Abstractions.ITwoLevelCache,Serenity.Data.IUnitOfWork,System.String)">
            <summary>
            Invalidates cached items related to a group key when the 
            unit of work commits
            </summary>
            <param name="cache">Cache</param>
            <param name="uow">Unit of work</param>
            <param name="groupKey">Group key</param>
            <exception cref="T:System.ArgumentNullException">cache is null</exception>
        </member>
        <member name="M:Serenity.Services.TwoLevelCacheInvalidationExtensions.InvalidateOnCommit(Serenity.Abstractions.ITwoLevelCache,Serenity.Data.IUnitOfWork,Serenity.Data.RowFieldsBase)">
            <summary>
            Invalidates cached items related to fields class group key and
            any related fields types specified using TwoLevelCached attributes
            on the row type.
            </summary>
            <param name="cache">Cache</param>
            <param name="uow">Unit of work</param>
            <param name="fields">Fields type</param>
            <exception cref="T:System.ArgumentNullException">Cache is null</exception>
        </member>
        <member name="M:Serenity.Services.TwoLevelCacheInvalidationExtensions.InvalidateOnCommit(Serenity.Abstractions.ITwoLevelCache,Serenity.Data.IUnitOfWork,Serenity.Data.IRow)">
            <summary>
            Invalidates cached items on commit for specified row type
            and any related field types specified using TwoLevelCached attributes
            on the row type.
            </summary>
            <param name="cache">Cache</param>
            <param name="uow">Unit of work</param>
            <param name="row">Row type</param>
            <exception cref="T:System.ArgumentNullException">Cache is null</exception>
        </member>
        <member name="T:Serenity.Services.CaptureLogBehavior">
            <summary>
            Capture log behavior
            </summary>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.ActivateFor(Serenity.Data.IRow)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.OnAudit(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.OnAudit(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.OnAudit(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.Log(Serenity.Data.IUnitOfWork,Serenity.Data.IRow,Serenity.Data.IRow,System.Object)">
            <summary>
            Logs a capture log operation
            </summary>
            <param name="uow">Unit of work</param>
            <param name="old">Old entity</param>
            <param name="row">New entity</param>
            <param name="userId">User ID</param>
            <exception cref="T:System.ArgumentNullException">old and row is null</exception>
            <exception cref="T:System.InvalidOperationException">Capture log row type does not implement ICaptureLogRow interface</exception>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.OnPrepareQuery(Serenity.Services.IUndeleteRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.OnValidateRequest(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.OnBeforeUndelete(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.OnAfterUndelete(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.CaptureLogBehavior.OnReturn(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.CaptureLogConsts">
            <summary>
            Contains constants related to the capture logging
            </summary>
        </member>
        <member name="F:Serenity.Services.CaptureLogConsts.UntilMax">
            <summary>
            The maximum value for ValidUntil column
            </summary>
        </member>
        <member name="T:Serenity.Services.DisplayOrderFilterHelper">
            <summary>
            Display order related helper methods
            </summary>
        </member>
        <member name="M:Serenity.Services.DisplayOrderFilterHelper.GetDisplayOrderFilterFor(Serenity.Data.IRow)">
            <summary>
            Gets display order criteria for a row instance
            </summary>
            <param name="row">Row class</param>
        </member>
        <member name="T:Serenity.Services.UpdateInsertLogBehavior">
            <summary>
            Behavior class that handles assignment of relevant fields 
            for rows with <see cref="T:Serenity.Data.IInsertLogRow"/> 
            and <see cref="T:Serenity.Data.IUpdateLogRow"/> interfaces
            </summary>
        </member>
        <member name="M:Serenity.Services.UpdateInsertLogBehavior.ActivateFor(Serenity.Data.IRow)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.UpdateInsertLogBehavior.OnSetInternalFields(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.LinkingSetRelationBehavior">
            <summary>
            Behavior class that handles <see cref="T:Serenity.Data.Mapping.LinkingSetRelationAttribute"/>
            </summary>
        </member>
        <member name="P:Serenity.Services.LinkingSetRelationBehavior.Target">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.#ctor(Serenity.Services.IDefaultHandlerFactory)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="handlerFactory">Default handler factory</param>
            <exception cref="T:System.ArgumentNullException">handlerFactory is null</exception>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.ActivateFor(Serenity.Data.IRow)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnAfterExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnBeforeExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnPrepareQuery(Serenity.Services.IRetrieveRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnValidateRequest(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnValidateRequest(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnApplyFilters(Serenity.Services.IListRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnBeforeExecuteQuery(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnAfterExecuteQuery(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnPrepareQuery(Serenity.Services.IListRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnReturn(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnReturn(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnAfterSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LinkingSetRelationBehavior.OnBeforeDelete(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.LocalizationBehavior">
            <summary>
            Behavior for handling localizable rows / properties
            </summary>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.#ctor(Serenity.Services.IDefaultHandlerFactory)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="handlerFactory">Default handler factory</param>
            <exception cref="T:System.ArgumentNullException">handlerFactory is null</exception>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.ActivateFor(Serenity.Data.IRow)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.OnAfterExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.OnBeforeExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.OnPrepareQuery(Serenity.Services.IRetrieveRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.OnValidateRequest(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.OnReturn(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.OnAfterSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.LocalizationBehavior.OnBeforeDelete(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.MasterDetailRelationBehavior">
            <summary>
            Behavior class that handles <see cref="T:Serenity.Data.Mapping.MasterDetailRelationAttribute"/>
            </summary>
        </member>
        <member name="P:Serenity.Services.MasterDetailRelationBehavior.Target">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.#ctor(Serenity.Services.IDefaultHandlerFactory)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="handlerFactory">Default handler factory</param>
            <exception cref="T:System.ArgumentNullException">handlerFactory is null</exception>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.ActivateFor(Serenity.Data.IRow)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnAfterExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnBeforeExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnPrepareQuery(Serenity.Services.IRetrieveRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnValidateRequest(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnPrepareQuery(Serenity.Services.IListRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnValidateRequest(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnApplyFilters(Serenity.Services.IListRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnBeforeExecuteQuery(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnAfterExecuteQuery(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnReturn(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnReturn(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnAfterSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.MasterDetailRelationBehavior.OnBeforeDelete(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.UniqueConstraintSaveBehavior">
            <summary>
            Behavior that handles <see cref="T:Serenity.Data.Mapping.UniqueConstraintAttribute"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.UniqueConstraintSaveBehavior.#ctor(Serenity.ITextLocalizer)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.UniqueConstraintSaveBehavior.ActivateFor(Serenity.Data.IRow)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.UniqueConstraintSaveBehavior.OnBeforeSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.UniqueFieldSaveBehavior">
            <summary>
            Interface that handles <see cref="T:Serenity.Data.Mapping.UniqueConstraintAttribute"/> on fields
            </summary>
        </member>
        <member name="P:Serenity.Services.UniqueFieldSaveBehavior.Target">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.UniqueFieldSaveBehavior.#ctor(Serenity.ITextLocalizer)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.UniqueFieldSaveBehavior.ActivateFor(Serenity.Data.IRow)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.UniqueFieldSaveBehavior.OnBeforeSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.UpdatableExtensionBehavior">
            <summary>
            Behavior that handles <see cref="T:Serenity.Data.Mapping.UpdatableExtensionAttribute"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.UpdatableExtensionBehavior.#ctor(Serenity.Services.IDefaultHandlerFactory)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="handlerFactory">Default handler factory</param>
            <exception cref="T:System.ArgumentNullException">handlerFactory is null</exception>
        </member>
        <member name="M:Serenity.Services.UpdatableExtensionBehavior.ActivateFor(Serenity.Data.IRow)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.UpdatableExtensionBehavior.OnBeforeSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.UpdatableExtensionBehavior.OnAfterSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.UpdatableExtensionBehavior.OnBeforeDelete(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.DataValidation">
            <summary>
            Contains validation related helper methods for service handlers
            </summary>
        </member>
        <member name="M:Serenity.Services.DataValidation.AutoTrim(Serenity.Data.IRow,Serenity.Data.StringField)">
            <summary>
            Automatically trims a string field value based
            on its <see cref="F:Serenity.Data.FieldFlags.TrimToEmpty"/> and
            <see cref="F:Serenity.Data.FieldFlags.Trim"/> flags.
            </summary>
            <param name="row">The row instance</param>
            <param name="stringField">String field</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ValidateRequired(Serenity.Data.IRow,Serenity.Data.Field,Serenity.ITextLocalizer)">
            <summary>
            Validates that the field does not contain a null value
            or an empty string.
            </summary>
            <param name="row">Row instance</param>
            <param name="field">Field</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ValidateRequired(Serenity.Data.IRow,System.Collections.Generic.IEnumerable{Serenity.Data.Field},Serenity.ITextLocalizer)">
            <summary>
            Validates the fields does not contain null or empty string values.
            This does not validate unassigned fields that does not have a default value.
            </summary>
            <param name="row">Row instance</param>
            <param name="fields">List of fields</param>
            <param name="localizer"></param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ValidateRequiredIfModified(Serenity.Data.IRow,System.Collections.Generic.IEnumerable{Serenity.Data.Field},Serenity.ITextLocalizer)">
            <summary>
            Validates that field values does not contain a null or empty string
            if the field is assigned
            </summary>
            <param name="row">Row instance</param>
            <param name="fields">List of fields</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.EnsureUniversalTime(Serenity.Data.IRow,Serenity.Data.DateTimeField)">
            <summary>
            Converts the field value to universal time
            </summary>
            <param name="row">Row instance</param>
            <param name="field">Field</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ValidateEnum(Serenity.Data.IRow,Serenity.Data.Field,System.Type,Serenity.ITextLocalizer)">
            <summary>
            Validates enum is within allowed values, e.g. one its members
            </summary>
            <param name="row">Row instance</param>
            <param name="field">Field</param>
            <param name="enumType">Enum type</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ValidateEnum``1(Serenity.Data.IRow,Serenity.Data.GenericValueField{``0},Serenity.ITextLocalizer)">
            <summary>
            Validates enum is within allowed values, e.g. one of its members
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="row">Row instance</param>
            <param name="field">Field</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ValidateEnum``1(``0,Serenity.ITextLocalizer)">
            <summary>
            Validates enum is one of allowed values, e.g. one of its members
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="value">Enum value</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ValidateDateRange(Serenity.Data.IRow,Serenity.Data.DateTimeField,Serenity.Data.DateTimeField,Serenity.ITextLocalizer)">
            <summary>
            Validates date range is valid, e.g. start date is before end date etc.
            </summary>
            <param name="row">Row instance</param>
            <param name="start">Start date</param>
            <param name="finish">End date</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.RequiredError(Serenity.Data.Field,Serenity.ITextLocalizer)">
            <summary>
            Returns a required validation error
            </summary>
            <param name="field">Field</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.RequiredError(System.String,Serenity.ITextLocalizer,System.String)">
            <summary>
            Returns a required validation error
            </summary>
            <param name="name">Field name</param>
            <param name="localizer">Text localizer</param>
            <param name="title">Field title</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.DataValidation.InvalidIdError(Serenity.Data.IRow,Serenity.Data.Field,Serenity.ITextLocalizer)">
            <summary>
            Returns a Invalid ID error
            </summary>
            <param name="row">Row instance</param>
            <param name="field">Field</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.InvalidIdError(Serenity.Data.Field,System.Int64,Serenity.ITextLocalizer)">
            <summary>
            Returns an invalid ID error
            </summary>
            <param name="field">Field</param>
            <param name="value">Value</param>
            <param name="localizer">Text localizer</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.DataValidation.InvalidDateRangeError(Serenity.Data.DateTimeField,Serenity.Data.DateTimeField,Serenity.ITextLocalizer)">
            <summary>
            Returns an invalid date range error
            </summary>
            <param name="start">Start date</param>
            <param name="finish">End date</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ReadOnlyError(Serenity.Data.Field,Serenity.ITextLocalizer)">
            <summary>
            Returns a field is readonly error
            </summary>
            <param name="field">Field</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.InvalidValueError(Serenity.Data.Field,System.Object,Serenity.ITextLocalizer)">
            <summary>
            Returns an invalid value error
            </summary>
            <param name="field">Field</param>
            <param name="value">Value</param>
            <param name="localizer">Text localizer</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.DataValidation.InvalidValueError(Serenity.Data.IRow,Serenity.Data.Field,Serenity.ITextLocalizer)">
            <summary>
            Returns an invalid value error
            </summary>
            <param name="row">Row instance</param>
            <param name="field">Field</param>
            <param name="localizer">Text localizer</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.DataValidation.EntityNotFoundError(Serenity.Data.IRow,System.Object,Serenity.ITextLocalizer)">
            <summary>
            Returns an entity not found error
            </summary>
            <param name="row">Row instance</param>
            <param name="id">ID</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.EntityReadAccessError(Serenity.Data.IRow,System.Object,Serenity.ITextLocalizer)">
            <summary>
            Returns an entity read access error
            </summary>
            <param name="row">Row instance</param>
            <param name="id">ID</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.EntityWriteAccessError(Serenity.Data.IRow,System.Int64,Serenity.ITextLocalizer)">
            <summary>
            Returns an entity write access error
            </summary>
            <param name="row">Row instance</param>
            <param name="id">Id</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.RelatedRecordExist(System.String,Serenity.ITextLocalizer)">
            <summary>
            Returns a related record exist error
            </summary>
            <param name="foreignTable">Foreign table</param>
            <param name="localizer">Text localizer</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.DataValidation.ParentRecordDeleted(System.String,Serenity.ITextLocalizer)">
            <summary>
            Returns a parent record deleted error
            </summary>
            <param name="foreignTable">Foreign table</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.RecordNotActive(Serenity.Data.IRow,Serenity.ITextLocalizer)">
            <summary>
            Returns a record not active error
            </summary>
            <param name="row">Row instance</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.UnexpectedError(Serenity.ITextLocalizer)">
            <summary>
            Returns an unexpected error
            </summary>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.GetEntitySingular(System.String,Serenity.ITextLocalizer)">
            <summary>
            Gets singular entity name for a table
            </summary>
            <param name="table">Table prefix</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Services.DataValidation.ArgumentNull(System.String,Serenity.ITextLocalizer)">
            <summary>
            Returns an argument null error
            </summary>
            <param name="argument">Argument name</param>
            <param name="localizer">Text localizer</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.DataValidation.ArgumentOutOfRange(System.String,Serenity.ITextLocalizer)">
            <summary>
            Returns an argument out of range error
            </summary>
            <param name="argument">Argument name</param>
            <param name="localizer">Text localizer</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Services.ValidateParentBehavior">
            <summary>
            Validation behavior for rows that have a parent record via <see cref="T:Serenity.Data.IParentIdRow"/> interface
            </summary>
        </member>
        <member name="M:Serenity.Services.ValidateParentBehavior.#ctor(Serenity.Data.IRowTypeRegistry,Serenity.ITextLocalizer)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="rowTypeRegistry">Row type registry</param>
            <param name="localizer">Text localizer</param>
            <exception cref="T:System.ArgumentNullException">rowTypeRegistry or localizer is null</exception>
        </member>
        <member name="M:Serenity.Services.ValidateParentBehavior.OnValidateRequest(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.BaseListBehavior">
            <summary>
            Base class for behaviors implementing <see cref="T:Serenity.Services.IListBehavior"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.BaseListBehavior.OnValidateRequest(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseListBehavior.OnPrepareQuery(Serenity.Services.IListRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseListBehavior.OnApplyFilters(Serenity.Services.IListRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseListBehavior.OnBeforeExecuteQuery(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseListBehavior.OnAfterExecuteQuery(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseListBehavior.OnReturn(Serenity.Services.IListRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.IListBehavior">
            <summary>
            A list behavior that can be used as a mixin within a ListRequestHandler lifecycle
            </summary>
            <remarks>
            A list behavior instance is always cached and reused across requests, so make 
            sure you don't store anything in private variables, and its operation 
            is thread-safe. If you need to pass some state between events, 
            use handler's StateBag.
            </remarks>
        </member>
        <member name="M:Serenity.Services.IListBehavior.OnValidateRequest(Serenity.Services.IListRequestHandler)">
            <summary>Called when list request is validated</summary>
            <param name="handler">Calling list request handler</param>
        </member>
        <member name="M:Serenity.Services.IListBehavior.OnPrepareQuery(Serenity.Services.IListRequestHandler,Serenity.Data.SqlQuery)">
            <summary>Called when query to is built</summary>
            <param name="handler">Calling list request handler</param>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.IListBehavior.OnApplyFilters(Serenity.Services.IListRequestHandler,Serenity.Data.SqlQuery)">
            <summary>Called when filters are applied to query</summary>
            <param name="handler">Calling list request handler</param>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.IListBehavior.OnBeforeExecuteQuery(Serenity.Services.IListRequestHandler)">
            <summary>Called just before query is sent to database</summary>
            <param name="handler">Calling list request handler</param>
        </member>
        <member name="M:Serenity.Services.IListBehavior.OnAfterExecuteQuery(Serenity.Services.IListRequestHandler)">
            <summary>Called after query is sent to database</summary>
            <param name="handler">Calling list request handler</param>
        </member>
        <member name="M:Serenity.Services.IListBehavior.OnReturn(Serenity.Services.IListRequestHandler)">
            <summary>Called before handler is returning the result</summary>
            <param name="handler">Calling list request handler</param>
        </member>
        <member name="T:Serenity.Services.IListHandler`3">
            <summary>
            Interface for list request handlers with custom list request / response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TListRequest">List request type</typeparam>
            <typeparam name="TListResponse">List response type</typeparam>
        </member>
        <member name="M:Serenity.Services.IListHandler`3.List(System.Data.IDbConnection,`1)">
            <summary>
            Processes a List request
            </summary>
            <param name="connection">Connection</param>
            <param name="request">List request</param>
        </member>
        <member name="T:Serenity.Services.IListHandler`1">
            <summary>
            Interface for list request handlers
            </summary>
            <typeparam name="TRow">Row type</typeparam>
        </member>
        <member name="T:Serenity.Services.IListHandler`2">
            <summary>
            Interface for list request handlers with a custom list request type.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TListRequest">List request type</typeparam>
        </member>
        <member name="T:Serenity.Services.IListRequestHandler">
            <summary>
            Represents a ListRequestHandler. Is used with ListBehavior objects.
            </summary>
        </member>
        <member name="P:Serenity.Services.IListRequestHandler.Row">
            <summary>
            Loader row
            </summary>
        </member>
        <member name="P:Serenity.Services.IListRequestHandler.Request">
            <summary>
            List request
            </summary>
        </member>
        <member name="P:Serenity.Services.IListRequestHandler.Response">
            <summary>
            List response
            </summary>
        </member>
        <member name="P:Serenity.Services.IListRequestHandler.StateBag">
            <summary>
            A state bag that can be used as storage within a request handler context
            </summary>
        </member>
        <member name="P:Serenity.Services.IListRequestHandler.Connection">
            <summary>
            Current connection
            </summary>
        </member>
        <member name="P:Serenity.Services.IListRequestHandler.Context">
            <summary>
            Current request context
            </summary>
        </member>
        <member name="M:Serenity.Services.IListRequestHandler.AllowSelectField(Serenity.Data.Field)">
            <summary>
            Returns true if field is allowed to be selected, based on permissions and SelectLevel.Never.
            </summary>
            <param name="field">Field</param>
            <returns>True if field should be selected</returns>
        </member>
        <member name="M:Serenity.Services.IListRequestHandler.ShouldSelectField(Serenity.Data.Field)">
            <summary>
            Returns true if field should be selected based on ColumnSelection flags.
            </summary>
            <param name="field">Field</param>
            <returns>True if field should be selected</returns>
        </member>
        <member name="M:Serenity.Services.IListRequestHandler.IgnoreEqualityFilter(System.String)">
            <summary>
            Use to ignore an equality filter
            </summary>
            <param name="field">Field name or property name</param>
        </member>
        <member name="T:Serenity.Services.IListRequestProcessor">
            <summary>
            Abstraction for list request handlers with a Process method.
            </summary>
        </member>
        <member name="M:Serenity.Services.IListRequestProcessor.Process(System.Data.IDbConnection,Serenity.Services.ListRequest)">
            <summary>
            Processes the <see cref="T:Serenity.Services.ListRequest"/> and returns a <see cref="T:Serenity.Services.ListResponse`1"/>
            </summary>
            <param name="connection">Connection</param>
            <param name="request">List request</param>
        </member>
        <member name="T:Serenity.Services.ListRequestHandler`3">
            <summary>
            Generic base class for list request handlers
            </summary>
            <typeparam name="TRow">Entity type</typeparam>
            <typeparam name="TListRequest">List request type</typeparam>
            <typeparam name="TListResponse">List response type</typeparam>
        </member>
        <member name="F:Serenity.Services.ListRequestHandler`3.ignoredEqualityFilters">
            <summary>
            Set of ignored equality filter entries
            </summary>
        </member>
        <member name="F:Serenity.Services.ListRequestHandler`3.behaviors">
            <summary>
            Lazy list of behaviors that is activated for this request
            </summary>
        </member>
        <member name="F:Serenity.Services.ListRequestHandler`3.lookupAccessMode">
            <summary>
            True if the list handler is in lookup access mode, e.g. it only
            allows access to lookup fields
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="context">Request context</param>
            <exception cref="T:System.ArgumentNullException">Context is null</exception>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.GetBehaviors">
            <summary>
            Gets the list of list behaviors
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.GetNativeSort">
            <summary>
            Gets the native sort order, which includes name field by default,
            unless the row has [SortOrder] attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.AllowSelectField(Serenity.Data.Field)">
            <summary>
            Returns true if the field should be allowed to be selected,
            based on is read permission, selectlevel.never flag, and lookup
            access mode
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ShouldSelectField(Serenity.Data.Field)">
            <summary>
            Returns true if the field should be selected, based on
            current <see cref="T:Serenity.Services.ColumnSelection"/>, field <see cref="T:Serenity.Data.Mapping.MinSelectLevelAttribute"/>,
            the field being a not mapped (<see cref="T:Serenity.Data.Mapping.NotMappedAttribute"/>) field, table field,
            or a view / expression field.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.IsIncluded(Serenity.Data.Field)">
            <summary>
            Returns true if field is included in <see cref="P:Serenity.Services.ListRequest.IncludeColumns"/>
            </summary>
            <param name="field">Field</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.IsIncluded(System.String)">
            <summary>
            Returns true if field is included in <see cref="P:Serenity.Services.ListRequest.IncludeColumns"/>
            </summary>
            <param name="column">Column</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.SelectField(Serenity.Data.SqlQuery,Serenity.Data.Field)">
            <summary>
            Calls query.Select(field)
            </summary>
            <param name="query">Query</param>
            <param name="field">field</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.SelectFields(Serenity.Data.SqlQuery)">
            <summary>
            Calls query.Select(field) for all the fields without <see cref="F:Serenity.Data.FieldFlags.NotMapped"/>,
            and if <see cref="M:Serenity.Services.ListRequestHandler`3.AllowSelectField(Serenity.Data.Field)"/> and <see cref="M:Serenity.Services.ListRequestHandler`3.ShouldSelectField(Serenity.Data.Field)"/>
            returns true.
            </summary>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.PrepareQuery(Serenity.Data.SqlQuery)">
            <summary>
            Prepares query by calling <see cref="M:Serenity.Services.ListRequestHandler`3.SelectFields(Serenity.Data.SqlQuery)"/>.
            </summary>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplyKeyOrder(Serenity.Data.SqlQuery)">
            <summary>
            Applies the key order which is ID field (<see cref="T:Serenity.Data.IIdRow"/>)
            </summary>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.GetQuickSearchFields(System.String)">
            <summary>
            Gets the list of quick search fields (<see cref="T:Serenity.Data.Mapping.QuickSearchAttribute"/>) based
            on the containsField argument.
            </summary>
            <param name="containsField">Contains field argument, can be null</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The containsField has <see cref="F:Serenity.Data.SelectLevel.Never" />
            or it does not have a <see cref="T:Serenity.Data.Mapping.QuickSearchAttribute"/>
            </exception>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.AddFieldContainsCriteria(Serenity.Data.Field,System.String,System.Nullable{System.Int64},Serenity.Data.Mapping.SearchType,System.Boolean,Serenity.Data.BaseCriteria@,System.Boolean@)">
            <summary>
            Applies a contains criteria based on containsText, id (if the contains text can be parsed to 
            an integer ID), searchType and numericOnly parameters.
            </summary>
            <param name="field">Search field</param>
            <param name="containsText">Contains text</param>
            <param name="id">The containsText argument parsed to a long if possible</param>
            <param name="searchType">Search type</param>
            <param name="numericOnly">True if numeric, e.g. equality to the id is requested</param>
            <param name="criteria">Current contains criteria build up from other fields if any.
            The result should be returned via this argument.</param>
            <param name="orFalse">Should return true from this parameter if this contains criteria
            should cause search to return no records</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplyFieldContainsText(Serenity.Data.Field,System.String,System.Nullable{System.Int64},Serenity.Data.BaseCriteria@,System.Boolean@)">
            <summary>
            Applies a field contains criteria to the query by calling 
            <see cref="M:Serenity.Services.ListRequestHandler`3.AddFieldContainsCriteria(Serenity.Data.Field,System.String,System.Nullable{System.Int64},Serenity.Data.Mapping.SearchType,System.Boolean,Serenity.Data.BaseCriteria@,System.Boolean@)"/>
            </summary>
            <param name="field">Field</param>
            <param name="containsText">Contains text</param>
            <param name="id">containsText parsed as a long if possible</param>
            <param name="criteria">Current contains criteria build up from other fields if any.
            The result should be returned via this argument.</param>
            <param name="orFalse">Should return true from this parameter if this contains criteria
            should cause search to return no records</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplyContainsText(Serenity.Data.SqlQuery,System.String)">
            <summary>
            Applies contains text filter to the query
            </summary>
            <param name="query">Query</param>
            <param name="containsText">Contains text</param>
            <exception cref="T:System.ArgumentOutOfRangeException">There are no quick search fields
            (<see cref="T:Serenity.Data.Mapping.QuickSearchAttribute"/></exception>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.OnBeforeExecuteQuery">
            <summary>
            Called before executing the list query
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.OnAfterExecuteQuery">
            <summary>
            Called after executing the list query
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.OnReturn">
            <summary>
            Called just before returning the response
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ProcessEntity(`0)">
            <summary>
            Can be overridden in a derived class to make
            some changes in a returned entity just before it gets
            added to the Response.Entities list
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplyIncludeDeletedFilter(Serenity.Data.SqlQuery)">
            <summary>
            Applies include deleted filter to the query if Request.IncludeDeleted is true
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ReplaceFieldExpressions(Serenity.Data.BaseCriteria)">
            <summary>
            Replaces field references, e.g. property names and field name with
            their corresponding expression by using the <see cref="T:Serenity.Data.CriteriaFieldExpressionReplacer"/>
            </summary>
            <param name="criteria">Input criteria</param>
            <returns>Processed criteria</returns>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplyCriteria(Serenity.Data.SqlQuery)">
            <summary>
            Applies the Request.Criteria to the query if it is not null or empty,
            and replaced field references with their corresponding expressions by
            calling <see cref="M:Serenity.Services.ListRequestHandler`3.ReplaceFieldExpressions(Serenity.Data.BaseCriteria)"/>
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplyFieldEqualityFilter(Serenity.Data.SqlQuery,Serenity.Data.Field,System.Object)">
            <summary>
            Applies a field equality filter, e.g. one that is passed via Request.EqualityFilter
            to the query. It validates field flags like <see cref="F:Serenity.Data.FieldFlags.DenyFiltering"/> and
            <see cref="F:Serenity.Data.FieldFlags.NotMapped"/> and <see cref="F:Serenity.Data.SelectLevel.Never"/> to check 
            if the field is allowed to be filtered.
            </summary>
            <param name="query">Query</param>
            <param name="field">Field</param>
            <param name="value">Equality value. Can be a enumerable for multi value filtering.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.IsEmptyEqualityFilterValue(System.Object)">
            <summary>
            Checks if the equality filter value is empty. It returns true
            for null, empty string, or empty IEnumerable.
            </summary>
            <param name="value">Value to check</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplyEqualityFilter(Serenity.Data.SqlQuery)">
            <summary>
            Applies the Request.Equality filter to the query
            </summary>
            <param name="query">Query</param>
            <exception cref="T:System.ArgumentOutOfRangeException">A field name in the Request.EqualityFilter
            could not be matched with a field in current row</exception>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.IgnoreEqualityFilter(System.String)">
            <summary>
            Adds the field to the list of ignored equality filters, so that
            having this field in the Request.EqualityFilter won't raise an exception
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplyFilters(Serenity.Data.SqlQuery)">
            <summary>
            Applies all the filters including Request.EqualityFilter, Request.Criteria and
            Request.IncludeDeleted to the query.
            </summary>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ValidatePermissions">
            <summary>
            Validates if the user is allowed to query this entity type by checking <see cref="T:Serenity.Data.ReadPermissionAttribute"/>
            and <see cref="T:Serenity.Data.ServiceLookupPermissionAttribute"/> if the request is in lookup access mode.
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ValidateRequest">
            <summary>
            Validates the request by calling <see cref="M:Serenity.Services.ListRequestHandler`3.ValidatePermissions"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.CreateQuery">
            <summary>
            Creates a query instance with the dialect for current connection.
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplySortBy(Serenity.Data.SqlQuery,Serenity.Services.SortBy)">
            <summary>
            Applies a sort order to the query
            </summary>
            <param name="query">Query</param>
            <param name="sortBy">Sort order</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.ApplySort(Serenity.Data.SqlQuery)">
            <summary>
            Applies the Request.Sort order to the query. Sorts by <see cref="M:Serenity.Services.ListRequestHandler`3.GetNativeSort"/>
            if no sort columns are passed, or the list is empty.
            </summary>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.GetDistinctFields">
            <summary>
            Gets an array of distinct fields by checking Request.DistinctFields. It might be 
            different than the passed list, if the list contains an invalid field or a field
            that is not allowed to be selected, like <see cref="F:Serenity.Data.FieldFlags.NotMapped"/> and
            <see cref="F:Serenity.Data.SelectLevel.Never"/> etc.
            </summary>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.Process(System.Data.IDbConnection,`1)">
            <summary>
            Processes the list request. This is the entry point for the handler.
            </summary>
            <param name="connection">Connection</param>
            <param name="request">Request</param>
            <exception cref="T:System.ArgumentNullException">connection or the request is null</exception>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`3.List(System.Data.IDbConnection,`1)">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Cache">
            <summary>
            Gets the two level cache from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Context">
            <summary>
            Gets the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Localizer">
            <summary>
            Gets localizer from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Permissions">
            <summary>
            Gets permission service from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.User">
            <summary>
            Gets current user from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.DistinctFields">
            <summary>
            Gets list of distinct fields
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Connection">
            <summary>
            Gets current connection
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Query">
            <summary>
            Gets the select query
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Row">
            <summary>
            The entity used for querying / metadata lookup
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Request">
            <summary>
            Response object
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.Response">
            <summary>
            Response object
            </summary>
        </member>
        <member name="P:Serenity.Services.ListRequestHandler`3.StateBag">
            <summary>
            A state bag for behaviors to preserve state among their methods.
            It will be cleared before each request, e.g. Process call.
            </summary>
        </member>
        <member name="T:Serenity.Services.ListRequestHandler`1">
            <summary>
            Base generic class for list request handlers that use <see cref="T:Serenity.Services.ListRequest"/> as
            the request type, and <see cref="T:Serenity.Services.ListResponse`1"/> as the response type.
            </summary>
            <typeparam name="TRow">The entity type</typeparam>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`1.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="context">The request context</param>
        </member>
        <member name="T:Serenity.Services.ListRequestHandler`2">
            <summary>
            Base generic class for list request handlers that use a custom list request as
            the request type, and <see cref="T:Serenity.Services.ListResponse`1"/> as the response type.
            </summary>
            <typeparam name="TRow">The entity type</typeparam>
            <typeparam name="TListRequest">List request type</typeparam>
        </member>
        <member name="M:Serenity.Services.ListRequestHandler`2.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="context">Request context</param>
        </member>
        <member name="T:Serenity.Services.BaseRepository">
            <summary>
            An base class that can be used for repositories (obsolete, <see cref="T:Serenity.Services.BaseRequestHandler"/>)
            that accept a <see cref="T:Serenity.Services.IRequestContext"/> instance.
            </summary>
        </member>
        <member name="M:Serenity.Services.BaseRepository.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="context">Request context</param>
            <exception cref="T:System.ArgumentNullException">Context is null</exception>
        </member>
        <member name="P:Serenity.Services.BaseRepository.Cache">
            <summary>
            Gets cache from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.BaseRepository.Context">
            <summary>
            Gets the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.BaseRepository.Localizer">
            <summary>
            Gets text localizer from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.BaseRepository.Permissions">
            <summary>
            Gets permission service from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.BaseRepository.User">
            <summary>
            Gets the user from the request context
            </summary>
        </member>
        <member name="T:Serenity.Services.DefaultRequestContext">
            <summary>
            Default implementation for a <see cref="T:Serenity.Services.IRequestContext"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.DefaultRequestContext.#ctor(Serenity.Services.IBehaviorProvider,Serenity.Abstractions.ITwoLevelCache,Serenity.ITextLocalizer,Serenity.Abstractions.IPermissionService,Serenity.Abstractions.IUserAccessor)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="behaviors">Behavior provider</param>
            <param name="cache">Two level cache</param>
            <param name="localizer">Text localizer</param>
            <param name="permissions">Permissions</param>
            <param name="userAccessor">User access</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is null</exception>
        </member>
        <member name="P:Serenity.Services.DefaultRequestContext.Behaviors">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.DefaultRequestContext.Cache">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.DefaultRequestContext.Localizer">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.DefaultRequestContext.Permissions">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.DefaultRequestContext.User">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.IRequestContext">
            <summary>
            A service request context abstraction containing 
            services that are mostly used by all service
            handler types. This is a type similar to the HttpContext
            but is specialized for service handlers.
            </summary>
        </member>
        <member name="P:Serenity.Services.IRequestContext.Behaviors">
            <summary>
            Gets the behavior provider
            </summary>
        </member>
        <member name="P:Serenity.Services.IRequestContext.Cache">
            <summary>
            Get the two level cache
            </summary>
        </member>
        <member name="P:Serenity.Services.IRequestContext.Localizer">
            <summary>
            Gets the text localizer
            </summary>
        </member>
        <member name="P:Serenity.Services.IRequestContext.Permissions">
            <summary>
            Gets the permission service
            </summary>
        </member>
        <member name="P:Serenity.Services.IRequestContext.User">
            <summary>
            Gets current user
            </summary>
        </member>
        <member name="T:Serenity.Services.BaseRetrieveBehavior">
            <summary>
            Base class for behaviors implementing <see cref="T:Serenity.Services.IRetrieveBehavior"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.BaseRetrieveBehavior.OnValidateRequest(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseRetrieveBehavior.OnPrepareQuery(Serenity.Services.IRetrieveRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseRetrieveBehavior.OnApplyFilters(Serenity.Services.IRetrieveRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseRetrieveBehavior.OnBeforeExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseRetrieveBehavior.OnAfterExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseRetrieveBehavior.OnReturn(Serenity.Services.IRetrieveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.IRetrieveBehavior">
            <summary>
            A retrieve behavior that can be used as a mixin within a RetrieveRequestHandler lifecycle
            </summary>
            <remarks>
            A retrieve behavior instance is always cached and reused across requests, so make 
            sure you don't store anything in private variables, and its operation 
            is thread-safe. If you need to pass some state between events, 
            use handler's StateBag.
            </remarks>
        </member>
        <member name="M:Serenity.Services.IRetrieveBehavior.OnValidateRequest(Serenity.Services.IRetrieveRequestHandler)">
            <summary>Called when retrieve request is validated</summary>
            <param name="handler">Calling retrieve request handler</param>
        </member>
        <member name="M:Serenity.Services.IRetrieveBehavior.OnPrepareQuery(Serenity.Services.IRetrieveRequestHandler,Serenity.Data.SqlQuery)">
            <summary>Called when query to is built</summary>
            <param name="handler">Calling retrieve request handler</param>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.IRetrieveBehavior.OnBeforeExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <summary>Called just before query is sent to database</summary>
            <param name="handler">Calling retrieve request handler</param>
        </member>
        <member name="M:Serenity.Services.IRetrieveBehavior.OnAfterExecuteQuery(Serenity.Services.IRetrieveRequestHandler)">
            <summary>Called after query is sent to database</summary>
            <param name="handler">Calling retrieve request handler</param>
        </member>
        <member name="M:Serenity.Services.IRetrieveBehavior.OnReturn(Serenity.Services.IRetrieveRequestHandler)">
            <summary>Called before handler is returning the result</summary>
            <param name="handler">Calling retrieve request handler</param>
        </member>
        <member name="T:Serenity.Services.IRetrieveHandler`3">
            <summary>
            Interface for retrieve request handlers with custom retrieve request / response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TRetrieveRequest">Retrieve request type</typeparam>
            <typeparam name="TRetrieveResponse">Retrieve response type</typeparam>
        </member>
        <member name="M:Serenity.Services.IRetrieveHandler`3.Retrieve(System.Data.IDbConnection,`1)">
            <summary>
            Processes a Retrieve request
            </summary>
            <param name="connection">Connection</param>
            <param name="request">Retrieve request</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Services.IRetrieveHandler`1">
            <summary>
            Interface for list request handlers
            </summary>
            <typeparam name="TRow">Row type</typeparam>
        </member>
        <member name="T:Serenity.Services.IRetrieveRequestHandler">
            <summary>
            Represents a RetrieveRequestHandler. Is used with RetrieveBehavior objects.
            </summary>
        </member>
        <member name="P:Serenity.Services.IRetrieveRequestHandler.Row">
            <summary>
            Loader row
            </summary>
        </member>
        <member name="P:Serenity.Services.IRetrieveRequestHandler.Request">
            <summary>
            Retrieve request
            </summary>
        </member>
        <member name="P:Serenity.Services.IRetrieveRequestHandler.Response">
            <summary>
            Retrieve response
            </summary>
        </member>
        <member name="P:Serenity.Services.IRetrieveRequestHandler.StateBag">
            <summary>
            A state bag that can be used as storage within a request handler context
            </summary>
        </member>
        <member name="P:Serenity.Services.IRetrieveRequestHandler.Connection">
            <summary>
            Current connection
            </summary>
        </member>
        <member name="M:Serenity.Services.IRetrieveRequestHandler.AllowSelectField(Serenity.Data.Field)">
            <summary>
            Returns true if field is allowed to be selected based on permissions and SelectLevel.Never flag.
            </summary>
            <param name="field">Field</param>
            <returns>True if field is allowed to be selected</returns>
        </member>
        <member name="M:Serenity.Services.IRetrieveRequestHandler.ShouldSelectField(Serenity.Data.Field)">
            <summary>
            Returns true if field should be selected based on ColumnSelection flags.
            </summary>
            <param name="field">Field</param>
            <returns>True if field should be selected</returns>
        </member>
        <member name="P:Serenity.Services.IRetrieveRequestHandler.Context">
            <summary>
            Current request context
            </summary>
        </member>
        <member name="T:Serenity.Services.IRetrieveRequestProcessor">
            <summary>
            Abstraction for retrieve request handlers with a Process method.
            </summary>
        </member>
        <member name="M:Serenity.Services.IRetrieveRequestProcessor.Process(System.Data.IDbConnection,Serenity.Services.RetrieveRequest)">
            <summary>
            Processes the <see cref="T:Serenity.Services.RetrieveRequest"/> and returns a <see cref="T:Serenity.Services.RetrieveResponse`1"/>
            </summary>
            <param name="connection">Connection</param>
            <param name="request">Retrieve request</param>
        </member>
        <member name="T:Serenity.Services.RetrieveRequestHandler`3">
            <summary>
            Generic base class for retrieve request handlers
            </summary>
            <typeparam name="TRow">Entity type</typeparam>
            <typeparam name="TRetrieveRequest">Retrieve request type</typeparam>
            <typeparam name="TRetrieveResponse">Retrieve response type</typeparam>
        </member>
        <member name="F:Serenity.Services.RetrieveRequestHandler`3.behaviors">
            <summary>
            Lazy list of behaviors that is activated for this request
            </summary>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="context">Request context</param>
            <exception cref="T:System.ArgumentNullException">Context is null</exception>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.GetBehaviors">
            <summary>
            Gets the list of retrieve behaviors
            </summary>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.AllowSelectField(Serenity.Data.Field)">
            <summary>
            Returns true if the field should be allowed to be selected,
            based on is read permission, selectlevel.never flag, and lookup
            access mode
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.ShouldSelectField(Serenity.Data.Field)">
            <summary>
            Returns true if the field should be selected, based on
            current <see cref="T:Serenity.Services.ColumnSelection"/>, field <see cref="T:Serenity.Data.Mapping.MinSelectLevelAttribute"/>,
            the field being a not mapped (<see cref="T:Serenity.Data.Mapping.NotMappedAttribute"/>) field, table field,
            or a view / expression field.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.IsIncluded(Serenity.Data.Field)">
            <summary>
            Returns true if field is included in <see cref="P:Serenity.Services.RetrieveRequest.IncludeColumns"/>
            </summary>
            <param name="field">Field</param>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.IsIncluded(System.String)">
            <summary>
            Returns true if field is included in <see cref="P:Serenity.Services.RetrieveRequest.IncludeColumns"/>
            </summary>
            <param name="column">Field</param>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.SelectField(Serenity.Data.SqlQuery,Serenity.Data.Field)">
            <summary>
            Calls query.Select(field)
            </summary>
            <param name="query">Query</param>
            <param name="field">field</param>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.SelectFields(Serenity.Data.SqlQuery)">
            <summary>
            Calls query.Select(field) for all the fields without <see cref="F:Serenity.Data.FieldFlags.NotMapped"/>,
            and if <see cref="M:Serenity.Services.RetrieveRequestHandler`3.AllowSelectField(Serenity.Data.Field)"/> and <see cref="M:Serenity.Services.RetrieveRequestHandler`3.ShouldSelectField(Serenity.Data.Field)"/>
            returns true.
            </summary>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.PrepareQuery(Serenity.Data.SqlQuery)">
            <summary>
            Prepares query by calling <see cref="M:Serenity.Services.RetrieveRequestHandler`3.SelectFields(Serenity.Data.SqlQuery)"/>.
            </summary>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.OnBeforeExecuteQuery">
            <summary>
            Called before executing the retrieve query
            </summary>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.OnAfterExecuteQuery">
            <summary>
            Called after executing the retrieve query
            </summary>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.OnReturn">
            <summary>
            Called just before returning the response
            </summary>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.ValidatePermissions">
            <summary>
            Validates if the user is allowed to query this entity type by checking <see cref="T:Serenity.Data.ReadPermissionAttribute"/>
            and <see cref="T:Serenity.Data.ServiceLookupPermissionAttribute"/> if the request is in lookup access mode.
            </summary>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.ValidateRequest">
            <summary>
            Validates the request by calling <see cref="M:Serenity.Services.RetrieveRequestHandler`3.ValidatePermissions"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.CreateQuery">
            <summary>
            Creates a query instance with the dialect for current connection.
            </summary>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.Process(System.Data.IDbConnection,`1)">
            <summary>
            Processes the retrieve request. This is the entry point for the handler.
            </summary>
            <param name="connection">Connection</param>
            <param name="request">Request</param>
            <exception cref="T:System.ArgumentNullException">connection or the request is null</exception>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`3.Retrieve(System.Data.IDbConnection,`1)">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Cache">
            <summary>
            Gets the two level cache from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Context">
            <summary>
            Gets the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Localizer">
            <summary>
            Gets localizer from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Permissions">
            <summary>
            Gets permission service from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.User">
            <summary>
            Gets current user from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Connection">
            <summary>
            Gets current connection
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Query">
            <summary>
            Gets the select query
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Row">
            <summary>
            The entity used for querying / metadata lookup
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Request">
            <summary>
            Response object
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.Response">
            <summary>
            Response object
            </summary>
        </member>
        <member name="P:Serenity.Services.RetrieveRequestHandler`3.StateBag">
            <summary>
            A state bag for behaviors to preserve state among their methods.
            It will be cleared before each request, e.g. Process call.
            </summary>
        </member>
        <member name="T:Serenity.Services.RetrieveRequestHandler`1">
            <summary>
            Base generic class for retrieve request handlers that use <see cref="T:Serenity.Services.RetrieveRequest"/> as
            the request type, and <see cref="T:Serenity.Services.RetrieveResponse`1"/> as the response type.
            </summary>
            <typeparam name="TRow">The entity type</typeparam>
        </member>
        <member name="M:Serenity.Services.RetrieveRequestHandler`1.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="context">The request context</param>
        </member>
        <member name="T:Serenity.Services.BaseSaveBehavior">
            <summary>
            Base class for behaviors implementing <see cref="T:Serenity.Services.ISaveBehavior"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.BaseSaveBehavior.OnPrepareQuery(Serenity.Services.ISaveRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveBehavior.OnAfterSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveBehavior.OnBeforeSave(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveBehavior.OnAudit(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveBehavior.OnReturn(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveBehavior.OnSetInternalFields(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveBehavior.OnValidateRequest(Serenity.Services.ISaveRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveBehavior.OnException(Serenity.Services.ISaveRequestHandler,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.BaseSaveDeleteBehavior">
            <summary>
            Base class for behaviors implementing save and delete behavior interfaces
            </summary>
        </member>
        <member name="M:Serenity.Services.BaseSaveDeleteBehavior.OnPrepareQuery(Serenity.Services.IDeleteRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveDeleteBehavior.OnValidateRequest(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveDeleteBehavior.OnBeforeDelete(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveDeleteBehavior.OnAfterDelete(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveDeleteBehavior.OnAudit(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveDeleteBehavior.OnReturn(Serenity.Services.IDeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseSaveDeleteBehavior.OnException(Serenity.Services.IDeleteRequestHandler,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.ICreateHandler`3">
            <summary>
            Interface for create request handlers with custom request / response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TSaveRequest">Save request type</typeparam>
            <typeparam name="TSaveResponse">Save response type</typeparam>
        </member>
        <member name="M:Serenity.Services.ICreateHandler`3.Create(Serenity.Data.IUnitOfWork,`1)">
            <summary>
            Processes a Create request
            </summary>
            <param name="uow">Unit of work</param>
            <param name="request">Save request</param>
        </member>
        <member name="T:Serenity.Services.ICreateHandler`1">
            <summary>
            Interface for create request handlers
            </summary>
            <typeparam name="TRow">Row type</typeparam>
        </member>
        <member name="T:Serenity.Services.ISaveBehavior">
            <summary>
            A save behavior that can be used as a mixin within a SaveRequestHandler lifecycle
            </summary>
            <remarks>
            A save behavior instance is always cached and reused across requests, so make 
            sure you don't store anything in private variables, and its operation 
            is thread-safe. If you need to pass some state between events, 
            use handler's StateBag.
            </remarks>
        </member>
        <member name="M:Serenity.Services.ISaveBehavior.OnPrepareQuery(Serenity.Services.ISaveRequestHandler,Serenity.Data.SqlQuery)">
            <summary>Called when query to load old entity is built</summary>
            <param name="handler">Calling save request handler</param>
            <param name="query">Query</param>
        </member>
        <member name="M:Serenity.Services.ISaveBehavior.OnValidateRequest(Serenity.Services.ISaveRequestHandler)">
            <summary>Called when save request is validated</summary>
            <param name="handler">Calling save request handler</param>
        </member>
        <member name="M:Serenity.Services.ISaveBehavior.OnSetInternalFields(Serenity.Services.ISaveRequestHandler)">
            <summary>Called when internal fields in row is being set</summary>
            <param name="handler">Calling save request handler</param>
        </member>
        <member name="M:Serenity.Services.ISaveBehavior.OnBeforeSave(Serenity.Services.ISaveRequestHandler)">
            <summary>Called just before row is inserted to / updated in database</summary>
            <param name="handler">Calling save request handler</param>
        </member>
        <member name="M:Serenity.Services.ISaveBehavior.OnAfterSave(Serenity.Services.ISaveRequestHandler)">
            <summary>Called after row is inserted to / updated in database</summary>
            <param name="handler">Calling save request handler</param>
        </member>
        <member name="M:Serenity.Services.ISaveBehavior.OnAudit(Serenity.Services.ISaveRequestHandler)">
            <summary>Called after row is inserted to / updated and auditing should be performed</summary>
            <param name="handler">Calling save request handler</param>
        </member>
        <member name="M:Serenity.Services.ISaveBehavior.OnReturn(Serenity.Services.ISaveRequestHandler)">
            <summary>Called before handler is returning the result</summary>
            <param name="handler">Calling save request handler</param>
        </member>
        <member name="T:Serenity.Services.ISaveExceptionBehavior">
            <summary>
            This is an extension for save behaviors that should be called for exceptions 
            that occur during save. It could be useful to preview the exception and
            raise another exception for FK / PK database errors etc.
            </summary>
        </member>
        <member name="M:Serenity.Services.ISaveExceptionBehavior.OnException(Serenity.Services.ISaveRequestHandler,System.Exception)">
            <summary>Called when an exception occurs during save</summary>
            <param name="handler">Calling save request handler</param>
            <param name="exception">Exception occurred</param>
        </member>
        <member name="T:Serenity.Services.ISaveHandler`3">
            <summary>
            Interface for save request handlers with custom request / response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TSaveRequest">Save request type</typeparam>
            <typeparam name="TSaveResponse">Save response type</typeparam>
        </member>
        <member name="T:Serenity.Services.ISaveHandler`1">
            <summary>
            Interface for save request handlers
            </summary>
            <typeparam name="TRow">Row type</typeparam>
        </member>
        <member name="T:Serenity.Services.ISaveRequestHandler">
            <summary>
            Represents a SaveRequestHandler. Is used with SaveBehavior objects.
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.Old">
            <summary>
            Old row, if any, otherwise null
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.Row">
            <summary>
            New row
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.IsCreate">
            <summary>
            Is this an INSERT operation?
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.IsUpdate">
            <summary>
            Is this an UPDATE operation?
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.Request">
            <summary>
            Save request
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.Response">
            <summary>
            Save response
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.StateBag">
            <summary>
            A state bag that can be used as storage within a request handler context
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.Connection">
            <summary>
            Current connection
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.UnitOfWork">
            <summary>
            Current transaction
            </summary>
        </member>
        <member name="P:Serenity.Services.ISaveRequestHandler.Context">
            <summary>
            Current request context
            </summary>
        </member>
        <member name="T:Serenity.Services.ISaveRequestProcessor">
            <summary>
            Abstraction for save request handlers with a Process method.
            </summary>
        </member>
        <member name="M:Serenity.Services.ISaveRequestProcessor.Process(Serenity.Data.IUnitOfWork,Serenity.Services.ISaveRequest,Serenity.Services.SaveRequestType)">
            <summary>
            Processes the <see cref="T:Serenity.Services.ISaveRequest"/> and returns a <see cref="T:Serenity.Services.SaveResponse"/>
            </summary>
            <param name="uow">Unit of work</param>
            <param name="request">List request</param>
            <param name="type">Save request type, Create or Update</param>
        </member>
        <member name="T:Serenity.Services.IUpdateHandler`3">
            <summary>
            Interface for update request handlers with custom request / response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TSaveRequest">Save request type</typeparam>
            <typeparam name="TSaveResponse">Save response type</typeparam>
        </member>
        <member name="M:Serenity.Services.IUpdateHandler`3.Update(Serenity.Data.IUnitOfWork,`1)">
            <summary>
            Processes an Update request
            </summary>
            <param name="uow">Unit of work</param>
            <param name="request">Save request</param>
        </member>
        <member name="T:Serenity.Services.IUpdateHandler`1">
            <summary>
            Interface for update request handlers
            </summary>
            <typeparam name="TRow">Row type</typeparam>
        </member>
        <member name="T:Serenity.Services.SaveRequestHandler`3">
            <summary>
            Generic base class for save request handlers
            </summary>
            <typeparam name="TRow">Entity type</typeparam>
            <typeparam name="TSaveRequest">Save request type</typeparam>
            <typeparam name="TSaveResponse">Save response type</typeparam>
        </member>
        <member name="F:Serenity.Services.SaveRequestHandler`3.behaviors">
            <summary>
            Lazy list of behaviors that is activated for this request
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="context">Request context</param>
            <exception cref="T:System.ArgumentNullException">context is null</exception>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.GetBehaviors">
            <summary>
            Gets the list of save behaviors
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.BeforeSave">
            <summary>
            Called before executing the insert/update statement
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.AfterSave">
            <summary>
            Called after executing the insert/update statement
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ClearNonTableAssignments">
            <summary>
            Clears assignment for fields that are marked as non table field,
            e.g. fields that are not mapped, view, expression etc.
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.PerformAuditing">
            <summary>
            Performs auditing
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.InvokeSaveAction(System.Action)">
            <summary>
            Invokes the passed save action method
            </summary>
            <param name="action">Save action method</param>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ExecuteSave">
            <summary>
            Executes the actual SQL save operation
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.GetDisplayOrderFilter">
            <summary>
            Gets the display order filter for current group, if the entity 
            implements <see cref="T:Serenity.Data.IDisplayOrderRow"/> interface
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.GetEditableFields(System.Collections.Generic.HashSet{Serenity.Data.Field})">
            <summary>
            Gets the list of editable fields. These are fields that have
            Insertable (if Create), or Updatable (if Update) flags,
            and have the insert or update permission based on the type
            of the current operation.
            </summary>
            <param name="editable"></param>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.GetRequiredFields(System.Collections.Generic.HashSet{Serenity.Data.Field},System.Collections.Generic.HashSet{Serenity.Data.Field})">
            <summary>
            Gets the list of required fields based on editable list, and <see cref="F:Serenity.Data.FieldFlags.NotNull"/>
            </summary>
            <param name="required">List of required fields to populate</param>
            <param name="editable">Editable fields returned from
            <see cref="M:Serenity.Services.SaveRequestHandler`3.GetEditableFields(System.Collections.Generic.HashSet{Serenity.Data.Field})"/></param>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.HandleDisplayOrder(System.Boolean)">
            <summary>
            Handles display order field calculation before and after save
            </summary>
            <param name="afterSave">True if called after save</param>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.HandleNonEditable(Serenity.Data.Field)">
            <summary>
            Handles assignment to a non-editable field. If the field did not change
            in an update operation, it will be ignored by clearing the assignment. 
            For non-table fields it will also be ignored.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.LoadOldEntity">
            <summary>
            Loads the old entity for an update operation
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.OnReturn">
            <summary>
            Called just before the response is returned
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.PrepareQuery">
            <summary>
            Prepares the query for selecting old record in an update operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.Process(Serenity.Data.IUnitOfWork,`1,Serenity.Services.SaveRequestType)">
            <summary>
            Processes the save request. This is the entry point for the handler.
            </summary>
            <param name="unitOfWork">Unit of work</param>
            <param name="request">Request</param>
            <param name="requestType">Type of request, Create, Update or Auto</param>
            <exception cref="T:System.ArgumentNullException">unitofWork or request is null</exception>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.SetDefaultValue(Serenity.Data.Field)">
            <summary>
            Sets the default value (<see cref="T:System.ComponentModel.DefaultValueAttribute"/>) for the field
            </summary>
            <param name="field">Field</param>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.SetDefaultValues">
            <summary>
            Sets the default values for all fields (<see cref="T:System.ComponentModel.DefaultValueAttribute"/>)
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.SetInternalFields">
            <summary>
            Sets values for internal fields
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.SetTrimToEmptyFields">
            <summary>
            Sets values for <see cref="F:Serenity.Data.FieldFlags.TrimToEmpty"/> fields.
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ValidateEditableFields(System.Collections.Generic.HashSet{Serenity.Data.Field})">
            <summary>
            Validates editable fields, e.g. checks if the assigned fields
            are all in the editable set. Calls <see cref="M:Serenity.Services.SaveRequestHandler`3.HandleNonEditable(Serenity.Data.Field)"/>
            if not.
            </summary>
            <param name="editable">Set of editable fields</param>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ValidateEditable">
            <summary>
            Validates editable fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ValidateRequired(System.Collections.Generic.HashSet{Serenity.Data.Field})">
            <summary>
            Validates required fields
            </summary>
            <param name="editableFields">List of editable fields</param>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ValidateRequest">
            <summary>
            Validates the request by checking insert / update permissions.
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ValidateFieldValues">
            <summary>
            Validates field values via <see cref="T:Serenity.ICustomValidator"/> interface.
            </summary>
            <exception cref="T:Serenity.Services.ValidationError">One of the fields has an invalid value</exception>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.CustomValidate(Serenity.Services.RowValidationContext,Serenity.Data.Field,Serenity.ICustomValidator)">
            <summary>
            Calls custom validator
            </summary>
            <param name="context">Validation context</param>
            <param name="field">Field</param>
            <param name="validator">Custom validator</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ValidateIsActive">
            <summary>
            Validates that record is not soft deleted
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ValidateAndClearIdField">
            <summary>
            Validates and clears the ID field
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.ValidatePermissions">
            <summary>
            Validates user permissions by checking <see cref="T:Serenity.Data.InsertPermissionAttribute"/>
            and <see cref="T:Serenity.Data.UpdatePermissionAttribute"/>, and <see cref="T:Serenity.Data.ModifyPermissionAttribute"/>
            or <see cref="T:Serenity.Data.ReadPermissionAttribute" /> if others are not found.
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.InvalidateCacheOnCommit">
            <summary>
            Attaches an handler to unit of work's OnCommit event to invalidate 
            the cache items related to this row's cache group
            </summary>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.Create(Serenity.Data.IUnitOfWork,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`3.Update(Serenity.Data.IUnitOfWork,`1)">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Cache">
            <summary>
            Gets the two level cache from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Context">
            <summary>
            Gets the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Localizer">
            <summary>
            Gets localizer from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Permissions">
            <summary>
            Gets permission service from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.User">
            <summary>
            Gets current user from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Connection">
            <summary>
            Gets connection
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.UnitOfWork">
            <summary>
            Gets the current unit of work
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Old">
            <summary>
            The old entity for update
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Row">
            <summary>
            The inserted entity for Create and new entity for Update
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.IsCreate">
            <summary>
            Returns true if this is a Create operation
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.IsUpdate">
            <summary>
            Returns true if this is an Update operation
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Request">
            <summary>
            Request object
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.Response">
            <summary>
            Response object
            </summary>
        </member>
        <member name="P:Serenity.Services.SaveRequestHandler`3.StateBag">
            <summary>
            A state bag for behaviors to preserve state among their methods.
            It will be cleared before each request, e.g. Process call.
            </summary>
        </member>
        <member name="T:Serenity.Services.SaveRequestHandler`1">
            <summary>
            Base generic class for save request handlers that use <see cref="T:Serenity.Services.SaveRequest`1"/> as
            the request type, and <see cref="T:Serenity.Services.SaveResponse"/> as the response type.
            </summary>
            <typeparam name="TRow">The entity type</typeparam>
        </member>
        <member name="M:Serenity.Services.SaveRequestHandler`1.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="context">Request context</param>
        </member>
        <member name="T:Serenity.Services.SaveRequestType">
            <summary>
            Save request type for save request processors
            </summary>
        </member>
        <member name="F:Serenity.Services.SaveRequestType.Create">
            <summary>
            Create
            </summary>
        </member>
        <member name="F:Serenity.Services.SaveRequestType.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:Serenity.Services.SaveRequestType.Auto">
            <summary>
            Auto determine from the request.EntityId parameter
            </summary>
        </member>
        <member name="T:Serenity.Services.BaseUndeleteBehavior">
            <summary>
            Base class for types implementing <see cref="T:Serenity.Services.IUndeleteBehavior"/>
            </summary>
        </member>
        <member name="M:Serenity.Services.BaseUndeleteBehavior.OnPrepareQuery(Serenity.Services.IUndeleteRequestHandler,Serenity.Data.SqlQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseUndeleteBehavior.OnValidateRequest(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseUndeleteBehavior.OnBeforeUndelete(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseUndeleteBehavior.OnAfterUndelete(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseUndeleteBehavior.OnAudit(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseUndeleteBehavior.OnReturn(Serenity.Services.IUndeleteRequestHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Services.BaseUndeleteBehavior.OnException(Serenity.Services.IUndeleteRequestHandler,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Services.IUndeleteBehavior">
            <summary>
            A undelete behavior that can be used as a mixin within a UndeleteRequestHandler lifecycle
            </summary>
            <remarks>
            A behavior instance is always cached and reused across requests, so make 
            sure you don't store anything in private variables, and its operation 
            is thread-safe. If you need to pass some state between events, 
            use handler's StateBag.
            </remarks>
        </member>
        <member name="M:Serenity.Services.IUndeleteBehavior.OnPrepareQuery(Serenity.Services.IUndeleteRequestHandler,Serenity.Data.SqlQuery)">
            <summary>Called when query to load old entity is built</summary>
            <param name="handler">Calling save request handler</param>
            <param name="query">The query</param>
        </member>
        <member name="M:Serenity.Services.IUndeleteBehavior.OnValidateRequest(Serenity.Services.IUndeleteRequestHandler)">
            <summary>Called when undelete request is validated</summary>
            <param name="handler">Calling undelete request handler</param>
        </member>
        <member name="M:Serenity.Services.IUndeleteBehavior.OnBeforeUndelete(Serenity.Services.IUndeleteRequestHandler)">
            <summary>Called just before row is undeleted in database</summary>
            <param name="handler">Calling undelete request handler</param>
        </member>
        <member name="M:Serenity.Services.IUndeleteBehavior.OnAfterUndelete(Serenity.Services.IUndeleteRequestHandler)">
            <summary>Called after row is undeleted in database</summary>
            <param name="handler">Calling undelete request handler</param>
        </member>
        <member name="M:Serenity.Services.IUndeleteBehavior.OnAudit(Serenity.Services.IUndeleteRequestHandler)">
            <summary>Called after row is undeleted and auditing should be performed</summary>
            <param name="handler">Calling undelete request handler</param>
        </member>
        <member name="M:Serenity.Services.IUndeleteBehavior.OnReturn(Serenity.Services.IUndeleteRequestHandler)">
            <summary>Called before handler is returning the result</summary>
            <param name="handler">Calling undelete request handler</param>
        </member>
        <member name="T:Serenity.Services.IUndeleteExceptionBehavior">
            <summary>
            This is an extension for undelete behaviors that should be called for exceptions 
            that occur during delete. It could be useful to preview the exception and
            raise another exception for FK / PK database errors etc.
            </summary>
        </member>
        <member name="M:Serenity.Services.IUndeleteExceptionBehavior.OnException(Serenity.Services.IUndeleteRequestHandler,System.Exception)">
            <summary>Called when an exception occurs during undelete</summary>
            <param name="handler">Calling undelete request handler</param>
            <param name="exception">Exception occurred</param>
        </member>
        <member name="T:Serenity.Services.IUndeleteHandler`3">
            <summary>
            Interface for undelete request handlers with custom undelete request / response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
            <typeparam name="TUndeleteRequest">Undelete request type</typeparam>
            <typeparam name="TUndeleteResponse">Undelete response type</typeparam>
        </member>
        <member name="M:Serenity.Services.IUndeleteHandler`3.Undelete(Serenity.Data.IUnitOfWork,`1)">
            <summary>
            Processes a undelete request
            </summary>
            <param name="uow">Unit of work</param>
            <param name="request">The undelete request</param>
        </member>
        <member name="T:Serenity.Services.IUndeleteHandler`1">
            <summary>
            Interface for undelete request handlers that use <see cref="T:Serenity.Services.UndeleteRequest"/> as request,
            and <see cref="T:Serenity.Services.UndeleteResponse"/> as response types.
            </summary>
            <typeparam name="TRow">Row type</typeparam>
        </member>
        <member name="T:Serenity.Services.IUndeleteRequestHandler">
            <summary>
            Represents a UndeleteRequestHandler. Is used with UndeleteBehavior objects.
            </summary>
        </member>
        <member name="P:Serenity.Services.IUndeleteRequestHandler.Row">
            <summary>
            New row
            </summary>
        </member>
        <member name="P:Serenity.Services.IUndeleteRequestHandler.Request">
            <summary>
            Undelete request
            </summary>
        </member>
        <member name="P:Serenity.Services.IUndeleteRequestHandler.Response">
            <summary>
            Delete response
            </summary>
        </member>
        <member name="P:Serenity.Services.IUndeleteRequestHandler.StateBag">
            <summary>
            A state bag that can be used as storage within a request handler context
            </summary>
        </member>
        <member name="P:Serenity.Services.IUndeleteRequestHandler.Connection">
            <summary>
            Current connection
            </summary>
        </member>
        <member name="P:Serenity.Services.IUndeleteRequestHandler.UnitOfWork">
            <summary>
            Current transaction
            </summary>
        </member>
        <member name="P:Serenity.Services.IUndeleteRequestHandler.Context">
            <summary>
            Current request context
            </summary>
        </member>
        <member name="T:Serenity.Services.IUndeleteRequestProcessor">
            <summary>
            Abstraction for undelete request handlers with a Process method.
            </summary>
        </member>
        <member name="M:Serenity.Services.IUndeleteRequestProcessor.Process(Serenity.Data.IUnitOfWork,Serenity.Services.UndeleteRequest)">
            <summary>
            Processes the <see cref="T:Serenity.Services.UndeleteRequest"/> and returns a <see cref="T:Serenity.Services.UndeleteResponse"/>
            </summary>
            <param name="uow">Unit of work</param>
            <param name="request">Delete request</param>
        </member>
        <member name="T:Serenity.Services.UndeleteRequestHandler`3">
            <summary>
            Generic base class for undelete request handlers
            </summary>
            <typeparam name="TRow">Entity type</typeparam>
            <typeparam name="TUndeleteRequest">Undelete request type</typeparam>
            <typeparam name="TUndeleteResponse">Undelete response type</typeparam>
        </member>
        <member name="F:Serenity.Services.UndeleteRequestHandler`3.behaviors">
            <summary>
            Lazy list of behaviors that is activated for this request
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="context">Request context</param>
            <exception cref="T:System.ArgumentNullException">Context is null</exception>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.GetBehaviors">
            <summary>
            Gets the list of undelete behaviors
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.Connection">
            <summary>
            Gets current connection from the unit of work
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.OnBeforeUndelete">
            <summary>
            Method that is executed before the actual SQL undelete operation.
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.GetDisplayOrderFilter">
            <summary>
            Gets the display order filter for current group, if the entity 
            implements <see cref="T:Serenity.Data.IDisplayOrderRow"/> interface
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.OnAfterUndelete">
            <summary>
            Method that is executed after the actual SQL undelete operation
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.ValidateRequest">
            <summary>
            Validates the parameters of the undelete request.
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.PrepareQuery(Serenity.Data.SqlQuery)">
            <summary>
            Prepares the query used to select the existing record
            </summary>
            <param name="query">The query</param>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.LoadEntity">
            <summary>
            Loads the entity that is going to be undeleted
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.InvokeUndeleteAction(System.Action)">
            <summary>
            Invokes the passed undelete action method
            </summary>
            <param name="action">Undelete action method</param>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.ExecuteUndelete">
            <summary>
            Executes the actual SQL undelete/update operation
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.InvalidateCacheOnCommit">
            <summary>
            Attaches a cache invalidation call to to OnCommit 
            callback of the current unit of work. This would clear
            cached items related to this row type.
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.IsDeleted">
            <summary>
            Checks that row type implements one of IIsActiveDeletedRow, IIsDeletedRow
            or IDeleteLogRow interfaces and it is actual marked as deleted
            </summary>
            <exception cref="T:System.NotImplementedException">Row does not implement any of known interfaces</exception>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.DoAudit">
            <summary>
            Performs auditing
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.OnReturn">
            <summary>
            The method that is called just before the response is returned.
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.ValidatePermissions">
            <summary>
            Validates the user permissions for undelete operation
            </summary>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.Process(Serenity.Data.IUnitOfWork,`1)">
            <summary>
            Processes the undelete request. This is the entry point for the handler.
            </summary>
            <param name="unitOfWork">Unit of work</param>
            <param name="request">Request</param>
            <exception cref="T:System.ArgumentNullException">unitofWork is null</exception>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`3.Undelete(Serenity.Data.IUnitOfWork,`1)">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.Cache">
            <summary>
            Gets the two level cache from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.Context">
            <summary>
            Gets the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.Localizer">
            <summary>
            Gets localizer from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.Permissions">
            <summary>
            Gets permission service from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.User">
            <summary>
            Gets current user from the request context
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.UnitOfWork">
            <summary>
            Gets current unit of work
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.Row">
            <summary>
            The entity
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.Request">
            <summary>
            Request object
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.Response">
            <summary>
            Response object
            </summary>
        </member>
        <member name="P:Serenity.Services.UndeleteRequestHandler`3.StateBag">
            <summary>
            A state bag for behaviors to preserve state among their methods.
            It will be cleared before each request, e.g. Process call.
            </summary>
        </member>
        <member name="T:Serenity.Services.UndeleteRequestHandler`1">
            <summary>
            Base generic class for undelete request handlers that use <see cref="T:Serenity.Services.UndeleteRequest"/> as
            the request type, and <see cref="T:Serenity.Services.UndeleteResponse"/> as the response type.
            </summary>
            <typeparam name="TRow">The entity type</typeparam>
        </member>
        <member name="M:Serenity.Services.UndeleteRequestHandler`1.#ctor(Serenity.Services.IRequestContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="context">The request context</param>
        </member>
        <member name="T:Serenity.Services.UploadedFile">
            <summary>
            Uploaded file item which is used by multiple upload editors
            to store file information in a string field as JSON array.
            </summary>
        </member>
        <member name="P:Serenity.Services.UploadedFile.Filename">
            <summary>
            File path
            </summary>
        </member>
        <member name="P:Serenity.Services.UploadedFile.OriginalName">
            <summary>
            Original file name
            </summary>
        </member>
        <member name="T:Serenity.Reporting.BaseReport">
            <summary>
            Base class for reports that implement <see cref="T:Serenity.Reporting.IReport"/> and optionally
            <see cref="T:Serenity.Reporting.IReportWithAdditionalData"/>
            </summary>
        </member>
        <member name="M:Serenity.Reporting.BaseReport.GetData">
            <inheritdoc />
        </member>
        <member name="M:Serenity.Reporting.BaseReport.GetAdditionalData">
            <inheritdoc />
        </member>
        <member name="T:Serenity.Reporting.IDataOnlyReport">
            <summary>
            Interface for reports that only contain data, e.g. no design.
            These are usually Excel/CSV etc. export type of reports.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IDataOnlyReport.GetColumnList">
            <summary>
            Gets the list of columns to export.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.IDataReportExcelRenderer">
            <summary>
            Excel exporter interface for data only reports. This is usually
            implemented by EPPlus based exporter. The interface abstracts
            that dependency.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IDataReportExcelRenderer.Render(Serenity.Reporting.IDataOnlyReport)">
            <summary>
            Renders the specified report to Excel format.
            </summary>
            <param name="report">The report.</param>
        </member>
        <member name="T:Serenity.Reporting.IExcelExporter">
            <summary>
            Interface for Excel exporters
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IExcelExporter.Export(System.Collections.IEnumerable,System.Collections.Generic.IEnumerable{Serenity.Reporting.ReportColumn})">
            <summary>
            Exports the specified data to Excel format
            </summary>
            <param name="data">The data.</param>
            <param name="columns">The columns to export.</param>
        </member>
        <member name="M:Serenity.Reporting.IExcelExporter.Export(System.Collections.IEnumerable,System.Type)">
            <summary>
            Exports the specified data to Excel format
            </summary>
            <param name="data">The data.</param>
            <param name="columnsType">The columns type that will be used
            to determine report columns to export.</param>
        </member>
        <member name="M:Serenity.Reporting.IExcelExporter.Export(System.Collections.IEnumerable,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Exports the specified data to Excel format
            </summary>
            <param name="data">The data.</param>
            <param name="columnsType">The columns type that will be used
            to determine available report columns to export.</param>
            <param name="exportColumns">Determines the names and order of 
            columns to be exported</param>
        </member>
        <member name="T:Serenity.Reporting.ReportColumn">
            <summary>
            Information about a report column
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportColumn.Name">
            <summary>
            The property name or field name of the column
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportColumn.Title">
            <summary>
            Title for the column.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportColumn.Width">
            <summary>
            Preferred with of the column.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportColumn.DataType">
            <summary>
            The data type of values for the column.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportColumn.Format">
            <summary>
            The format string to use
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportColumn.WrapText">
            <summary>
            Should text be wrapped
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportColumn.Decorator">
            <summary>
            Decorator to use for the column
            </summary>
        </member>
        <member name="T:Serenity.Reporting.ReportColumnConverter">
            <summary>
            Contains methods to extract ReportColumns from other types.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ReportColumnConverter.FromFieldInfo(System.Reflection.FieldInfo,Serenity.ITextLocalizer,Serenity.Data.Field)">
            <summary>
            Extracts a report column from a <see cref="T:System.Reflection.FieldInfo"/>
            </summary>
            <param name="field">The field object</param>
            <param name="localizer">Text localizer</param>
            <param name="baseField">Base field object</param>
        </member>
        <member name="M:Serenity.Reporting.ReportColumnConverter.FromPropertyInfo(System.Reflection.PropertyInfo,Serenity.ITextLocalizer,Serenity.Data.Field)">
            <summary>
            Extracts a report column from a <see cref="T:System.Reflection.PropertyInfo"/>
            </summary>
            <param name="property">The property object</param>
            <param name="localizer">Text localizer</param>
            <param name="baseField">Base field object</param>
        </member>
        <member name="M:Serenity.Reporting.ReportColumnConverter.ObjectTypeToList(System.Type,System.IServiceProvider,Serenity.ITextLocalizer)">
            <summary>
            Extracts list of report columns from a type, which is usually a Columns type.
            </summary>
            <param name="objectType">The columns type</param>
            <param name="serviceProvider">Service provider</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Reporting.ReportColumnConverter.FromField(Serenity.Data.Field,Serenity.ITextLocalizer)">
            <summary>
            Extracts a report column from a <see cref="T:Serenity.Data.Field"/> object.
            </summary>
            <param name="field">The field object</param>
            <param name="localizer">Text localizer</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reporting.ReportColumnConverter.EntityTypeToList(Serenity.Data.IRow,Serenity.ITextLocalizer)">
            <summary>
            Extracts report columns from an entity type (<see cref="T:Serenity.Data.IRow"/>)
            </summary>
            <param name="instance">The row instance</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="T:Serenity.Reporting.TabularDataReport">
            <summary>
            An implementation of a data only report which is used mainly for Excel export.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.TabularDataReport.Data">
            <summary>
            The report data
            </summary>
        </member>
        <member name="P:Serenity.Reporting.TabularDataReport.ColumnsType">
            <summary>
            Columns type to use for export. This is used to determine
            the list of columns and their formats, decorator types etc.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.TabularDataReport.ExportColumns">
            <summary>
            List of columns to export. If <see cref="P:Serenity.Reporting.TabularDataReport.ColumnsType"/> or 
            <see cref="P:Serenity.Reporting.TabularDataReport.ColumnList"/> is passed this is used to 
            subset the columns. Otherwise it contains the list of 
            columns to export.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.TabularDataReport.ServiceProvider">
            <summary>
            Service provider.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.TabularDataReport.ColumnList">
            <summary>
            The column list
            </summary>
        </member>
        <member name="F:Serenity.Reporting.TabularDataReport.CacheGroupKey">
            <summary>
            A group key for caching
            </summary>
        </member>
        <member name="M:Serenity.Reporting.TabularDataReport.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.TabularDataReport.#ctor(System.Collections.IEnumerable,System.Collections.Generic.IEnumerable{Serenity.Reporting.ReportColumn})">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="data">The data objects</param>
            <param name="columns">List of report columns</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Serenity.Reporting.TabularDataReport.#ctor(System.Collections.IEnumerable,System.Type,System.IServiceProvider)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="data">The data objects</param>
            <param name="columnsType">The columns type</param>
            <param name="serviceProvider">Service provider that will be used to
            extract PropertyItems from the columns type</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Serenity.Reporting.TabularDataReport.#ctor(System.Collections.IEnumerable,System.Type,System.Collections.Generic.IEnumerable{System.String},System.IServiceProvider)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="data">The data objects</param>
            <param name="columnsType">The columns type</param>
            <param name="exportColumns">The list of column property names to export</param>
            <param name="serviceProvider">Service provider that will be used to
            extract PropertyItems from the columns type</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Serenity.Reporting.TabularDataReport.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Reporting.TabularDataReport.GetColumnList">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Reporting.TabularDataReport.GetColumnListFor(System.Type,System.Collections.Generic.IEnumerable{System.String},System.IServiceProvider)">
            <summary>
            Extracts report columns from a columns type
            </summary>
            <param name="columnsType">The columns type</param>
            <param name="exportColumns">The list of column property names to export</param>
            <param name="serviceProvider">Service provider</param>
            <exception cref="T:System.ArgumentNullException">columnsType or serviceProvider is null</exception>
        </member>
        <member name="M:Serenity.Reporting.TabularDataReport.FromPropertyItem(Serenity.ComponentModel.PropertyItem,Serenity.Data.Field,System.Reflection.PropertyInfo,System.IServiceProvider,Serenity.ITextLocalizer)">
            <summary>
            Creates a <see cref="T:Serenity.Reporting.ReportColumn"/> from a <see cref="T:Serenity.ComponentModel.PropertyItem"/>
            </summary>
            <param name="item">Property item</param>
            <param name="field">Optional field object</param>
            <param name="property">PropertyInfo if any</param>
            <param name="provider">Service provider</param>
            <param name="localizer">Text localizer</param>
            <exception cref="T:System.ArgumentNullException">item or localizer is null</exception>
        </member>
        <member name="T:Serenity.Reporting.BaseCellDecorator">
            <summary>
            Base class for cell decorators, implementing all
            <see cref="T:Serenity.Reporting.ICellDecorator"/> members.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.BaseCellDecorator.Item">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.BaseCellDecorator.Name">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.BaseCellDecorator.Value">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.BaseCellDecorator.Background">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.BaseCellDecorator.Foreground">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.BaseCellDecorator.Format">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Reporting.BaseCellDecorator.Decorate">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Reporting.CellDecoratorAttribute">
            <summary>
            Attribute used to set the <see cref="T:Serenity.Reporting.ICellDecorator"/> type
            for a property.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.CellDecoratorAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="decorator">Decorator type</param>
        </member>
        <member name="P:Serenity.Reporting.CellDecoratorAttribute.DecoratorType">
            <summary>
            Gets the decorator type.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.EnumDecorator">
            <summary>
            A decorator used to export enum name instead of the enum integer value.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.EnumDecorator.#ctor(System.Type,Serenity.ITextLocalizer)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="enumType">Enum type</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Reporting.EnumDecorator.Decorate">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Reporting.ICellDecorator">
            <summary>
            Cell decorator interface mainly used for Excel export
            styling.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ICellDecorator.Item">
            <summary>
            The input item
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ICellDecorator.Name">
            <summary>
            The column name
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ICellDecorator.Value">
            <summary>
            Value of the current cell. If desired, it can be 
            modified by the decorator.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ICellDecorator.Background">
            <summary>
            Assign to set background color of the current cell
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ICellDecorator.Foreground">
            <summary>
            Assign to set text color of the current cell
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ICellDecorator.Format">
            <summary>
            Assign to set display format of the current cell.
            The format should be in Excel formatting style.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ICellDecorator.Decorate">
            <summary>
            The decorator should apply its formatting 
            in this method. It is called by the exporter.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.HtmlToPdfOptions">
            <summary>
            HTML to PDF options
            </summary>
        </member>
        <member name="M:Serenity.Reporting.HtmlToPdfOptions.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.Url">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.AdditionalUrls">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.Cookies">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.TimeoutSeconds">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.UsePrintMediaType">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.PrintBackground">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.PageHeight">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.PageSize">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.PageWidth">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.SmartShrinking">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.Dpi">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.Landscape">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.Zoom">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.MarginLeft">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.MarginRight">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.MarginBottom">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.MarginTop">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.HeaderHtmlUrl">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.FooterHtmlUrl">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.FooterHeaderReplace">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.CustomArgs">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.Reporting.HtmlToPdfOptions.MarginsAll">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Reporting.ICustomizeHtmlToPdf">
            <summary>
            An interface reports can implement to customize HTML to PDF
            converter settings.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ICustomizeHtmlToPdf.Customize(Serenity.Reporting.IHtmlToPdfOptions)">
            <summary>
            Method that is called to customize HTML to PDF options
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:Serenity.Reporting.IHtmlReportPdfRenderer">
            <summary>
            PDF exporter interface for HTML reports.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IHtmlReportPdfRenderer.Render(Serenity.Reporting.IReport,System.String,System.String)">
            <summary>
            Renders the specified report to PDF.
            </summary>
            <param name="report">The report.</param>
            <param name="reportKey">The report key, if it is not specified in report type as an attribute.
            Will be ignored if report will be rendered directly, e.g. not via a callback.</param>
            <param name="reportParams">The set of report params usually a serialized JSON object 
            to be passed to the URL callback. These params should already be applied to the passed
            report instance. Will be ignored if the report is rendered directly, e.g. without a callback.</param>
        </member>
        <member name="T:Serenity.Reporting.IHtmlReportRenderUrlBuilder">
            <summary>
            Interface abstraction to get HTML report render URL
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IHtmlReportRenderUrlBuilder.GetRenderUrl(Serenity.Reporting.IReport,System.String,System.String)">
            <summary>
            Gets the render URL for the specified report
            </summary>
            <param name="report">The report.</param>
            <param name="reportKey">The report key, if it is not specified in report type as an attribute.
            Will be ignored if report will be rendered directly, e.g. not via a callback.</param>
            <param name="reportParams">The set of report params usually a serialized JSON object 
            to be passed to the URL callback. These params should already be applied to the passed
            report instance. Will be ignored if the report is rendered directly, e.g. without a callback.</param>
        </member>
        <member name="M:Serenity.Reporting.IHtmlReportRenderUrlBuilder.GetCookiesToForward">
            <summary>
            Gets cookies to forward like authentication / language preference etc. to the target converter
            </summary>
        </member>
        <member name="T:Serenity.Reporting.IHtmlToPdfConverter">
            <summary>
            Abstraction for service that converts HTML to PDF
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IHtmlToPdfConverter.Convert(Serenity.Reporting.IHtmlToPdfOptions)">
            <summary>
            Converts HTML to PDF
            </summary>
            <param name="options">Conversion options</param>
        </member>
        <member name="T:Serenity.Reporting.IHtmlToPdfOptions">
            <summary>
            Set of options for HTML to PDF converter (WKHTMLToPdf)
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.Url">
            <summary>
            The URL that is being converted
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.AdditionalUrls">
            <summary>
            Optional list of URLs that should be converted and appended to the document
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.Cookies">
            <summary>
            Contains cookies that will be sent to target URL
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.TimeoutSeconds">
            <summary>
            Timeout for converter in seconds (default 300 seconds / 5 min)
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.UsePrintMediaType">
            <summary>
            Use Print media type to render document (default true)
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.PrintBackground">
            <summary>
            Print background image if any (default true)
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.PageSize">
            <summary>
            Page size constant like "A4", "Letter" etc. Default value is A4
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.PageWidth">
            <summary>
            Page width like 21cm. Default value is unspecified.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.PageHeight">
            <summary>
            Page height like 15cm. Default value is unspecified.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.SmartShrinking">
            <summary>
            Use smart shrinking. Default is false.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.Dpi">
            <summary>
            Document DPI. Default is unspecified.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.Landscape">
            <summary>
            Landscape page layout. Default is false.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.Zoom">
            <summary>
            Zoom value like "0.33". Default is unspecified.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.MarginsAll">
            <summary>
            Use this to set all margins (left, right, bottom, top) at once
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.MarginLeft">
            <summary>
            Page left margin, default is unspecified.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.MarginRight">
            <summary>
            Page right margin, default is unspecified.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.MarginBottom">
            <summary>
            Page bottom margin, default is unspecified.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.MarginTop">
            <summary>
            Page top margin, default is unspecified.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.HeaderHtmlUrl">
            <summary>
            Url of header HTML page
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.FooterHtmlUrl">
            <summary>
            Url of footer HTML page
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.FooterHeaderReplace">
            <summary>
            A set of key value pairs that should be search replaced in footer and header
            </summary>
        </member>
        <member name="P:Serenity.Reporting.IHtmlToPdfOptions.CustomArgs">
            <summary>
            A list of custom arguments to pass to HTML to PDF converter
            </summary>
        </member>
        <member name="T:Serenity.Reporting.IWKHtmlToPdfConverter">
            <summary>
            WKHTMLToPdf converter interface
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IWKHtmlToPdfConverter.GetUtilityExePath">
            <summary>
            Gets the path to the wkhtmltopdf executable
            </summary>
        </member>
        <member name="T:Serenity.Reporting.UseChromeHtmlToPdfAttribute">
            <summary>
            Marks a report so that it should use Chrome instead of WKHTML
            </summary>
        </member>
        <member name="T:Serenity.Reporting.ICustomFileName">
            <summary>
            Interface to customize the output file name, 
            e.g. name of the XLSX or PDF file outputted by
            reports. By default, reports has output file name
            of format "{ReportKey}_yyyyMMdd_HHmmss.ext".
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ICustomFileName.GetFileName">
            <summary>
            Returns the custom output file name.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.IExternalReport">
            <summary>
            This interface marks a report class as a report that should open an external URL, e.g. an SSRS report url, or any arbitrary site
            The URL should be returned from GetData() method of report class.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.IReport">
            <summary>
            The basic interface for all reports
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IReport.GetData">
            <summary>
            Returns the data for the report
            </summary>
        </member>
        <member name="T:Serenity.Reporting.IReportRegistry">
            <summary>
            Abstraction for the registry which holds and allows querying
            list of available reports by their keys and categories.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IReportRegistry.GetAvailableReportsInCategory(System.String)">
            <summary>
            Gets all available reports in category, for example "Northwind".
            This only returns reports that current user has access to, by
            checking their permissions if any.
            </summary>
            <param name="categoryKey">The category key.</param>
            <returns>The available reports in that category.</returns>
        </member>
        <member name="M:Serenity.Reporting.IReportRegistry.GetReport(System.String,System.Boolean)">
            <summary>
            Gets a report by its key.
            </summary>
            <param name="reportKey">Report key</param>
            <param name="validatePermission">Should validate the permission for report before returning.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reporting.IReportRegistry.HasAvailableReportsInCategory(System.String)">
            <summary>
            Returns true if there are reports in the category passed.
            </summary>
            <param name="categoryKey">The category key.</param>
        </member>
        <member name="T:Serenity.Reporting.IReportWithAdditionalData">
            <summary>
            The interface for reports that return some type of 
            additional data. For example, the system settings.
            This can be considered as additional datasets.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.IReportWithAdditionalData.GetAdditionalData">
            <summary>
            Should returns the additional data the report have as a
            dictionary of dataset key / dataset content, if any.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.GenerateCsvRequest">
            <summary>
            Request model for a CSV exporter.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.GenerateCsvRequest.Captions">
            <summary>
            List of column captions, e.g. column names in CSV
            </summary>
        </member>
        <member name="P:Serenity.Reporting.GenerateCsvRequest.Data">
            <summary>
            List of data containing column values in caption
            order.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.GenerateCsvRequest.DownloadName">
            <summary>
            The download name for the exported file.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.GenerateExcelFileRequest">
            <summary>
            Request model for an Excel exporter.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.GenerateExcelFileRequest.Captions">
            <summary>
            List of column captions.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.GenerateExcelFileRequest.Data">
            <summary>
            List of items, containing an array of field values in each item.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.GenerateExcelFileRequest.DownloadName">
            <summary>
            The download name for the exported file.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.ReportRetrieveRequest">
            <summary>
            Request model to retrieve a report by its key.
            This only returns the metadata, e.g. parameters of report etc.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRetrieveRequest.ReportKey">
            <summary>
            The report key to retrieve.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.ReportRetrieveResponse">
            <summary>
            Response model for a report retrieve request.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRetrieveResponse.ReportKey">
            <summary>
            The report key.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRetrieveResponse.Title">
            <summary>
            The title of the report.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRetrieveResponse.Properties">
            <summary>
            List of parameters as property items to 
            show in report execution form.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRetrieveResponse.InitialSettings">
            <summary>
            The initial settings for report parameters.
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRetrieveResponse.IsDataOnlyReport">
            <summary>
            True if the report is an <see cref="T:Serenity.Reporting.IDataOnlyReport"/>
            </summary>
        </member>
        <member name="T:Serenity.Reporting.ReportAttribute">
            <summary>
            Marks a class as Report
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ReportAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="reportKey">The report key. If not passed
            it is calculated from the class name.</param>
        </member>
        <member name="P:Serenity.Reporting.ReportAttribute.ReportKey">
            <summary>
            The report key.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.ReportDesignAttribute">
            <summary>
            The attribute used to determine the location of the report design
            which is usually a CSHTML file.
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ReportDesignAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="design"></param>
        </member>
        <member name="P:Serenity.Reporting.ReportDesignAttribute.Design">
            <summary>
            Returns the location of the design file which is passed via the constructor.
            </summary>
        </member>
        <member name="T:Serenity.Reporting.ReportRegistry">
            <summary>
            Default report registry implementation
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ReportRegistry.#ctor(Serenity.Abstractions.ITypeSource,Serenity.Abstractions.IPermissionService,Serenity.ITextLocalizer)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="typeSource">The type source to search report types in</param>
            <param name="permissions">Permission service</param>
            <param name="localizer">Text localizer</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Serenity.Reporting.ReportRegistry.GetReportKey(System.Type)">
            <summary>
            Gets report key for the report type by looking at its ReportAttribute,
            returning type full name if it does not have a report key or the attribute.
            </summary>
            <param name="type">The report type</param>
        </member>
        <member name="M:Serenity.Reporting.ReportRegistry.GetReportCategoryTitle(System.String,Serenity.ITextLocalizer)">
            <summary>
            Gets category title for a category key
            </summary>
            <param name="key">The category key.</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="M:Serenity.Reporting.ReportRegistry.HasAvailableReportsInCategory(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Reporting.ReportRegistry.GetAvailableReportsInCategory(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Reporting.ReportRegistry.GetReport(System.String,System.Boolean)">
            <summary>
            Returns report with the report key, 
            optionally validating its permissions.
            </summary>
            <param name="reportKey">Report key</param>
            <param name="validatePermission">Validate permission. Default true.</param>
            <exception cref="T:System.ArgumentNullException">reportKey is n ull</exception>
        </member>
        <member name="T:Serenity.Reporting.ReportRegistry.Report">
            <summary>
            Metadata for a registered report
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRegistry.Report.Type">
            <summary>
            Type of the report
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRegistry.Report.Key">
            <summary>
            Report key
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRegistry.Report.Permission">
            <summary>
            Report permission
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRegistry.Report.Title">
            <summary>
            Report title
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRegistry.Report.Category">
            <summary>
            The category
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ReportRegistry.Report.#ctor(System.Type,Serenity.ITextLocalizer)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="type">Report type</param>
            <param name="localizer">Text localizer</param>
            <exception cref="T:System.ArgumentNullException">Type is null</exception>
        </member>
        <member name="T:Serenity.Reporting.ReportRegistry.Category">
            <summary>
            Model for a report category
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRegistry.Category.Key">
            <summary>
            Key for the category
            </summary>
        </member>
        <member name="P:Serenity.Reporting.ReportRegistry.Category.Title">
            <summary>
            Category title
            </summary>
        </member>
        <member name="M:Serenity.Reporting.ReportRegistry.Category.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="key">Category key</param>
            <param name="title">Category title</param>
        </member>
        <member name="T:Serenity.IO.CommandLineTools">
            <summary>
            Contains functions related to command line
            </summary>
        </member>
        <member name="M:Serenity.IO.CommandLineTools.EscapeArguments(System.String[])">
            <summary>
            Quotes all arguments that contain whitespace, or begin with a quote and returns a single
            argument string for use with Process.Start().
            </summary>
            <param name="args">A list of strings for arguments, may not contain null, '\0', '\r', or '\n'</param>
            <returns>The combined list of escaped/quoted strings</returns>
            <exception cref="T:System.ArgumentNullException">Raised when one of the arguments is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised if an argument contains '\0', '\r', or '\n'</exception>
        </member>
        <member name="T:Serenity.ComponentModel.AddBehaviorAttribute">
            <summary>
            Attaches an explicit behavior
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.AddBehaviorAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="behaviorType">Behavior type</param>
            <exception cref="T:System.ArgumentException">behaviorType is abstract or an interface</exception>
        </member>
        <member name="P:Serenity.ComponentModel.AddBehaviorAttribute.Value">
            <summary>
            Gets the behavior type
            </summary>
        </member>
        <member name="T:Serenity.Data.CriteriaFieldExpressionReplacer">
            <summary>
            Converts field names in a criteria to their 
            corresponding SQL field expressions.
            </summary>
        </member>
        <member name="M:Serenity.Data.CriteriaFieldExpressionReplacer.#ctor(Serenity.Data.IRow,Serenity.Abstractions.IPermissionService,System.Boolean)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="row">The row instance</param>
            <param name="permissions">Permission service</param>
            <param name="lookupAccessMode">Use lookup access mode.
            In the lookup access mode only the lookup fields can be
            used in the filter. Default is false.</param>
            <exception cref="T:System.ArgumentNullException">row or permissions is null</exception>
        </member>
        <member name="P:Serenity.Data.CriteriaFieldExpressionReplacer.Row">
            <summary>
            The row instance
            </summary>
        </member>
        <member name="M:Serenity.Data.CriteriaFieldExpressionReplacer.Process(Serenity.Data.BaseCriteria)">
            <summary>
            Visits the criteria for conversion and returns
            a processed criteria containing replaced field
            expressions.
            </summary>
            <param name="criteria">The criteria</param>
        </member>
        <member name="M:Serenity.Data.CriteriaFieldExpressionReplacer.CanFilterField(Serenity.Data.Field)">
            <summary>
            Virtual method to check if a Field can be filtered.
            </summary>
            <param name="field">Field instance</param>
        </member>
        <member name="M:Serenity.Data.CriteriaFieldExpressionReplacer.FindField(System.String)">
            <summary>
            Finds a field by its property name or field name
            </summary>
            <param name="expression">The property name or field name</param>
        </member>
        <member name="M:Serenity.Data.CriteriaFieldExpressionReplacer.VisitCriteria(Serenity.Data.Criteria)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Data.CriteriaFieldExpressionReplacer.VisitBinary(Serenity.Data.BinaryCriteria)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Data.CaptureLogAttribute">
            <summary>
            Enables capture logging for a row type
            </summary>
        </member>
        <member name="M:Serenity.Data.CaptureLogAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="logRow">The log row type used for
            this row type the attribute is placed on.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Serenity.Data.CaptureLogAttribute.LogRow">
            <summary>
            Log row type
            </summary>
        </member>
        <member name="P:Serenity.Data.CaptureLogAttribute.MappedIdField">
            <summary>
            Gets / sets mapped ID field. It is tried to be
            automatically determined if not specified.
            </summary>
        </member>
        <member name="T:Serenity.Data.ICaptureLogHandler">
            <summary>
            Capture logging handler abstraction
            </summary>
        </member>
        <member name="M:Serenity.Data.ICaptureLogHandler.Log(Serenity.Data.IUnitOfWork,Serenity.Data.IRow,Serenity.Data.IRow,System.Object)">
            <summary>
            Logs the capture log operation
            </summary>
            <param name="uow">Unit of work</param>
            <param name="old">Old record</param>
            <param name="row">New record</param>
            <param name="userId">The user ID performing the operation</param>
        </member>
        <member name="T:Serenity.Data.ICaptureLogRow">
            <summary>
            Interface for capture logging row types
            </summary>
        </member>
        <member name="P:Serenity.Data.ICaptureLogRow.OperationTypeField">
            <summary>
            Field containing the operation type
            </summary>
        </member>
        <member name="P:Serenity.Data.ICaptureLogRow.ChangingUserIdField">
            <summary>
            Field containing the user ID
            </summary>
        </member>
        <member name="P:Serenity.Data.ICaptureLogRow.ValidFromField">
            <summary>
            Field containing ValidFrom date
            </summary>
        </member>
        <member name="P:Serenity.Data.ICaptureLogRow.ValidUntilField">
            <summary>
            Field containing ValidUntil date
            </summary>
        </member>
        <member name="T:Serenity.Data.DisplayOrderHelper">
            <summary>
              A static class with helper functions to update display orders of all records or
              groups of records in a table.</summary>
        </member>
        <member name="M:Serenity.Data.DisplayOrderHelper.GetNextValue(System.Data.IDbConnection,System.String,Serenity.Data.Field,Serenity.ICriteria)">
            <summary>
              Gets the next display order value for a table or a group of records.</summary>
            <param name="connection">
              Connection (required).</param>
            <param name="tableName">
              Table name (required).</param>
            <param name="orderField">
              Display order field meta (required).</param>
            <param name="filter">
              Filter for records (can be null).</param>
            <returns>
              One more of maximum display order values of records in the group. 
              If none, 1.</returns>
        </member>
        <member name="M:Serenity.Data.DisplayOrderHelper.GetNextValue(System.Data.IDbConnection,Serenity.Data.IDisplayOrderRow,Serenity.ICriteria)">
            <summary>
              Gets the next display order value for a table or a group of records.</summary>
            <param name="connection">
              Connection (required).</param>
            <param name="row">
              Row with a display order field (required).</param>
            <param name="filter">
              Filter for records (can be null).</param>
            <returns>
              One more of maximum display order values of records in the group. 
              If none, 1.</returns>
        </member>
        <member name="M:Serenity.Data.DisplayOrderHelper.ReorderValues(System.Data.IDbConnection,System.String,Serenity.Data.Field,Serenity.Data.Field,Serenity.ICriteria,System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Sets a records display order to to requested value, and also renumbers other records
              in the group as required.</summary>
            <param name="connection">
              Connection (required).</param>
            <param name="tableName">
              Table name (required).</param>
            <param name="keyField">
              ID field meta that will be used to locate the record (required).</param>
            <param name="orderField">
              Display order field meta.</param>
            <param name="filter">
              Filter that will determine the record group (can be null).</param>
            <param name="recordID">
              ID value of the record.</param>
            <param name="newDisplayOrder">
              New display order of the record.</param>
            <param name="descendingKeyOrder">
              Will records with same display order values be sorted in ascending or descending ID order?
              For example, if records with ID's 1, 2, 3 has display order value of "0", their actual display
              orders are 1, 2 and 3. If this parameter is set to true (descending), their display orders will
              become 3, 2, 1. This parameter controls if records that are added recently and has no display
              order value assigned (or 0) be shown at start or at the end.</param>
            <param name="hasUniqueConstraint">True if the entity has a unique constraint on display order
            column.</param>
            <returns>
              If any of the display order values is changed true.</returns>
        </member>
        <member name="M:Serenity.Data.DisplayOrderHelper.UpdateOrders(System.Data.IDbConnection,System.Collections.Generic.List{Serenity.Data.DisplayOrderHelper.OrderRecord},System.String,Serenity.Data.Field,Serenity.Data.Field,System.Boolean)">
            <summary>
            Updates display order values in a table
            </summary>
            <param name="connection">Connection</param>
            <param name="orderRecords">List of records with new orders</param>
            <param name="tableName">Tablename</param>
            <param name="keyField">Key field</param>
            <param name="orderField">Order field</param>
            <param name="hasUniqueConstraint">True if order field has a unique constraint</param>
            <exception cref="T:System.ArgumentNullException">connection, tableName, keyField or orderField is null</exception>
        </member>
        <member name="M:Serenity.Data.DisplayOrderHelper.ReorderValues(System.Data.IDbConnection,Serenity.Data.IDisplayOrderRow,Serenity.ICriteria,System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Sets a records display order to to requested value, and also renumbers other records
              in the group as required.</summary>
            <param name="connection">
              Connection (required).</param>
            <param name="row">
              Row with a display order and ID field (should implement IDbIdRow interface).</param>
            <param name="filter">
              Filter that will determine the record group (can be null).</param>
            <param name="recordID">
              ID value of the record.</param>
            <param name="newDisplayOrder">
              New display order of the record.</param>
            <param name="descendingKeyOrder">
              Will records with same display order values be sorted in ascending or descending ID order?
              For example, if records with ID's 1, 2, 3 has display order value of "0", their actual display
              orders are 1, 2 and 3. If this parameter is set to true (descending), their display orders will
              become 3, 2, 1. This parameter controls if records that are added recently and has no display
              order value assigned (or 0) be shown at start or at the end.</param>
            <param name="hasUniqueConstraint">True if the display order field has a unique index</param>
            <returns>
              If any of the display order values is changed true.</returns>
        </member>
        <member name="T:Serenity.Data.DisplayOrderHelper.OrderRecord">
            <summary>
              An internal class that is used FixRecordOrdering to store old and new display orders
              for records to be sorted.</summary>
        </member>
        <member name="F:Serenity.Data.DisplayOrderHelper.OrderRecord.recordID">
            <summary>
            Record ID
            </summary>
        </member>
        <member name="F:Serenity.Data.DisplayOrderHelper.OrderRecord.oldOrder">
            <summary>
            Old order
            </summary>
        </member>
        <member name="F:Serenity.Data.DisplayOrderHelper.OrderRecord.newOrder">
            <summary>
            New order
            </summary>
        </member>
        <member name="T:Serenity.Data.ILocalizationRow">
            <summary>
            Interface for rows with a CultureId field
            </summary>
        </member>
        <member name="P:Serenity.Data.ILocalizationRow.CultureIdField">
            <summary>
            Culture ID field, e.g. LanguageID / LanguageKey
            </summary>
        </member>
        <member name="T:Serenity.Data.LocalizationRowAttribute">
            <summary>
            Maps a row to its localization row
            </summary>
        </member>
        <member name="M:Serenity.Data.LocalizationRowAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of the attribute
            </summary>
            <param name="localizationRow">Localization row type</param>
            <exception cref="T:System.ArgumentNullException">localizationRow is null</exception>
        </member>
        <member name="P:Serenity.Data.LocalizationRowAttribute.LocalizationRow">
            <summary>
            Localization row type
            </summary>
        </member>
        <member name="P:Serenity.Data.LocalizationRowAttribute.MappedIdField">
            <summary>
            ID field corresponding to this tables ID field.
            Can be automatically determined if not specified.
            </summary>
        </member>
        <member name="T:Serenity.Data.ServiceRequestExtensions">
            <summary>
              Contains static extension methods for DbField and Meta objects.</summary>
        </member>
        <member name="M:Serenity.Data.ServiceRequestExtensions.IncludeField``1(``0,Serenity.Data.Field)">
            <summary>
            Adds the field to the request.IncludeColumns
            </summary>
            <typeparam name="TRequest">Request type</typeparam>
            <param name="request">Request</param>
            <param name="field">Field</param>
        </member>
        <member name="T:Serenity.PrefixHelper">
            <summary>
            Contains static methods to determine prefix length for a list
            E.g. to find the prefix that all the columns of a table have
            </summary>
        </member>
        <member name="M:Serenity.PrefixHelper.DeterminePrefixLength``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Determines the prefix length
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="list">List of objects</param>
            <param name="getName">Gets the field name from a list element</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Contains dependency injection extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions.AddServiceBehaviors(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers default implementations of <see cref="T:Serenity.Services.IBehaviorFactory"/>, 
            <see cref="T:Serenity.Services.IImplicitBehaviorRegistry"/> and <see cref="T:Serenity.Services.IBehaviorProvider"/>
            </summary>
            <param name="collection">Service collection</param>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions.AddServiceHandlerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers default implementations of <see cref="T:Serenity.Services.IHandlerActivator"/>, 
            <see cref="T:Serenity.Services.IDefaultHandlerFactory"/> and <see cref="T:Serenity.Services.IDefaultHandlerRegistry"/>
            </summary>
            <param name="collection">Service collection</param>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions.AddProxyRequestHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers proxy activators for the DI container to resolve generic request handler instances
            like <see cref="T:Serenity.Services.ICreateHandler`1" />, <see cref="T:Serenity.Services.IListHandler`1" /> etc.
            </summary>
            <param name="collection">Service collection</param>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCustomRequestHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Serenity.Abstractions.ITypeSource,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers all the custom request handlers implementing IRequestHandler
            interface, from the type source in the service collection if available,
            or using the provided typeSource, optionally filtering handler types
            via a provided predicate.
            </summary>
            <param name="collection">Service collection</param>
            <param name="typeSource">Type source. Should be provided if it is not already
            registered in the service collection. Pass an empty type source
            if you want to disable auto registrations.</param>
            <param name="predicate">Predicate to filter handler types to register.
            The first argument is registration type (the interface or the handler type itself),
            and the second argument is the implementation type (e.g. the handler type). 
            If you don't want concrete types like MySaveHandler etc. to be registered for
            themselves (recommended), the predicate should be "(intf, impl) => intf != impl"</param>
            <exception cref="T:System.ArgumentNullException">collection is null or typeSource can't be found in the collection</exception>
            <exception cref="T:System.InvalidProgramException">Multiple candidates found for a service interface.</exception>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions.AddServiceHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Serenity.Abstractions.ITypeSource,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers all the services required for request handlers
            </summary>
            <param name="collection">Service collection</param>
            <param name="customHandlerTypeSource">Custom handler type source
            to pass to the AddCustomHandlers call. Pass an empty type source
            if you want to disable auto registrations</param>
            <param name="customHandlerPredicate">Predicate to filter handler types to register.
            The first argument is registration type (the interface or the handler type itself),
            and the second argument is the implementation type (e.g. the handler type). 
            If you don't want concrete types like MySaveHandler etc. to be registered for
            themselves (recommended), the predicate should be "(intf, impl) => intf != impl"</param>
            <exception cref="T:System.InvalidProgramException">Multiple candidates found for a service interface.</exception>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBaseTexts(System.IServiceProvider,Microsoft.Extensions.FileProviders.IFileProvider)">
            <summary>
            Adds nested texts, enum texts, permission texts, row texts and json local text assets
            </summary>
            <param name="provider">The service provider that will be used to locate text registry and other types</param>
            <param name="webFileProvider">If passed, json texts from static web assets will be added from Serenity.Scripts,
            and any assembly with a JsonLocalTextAssetsAttribute attribute</param>
            <returns>Local text registry</returns>
            <exception cref="T:System.ArgumentNullException">Provider is null</exception>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions.AddAllTexts(System.IServiceProvider,System.String[])">
            <summary>
            Adds type texts and JSON texts from passed folders
            </summary>
            <param name="provider"></param>
            <param name="jsonTextPaths"></param>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.ServiceCollectionExtensions.AddJsonTexts(Serenity.Abstractions.ILocalTextRegistry,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean)">
            <summary>
            Adds json texts from file provider and sub path
            </summary>
            <param name="registry">The text registry</param>
            <param name="provider">File provider</param>
            <param name="subpath">Sub path</param>
            <param name="recursive">True to recursively scan (default true)</param>
            <returns>The text registry</returns>
            <exception cref="T:System.ArgumentNullException">registry, provider or sub path is null</exception>
        </member>
        <member name="T:Serenity.CaptureOperationType">
            <summary>
            Contains capture logging operation types
            </summary>
        </member>
        <member name="F:Serenity.CaptureOperationType.Before">
            <summary>
            The before record, only available for updates
            </summary>
        </member>
        <member name="F:Serenity.CaptureOperationType.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:Serenity.CaptureOperationType.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:Serenity.CaptureOperationType.Update">
            <summary>
            Update (update records have both Before and Update records)
            </summary>
        </member>
        <member name="T:Serenity.PropertyGrid.LocalizablePropertyProcessor">
            <summary>
            Property processor for handling localizable properties
            </summary>
        </member>
        <member name="M:Serenity.PropertyGrid.LocalizablePropertyProcessor.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.PropertyGrid.LocalizablePropertyProcessor.Process(Serenity.PropertyGrid.IPropertySource,Serenity.ComponentModel.PropertyItem)">
            <inheritdoc/>
        </member>
        <member name="P:Serenity.PropertyGrid.LocalizablePropertyProcessor.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.PropertyGrid.LocalizablePropertyProcessor.IsLocalized(Serenity.Data.Field)">
            <summary>
            Returns if the field is localizable
            </summary>
            <param name="field">Field object</param>
        </member>
        <member name="T:Serenity.Web.CombinedUploadStorage">
            <summary>
            A combined upload storage implementation that uses two upload storage instances,
            while serving one of them from a sub path like "/temporary/"
            </summary>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.#ctor(Serenity.Web.IUploadStorage,Serenity.Web.IUploadStorage,System.String)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="mainStorage">The main storage</param>
            <param name="subStorage">The sub storage</param>
            <param name="subPrefix">Prefix path for the substorage like "temporary/"</param>
            <exception cref="T:System.ArgumentNullException">One of the arguments is null</exception>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.UnderSubPath(System.String)">
            <summary>
            Returns if the path is under sub path
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.IsSubPath(System.String)">
            <summary>
            Returns true if the path is the subpath
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.ArchiveFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.CopyFrom(Serenity.Web.IUploadStorage,System.String,System.String,Serenity.Web.OverwriteOption)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.DeleteFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.FileExists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.GetFiles(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.GetFileSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.GetFileUrl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.OpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.PurgeTemporaryFiles">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.WriteFile(System.String,System.IO.Stream,Serenity.Web.OverwriteOption)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.GetFileMetadata(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.CombinedUploadStorage.SetFileMetadata(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Web.CopyTemporaryFileOptions">
            <summary>
            Options for copying a temporary file to its target
            </summary>
        </member>
        <member name="P:Serenity.Web.CopyTemporaryFileOptions.TemporaryFile">
            <summary>
            Temporary file
            </summary>
        </member>
        <member name="P:Serenity.Web.CopyTemporaryFileOptions.FilesToDelete">
            <summary>
            Files to delete container
            </summary>
        </member>
        <member name="T:Serenity.Web.CopyTemporaryFileResult">
            <summary>
            Result of the copying of a temporary file to its target
            </summary>
        </member>
        <member name="P:Serenity.Web.CopyTemporaryFileResult.Path">
            <summary>
            The path of the file
            </summary>
        </member>
        <member name="P:Serenity.Web.CopyTemporaryFileResult.OriginalName">
            <summary>
            Original name
            </summary>
        </member>
        <member name="P:Serenity.Web.CopyTemporaryFileResult.HasThumbnail">
            <summary>
            If the file has thumbnail
            </summary>
        </member>
        <member name="P:Serenity.Web.CopyTemporaryFileResult.FileSize">
            <summary>
            File size
            </summary>
        </member>
        <member name="T:Serenity.Web.DefaultImageProcessor">
            <summary>
            Default implementation for the <see cref="T:IImageProcessor"/>
            </summary>
        </member>
        <member name="M:Serenity.Web.DefaultImageProcessor.GetImageSize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DefaultImageProcessor.Load(System.IO.Stream,Serenity.Web.ImageFormatInfo@)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DefaultImageProcessor.Save(System.Object,System.IO.Stream,System.String,Serenity.Web.ImageEncoderParams)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DefaultImageProcessor.Scale(System.Object,System.Int32,System.Int32,Serenity.Web.ImageScaleMode,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Web.DefaultUploadProcessor">
            <summary>
            Default implementation for <see cref="T:Serenity.Web.IUploadProcessor"/>
            </summary>
        </member>
        <member name="M:Serenity.Web.DefaultUploadProcessor.#ctor(IImageProcessor,Serenity.Web.IUploadStorage,Serenity.Web.IUploadValidator,Serenity.Abstractions.IExceptionLogger)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="imageProcessor">Image processor</param>
            <param name="uploadStorage">Upload storage</param>
            <param name="uploadValidator">Upload validator</param>
            <param name="logger">Exception logger</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Serenity.Web.DefaultUploadProcessor.Process(System.IO.Stream,System.String,Serenity.ComponentModel.IUploadOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Web.DefaultUploadValidator">
            <summary>
            Default implementation for <see cref="T:Serenity.Web.IUploadValidator"/>
            </summary>
        </member>
        <member name="M:Serenity.Web.DefaultUploadValidator.#ctor(IImageProcessor,Serenity.ITextLocalizer,Serenity.Abstractions.IExceptionLogger)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="imageProcessor">Image processor</param>
            <param name="localizer">Text localizer</param>
            <param name="logger">Exception logger</param>
            <exception cref="T:System.ArgumentNullException">imageProcessor or localizer is null</exception>
        </member>
        <member name="M:Serenity.Web.DefaultUploadValidator.ValidateFile(Serenity.ComponentModel.IUploadFileConstraints,System.IO.Stream,System.String,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DefaultUploadValidator.ValidateImage(Serenity.ComponentModel.IUploadImageContrains,System.IO.Stream,System.String,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Web.DiskUploadStorage">
            <summary>
            A file system based upload storage implementation
            </summary>
        </member>
        <member name="F:Serenity.Web.DiskUploadStorage.fileSystem">
            <summary>
            File system
            </summary>
        </member>
        <member name="P:Serenity.Web.DiskUploadStorage.RootPath">
            <summary>
            Root path for the uploads
            </summary>
        </member>
        <member name="P:Serenity.Web.DiskUploadStorage.RootUrl">
            <summary>
            Root URL for the uploads
            </summary>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.#ctor(Serenity.Web.DiskUploadStorageOptions,Serenity.Web.IDiskUploadFileSystem)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="options">Upload options</param>
            <param name="fileSystem">File system to use</param>
            <exception cref="T:System.ArgumentNullException">Options is null</exception>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.FilePath(System.String)">
            <summary>
            Gets the full path for the file
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.GetFileUrl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.FileExists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.GetFileMetadata(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.SetFileMetadata(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.CopyFrom(Serenity.Web.IUploadStorage,System.String,System.String,Serenity.Web.OverwriteOption)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.ArchiveFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.DeleteFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.GetFileSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.GetFiles(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.OpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.PurgeTemporaryFiles">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.DiskUploadStorage.WriteFile(System.String,System.IO.Stream,Serenity.Web.OverwriteOption)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Web.DiskUploadStorageOptions">
            <summary>
            Options for <see cref="T:Serenity.Web.DiskUploadStorage"/>
            </summary>
        </member>
        <member name="P:Serenity.Web.DiskUploadStorageOptions.RootPath">
            <summary>
            Root path
            </summary>
        </member>
        <member name="P:Serenity.Web.DiskUploadStorageOptions.RootUrl">
            <summary>
            Root URL
            </summary>
        </member>
        <member name="T:Serenity.Web.FileMetadataKeys">
            <summary>
            Contains file metadata key constants
            </summary>
        </member>
        <member name="F:Serenity.Web.FileMetadataKeys.OriginalName">
            <summary>
            Original name of the file
            </summary>
        </member>
        <member name="T:Serenity.Web.FilesToDelete">
            <summary>
            A container that stores list of file paths to delete (old files) if 
            the upload related operation is successful. If it is not, the old
            files will be kept while the new files will be deleted.
            </summary>
        </member>
        <member name="M:Serenity.Web.FilesToDelete.#ctor(Serenity.Web.IUploadStorage)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="storage">Upload storage</param>
            <exception cref="T:System.ArgumentNullException">storage is null</exception>
        </member>
        <member name="M:Serenity.Web.FilesToDelete.Dispose">
            <summary>
            Deletes the new files if <see cref="M:Serenity.Web.FilesToDelete.KeepNewFiles"/> is not called.
            </summary>
        </member>
        <member name="M:Serenity.Web.FilesToDelete.RegisterNewFile(System.String)">
            <summary>
            Registers a new file
            </summary>
            <param name="file">File path</param>
        </member>
        <member name="M:Serenity.Web.FilesToDelete.RegisterOldFile(System.String)">
            <summary>
            Registers an old file
            </summary>
            <param name="file">File path</param>
        </member>
        <member name="M:Serenity.Web.FilesToDelete.KeepNewFiles">
            <summary>
            Keeps new files, while removing old files
            </summary>
        </member>
        <member name="T:Serenity.Web.FilesToDeleteExtensions">
            <summary>
            Extension methods for <see cref="T:Serenity.Web.FilesToDelete"/>
            </summary>
        </member>
        <member name="M:Serenity.Web.FilesToDeleteExtensions.RegisterFilesToDelete(Serenity.Data.IUnitOfWork,Serenity.Web.FilesToDelete)">
            <summary>
            Registers a <see cref="T:Serenity.Web.FilesToDelete"/> in the target unit of work. 
            This deletes the old files on commit, and new files on rollback
            </summary>
            <param name="unitOfWork">Unit of work</param>
            <param name="filesToDelete">Files to delete container</param>
        </member>
        <member name="T:Serenity.Web.FormatFilenameOptions">
            <summary>
            Options for formatting a file name
            </summary>
        </member>
        <member name="P:Serenity.Web.FormatFilenameOptions.EntityId">
            <summary>
            Entity ID
            </summary>
        </member>
        <member name="P:Serenity.Web.FormatFilenameOptions.Format">
            <summary>
            File name format
            </summary>
        </member>
        <member name="P:Serenity.Web.FormatFilenameOptions.OriginalName">
            <summary>
            The original name of the file
            </summary>
        </member>
        <member name="P:Serenity.Web.FormatFilenameOptions.PostFormat">
            <summary>
            A call back that will be executed after formatting
            </summary>
        </member>
        <member name="T:Serenity.Web.IDiskUploadFileSystem">
            <summary>
            Extension for <see cref="T:Serenity.IFileSystem"/> with disk upload storage specific methods.
            </summary>
        </member>
        <member name="M:Serenity.Web.IDiskUploadFileSystem.Delete(System.String,Serenity.IO.DeleteType)">
            <summary>
            Deletes the file with a DeleteType option
            </summary>
            <param name="path">File path</param>
            <param name="deleteType">Delete type</param>
        </member>
        <member name="M:Serenity.Web.IDiskUploadFileSystem.PurgeDirectory(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.String)">
            <summary>
            Purges target directory, cleaning temporary files
            </summary>
            <param name="directoryToClean">Directory to clean</param>
            <param name="autoExpireTime">Auto expire old files timespan</param>
            <param name="maxFilesInDirectory">Max files to keep in directory</param>
            <param name="checkFileName">A filename to check existance to confirm the target is a temporary directory.
            By default it is ".temporary"</param>
        </member>
        <member name="M:Serenity.Web.IDiskUploadFileSystem.TryDeleteMarkedFiles(System.String)">
            <summary>
            Tries to delete marked files in a directory
            </summary>
            <param name="path">Target path</param>
        </member>
        <member name="M:Serenity.Web.IDiskUploadFileSystem.TryDeleteOrMark(System.String)">
            <summary>
            Tries to delete or marks a file for future deletion
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="T:Serenity.Web.IFilesToDelete">
            <summary>
            Interface for a files to delete container (<see cref="T:Serenity.Web.FilesToDelete"/>)
            </summary>
        </member>
        <member name="M:Serenity.Web.IFilesToDelete.RegisterNewFile(System.String)">
            <summary>
            Registers a new file
            </summary>
            <param name="file">File path</param>
        </member>
        <member name="M:Serenity.Web.IFilesToDelete.RegisterOldFile(System.String)">
            <summary>
            Registers an old file
            </summary>
            <param name="file">File path</param>
        </member>
        <member name="M:Serenity.Web.IFilesToDelete.KeepNewFiles">
            <summary>
            Keeps new files, while removing old files
            </summary>
        </member>
        <member name="T:Serenity.Web.ImageChecker">
            <summary>
            Checks stream data if valid image file and validate required conditions.
            </summary>
        </member>
        <member name="M:Serenity.Web.ImageChecker.CheckStream(System.IO.Stream,IImageProcessor,System.Boolean,System.Object@,Serenity.Web.ImageFormatInfo@,Serenity.Abstractions.IExceptionLogger)">
            <summary>Checks if the given image if it is a valid or not. 
            If so, controls its compliance to constraints</summary> 
            <param name="inputStream">Stream which contains image data</param>
            <param name="imageProcessor">Image processor</param>
            <param name="returnImage">Does image required to be returned? 
            If not requested, it will be disposed at the end of processing</param>
            <param name="image">When method returns contains the image object. 
            If returnImage false it will contain null</param>
            <param name="formatInfo">Contains image format info on return</param>
            <param name="exLogger">Exception logger</param>
            <returns>Image validation result. One of <see cref="T:Serenity.Web.ImageCheckResult"/> values. 
            If the result is one of GIFImage, JPEGImage, PNGImage, the checking is successful. 
            Rest of results are invalid.</returns>
        </member>
        <member name="M:Serenity.Web.ImageChecker.CheckSizeConstraints(System.Int32,System.Int32)">
            <summary>
            Checks an image width and height against size constraints
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <returns>One of ImageCheckResult values. ImageCheckResult.JPEGImage if image size is validated.</returns>
        </member>
        <member name="P:Serenity.Web.ImageChecker.DataSize">
            <summary>Gets data size of the validated image</summary>
        </member>
        <member name="P:Serenity.Web.ImageChecker.Width">
            <summary>Gets width of the validated image</summary>
        </member>
        <member name="P:Serenity.Web.ImageChecker.Height">
            <summary>Gets height of the validate image</summary>
        </member>
        <member name="P:Serenity.Web.ImageChecker.Milliseconds">
            <summary>Gets the time passed during validating the image</summary>
        </member>
        <member name="P:Serenity.Web.ImageChecker.MaxDataSize">
            <summary>Gets/sets maximum file size allowed</summary>
        </member>
        <member name="P:Serenity.Web.ImageChecker.MaxWidth">
            <summary>Gets/sets maximum width allowed. 0 means any width.</summary>
        </member>
        <member name="P:Serenity.Web.ImageChecker.MaxHeight">
            <summary>Gets/sets maximum height allowed. 0 means any height.</summary>
        </member>
        <member name="P:Serenity.Web.ImageChecker.MinWidth">
            <summary>Gets/sets minimum width allowed. 0 means any width.</summary>
        </member>
        <member name="P:Serenity.Web.ImageChecker.MinHeight">
            <summary>Gets/sets minimum height allowed. 0 means any height.</summary>
        </member>
        <member name="M:Serenity.Web.ImageChecker.FormatErrorMessage(Serenity.Web.ImageCheckResult,Serenity.ITextLocalizer)">
            <summary>
            Formats an <see cref="T:Serenity.Web.ImageCheckResult"/> error message
            </summary>
            <param name="result">Error result</param>
            <param name="localizer">Text localizer</param>
        </member>
        <member name="T:Serenity.Web.ImageCheckResult">
            <summary>
              <see cref="T:Serenity.Web.ImageChecker"/>'s result codes.</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.Valid">
            <summary>
              Checked image is OK</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.StreamReadError">
            <summary>
              Error occurred during reading</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.DataSizeTooHigh">
            <summary>
              File size too high</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.InvalidImage">
            <summary>
              Image file is invalid</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.ImageIsEmpty">
            <summary>
              Image is empty, its height or width is zero</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.SizeMismatch">
            <summary>
              Image is not at exact pixel width/height</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.WidthMismatch">
            <summary>
              Image doesn't have an exact width</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.WidthTooHigh">
            <summary>
              Image is wider than maximum allowed</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.WidthTooLow">
            <summary>
              Image is shorter than minimum allowed</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.HeightMismatch">
            <summary>
              Image doesn't have an exact height</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.HeightTooHigh">
            <summary>
              Image is taller than maximum allowed</summary>
        </member>
        <member name="F:Serenity.Web.ImageCheckResult.HeightTooLow">
            <summary>
              Image is shorter than minimum allowed</summary>
        </member>
        <member name="T:Serenity.Web.ImageEncoderParams">
            <summary>
            Parameters for image encoding. Currently only contains a JPEG quality parameter.
            </summary>
        </member>
        <member name="P:Serenity.Web.ImageEncoderParams.Quality">
            <summary>
            JPEG quality
            </summary>
        </member>
        <member name="T:Serenity.Web.ImageFormatInfo">
            <summary>
            Information about an image format
            </summary>
        </member>
        <member name="P:Serenity.Web.ImageFormatInfo.MimeType">
            <summary>
            Default mime type
            </summary>
        </member>
        <member name="P:Serenity.Web.ImageFormatInfo.FileExtensions">
            <summary>
            List of expecteed file extensions
            </summary>
        </member>
        <member name="T:Serenity.Web.IUploadProcessor">
            <summary>
            Abstraction for an upload processor, which handles temporary uploads
            </summary>
        </member>
        <member name="M:Serenity.Web.IUploadProcessor.Process(System.IO.Stream,System.String,Serenity.ComponentModel.IUploadOptions)">
            <summary>
            Processes a temporary upload stream, usually from the HTTP request files and
            returns information about the result
            </summary>
            <param name="fileContent">File content stream (usually from HTTP request files)</param>
            <param name="filename">The filename of the uploaded file (original name)</param>
            <param name="options">Upload options to use for validation / thumbnail generation</param>
        </member>
        <member name="T:Serenity.Web.IUploadStorage">
            <summary>
            Abstraction for an upload storage
            </summary>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.ArchiveFile(System.String)">
            <summary>
            Copies the file to the archive folder
            </summary>
            <param name="path">Source file path</param>
            <returns>The archived file path</returns>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.CopyFrom(Serenity.Web.IUploadStorage,System.String,System.String,Serenity.Web.OverwriteOption)">
            <summary>
            Copies a file from another upload storage and returns the resulting file path
            </summary>
            <param name="sourceStorage">Source upload storage</param>
            <param name="sourcePath">Source file path</param>
            <param name="targetPath">Target file path</param>
            <param name="overwrite">Overwrite option</param>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.DeleteFile(System.String)">
            <summary>
            Deletes the file at path
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.FileExists(System.String)">
            <summary>
            Returns if a file at path exists
            </summary>
            <param name="path">File path</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.GetFileUrl(System.String)">
            <summary>
            Gets the URL for a file
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.GetFileSize(System.String)">
            <summary>
            Gets file size
            </summary>
            <param name="path">File path</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.GetFiles(System.String,System.String)">
            <summary>
            Gets list of files matching a search pattern
            </summary>
            <param name="path">Path of the directory to perform search</param>
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.GetFileMetadata(System.String)">
            <summary>
            Gets metadata dictionary for a file
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.SetFileMetadata(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Sets file metadata for a file
            </summary>
            <param name="path">File path</param>
            <param name="metadata">Metadata dictionary</param>
            <param name="overwriteAll">True to override any existing metadata for file,
            false to merge existing metadata by their key.</param>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.OpenFile(System.String)">
            <summary>
            Opens a file stream. The caller should dispose the stream.
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.PurgeTemporaryFiles">
            <summary>
            Purges temporary files. Only useful for temporary storage.
            </summary>
        </member>
        <member name="M:Serenity.Web.IUploadStorage.WriteFile(System.String,System.IO.Stream,Serenity.Web.OverwriteOption)">
            <summary>
            Writes a file
            </summary>
            <param name="path">File path</param>
            <param name="source">Source stream</param>
            <param name="overwrite">Overwrite option</param>
        </member>
        <member name="T:Serenity.Web.IUploadValidator">
            <summary>
            An upload validator abstraction for checking <see cref="T:Serenity.ComponentModel.IUploadFileConstraints"/>
            and <see cref="T:Serenity.ComponentModel.IUploadImageContrains"/>
            </summary>
        </member>
        <member name="M:Serenity.Web.IUploadValidator.ValidateFile(Serenity.ComponentModel.IUploadFileConstraints,System.IO.Stream,System.String,System.Boolean@)">
            <summary>
            Validates file constraints
            </summary>
            <param name="constraints">The file constraints</param>
            <param name="stream">Source stream</param>
            <param name="filename">File name</param>
            <param name="isImageExtension">Returns true if the file extension matches
            with constraints.ImageExtensions.</param>
        </member>
        <member name="M:Serenity.Web.IUploadValidator.ValidateImage(Serenity.ComponentModel.IUploadImageContrains,System.IO.Stream,System.String,System.Object@)">
            <summary>
            Validates image constraints
            </summary>
            <param name="constraints">The image constraints</param>
            <param name="stream">Source stream</param>
            <param name="filename">File name</param>
            <param name="image">Image object</param>
        </member>
        <member name="T:Serenity.Web.KnownMimeTypes">
            <summary>
            Contains set of known popular mime types
            </summary>
        </member>
        <member name="F:Serenity.Web.KnownMimeTypes.knownMimeTypes">
            <summary>
              (extension -> mime type) pairs for known mime types.</summary>
        </member>
        <member name="M:Serenity.Web.KnownMimeTypes.Get(System.String)">
            <summary>
              Gets MIME type for a given file using information in Win32 HKEY_CLASSES_ROOT 
              registry key.</summary>
            <param name="path">
              File name whose MIME type will be determined. Its only extension part will be used.</param>
            <returns>
              Determined mime type for given file. "application/unknown" otherwise.</returns>
        </member>
        <member name="M:Serenity.Web.KnownMimeTypes.TryGet(System.String)">
            <summary>
              Gets MIME type for a given file</summary>
            <param name="path">
              File name whose MIME type will be determined. Its only extension part will be used.</param>
            <returns>
              Determined mime type for given file. "application/unknown" otherwise.</returns>
        </member>
        <member name="T:Serenity.Web.OverwriteOption">
            <summary>
            Enum that contains what to do when a file at desired path exists
            </summary>
        </member>
        <member name="F:Serenity.Web.OverwriteOption.Disallowed">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="F:Serenity.Web.OverwriteOption.Overwrite">
            <summary>
            Overwrite the target file
            </summary>
        </member>
        <member name="F:Serenity.Web.OverwriteOption.AutoRename">
            <summary>
            Try to find a suitable name for the source file to be written
            </summary>
        </member>
        <member name="T:Serenity.Web.PhysicalDiskUploadFileSystem">
            <summary>
            Implementation of the <see cref="T:Serenity.Web.IDiskUploadFileSystem" />
            </summary>
        </member>
        <member name="M:Serenity.Web.PhysicalDiskUploadFileSystem.TryDeleteMarkedFiles(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.PhysicalDiskUploadFileSystem.Delete(System.String,Serenity.IO.DeleteType)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.PhysicalDiskUploadFileSystem.PurgeDirectory(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Serenity.Web.PhysicalDiskUploadFileSystem.TryDeleteOrMark(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Web.ProcessedUploadInfo">
            <summary>
            Information about a processed temporary upload
            </summary>
        </member>
        <member name="P:Serenity.Web.ProcessedUploadInfo.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Serenity.Web.ProcessedUploadInfo.ImageHeight">
            <summary>
            Image height
            </summary>
        </member>
        <member name="P:Serenity.Web.ProcessedUploadInfo.ImageWidth">
            <summary>
            Image width
            </summary>
        </member>
        <member name="P:Serenity.Web.ProcessedUploadInfo.IsImage">
            <summary>
            True if the file contains an image
            </summary>
        </member>
        <member name="P:Serenity.Web.ProcessedUploadInfo.FileSize">
            <summary>
            File size
            </summary>
        </member>
        <member name="P:Serenity.Web.ProcessedUploadInfo.Success">
            <summary>
            True if upload and all validations were successfull
            </summary>
        </member>
        <member name="P:Serenity.Web.ProcessedUploadInfo.TemporaryFile">
            <summary>
            Temporary file path
            </summary>
        </member>
        <member name="T:Serenity.Web.TempUploadStorage">
            <summary>
            A subclass of <see cref="T:Serenity.Web.DiskUploadStorage"/> specialized for the temporary upload folder,
            allowing to purge temporary files
            </summary>
        </member>
        <member name="M:Serenity.Web.TempUploadStorage.#ctor(Serenity.Web.DiskUploadStorageOptions,Serenity.Web.IDiskUploadFileSystem)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="options">Upload storage options</param>
            <param name="fileSystem">File system</param>
        </member>
        <member name="M:Serenity.Web.TempUploadStorage.PurgeTemporaryFiles">
            <inheritdoc/>
        </member>
        <member name="T:Serenity.Web.ThumbnailGenerator">
            <summary>
              Static class that contains thumbnail generator methods</summary>
        </member>
        <member name="M:Serenity.Web.ThumbnailGenerator.Generate(SixLabors.ImageSharp.Image,System.Int32,System.Int32,Serenity.Web.ImageScaleMode,System.Nullable{SixLabors.ImageSharp.Color},System.Boolean)">
            <summary>
              Generates a thumbnail of the source image based on parameters.</summary>
            <remarks>
              <p>Thumbnail width or height must be greater than 0. Otherwise an empty image
              is generated.</p>
              <p>When ImageScaleMode.PreserveRatioNoFill used and both dimensions are set,
              if aspect ratio of source image and thumbnail doesn't match, thumbnail's horizontal or vertical
              size may be different than requested one. In, PreserveRatioWithFill mode thumbnail size will
              be at requested size but empty parts are filled with a solid color.</p></remarks>
            <param name="image">
              Image object to generate thumbnail for (required)</param>
            <param name="thumbWidth">
              Thumbnail width. If 0, width is calculated by source aspect ratio. Only one of
              width or height can be zero.</param>
            <param name="thumbHeight">
              Thumbnail height. If 0, height is calculated by source aspect ratio. Only one of
              width or height can be zero.</param>
            <param name="mode">
              Thumbnail generation mode. It is only important when both dimensions are specified and
              source aspect ratio is different than thumbnail (see <see cref="T:Serenity.Web.ImageScaleMode"/>).</param>
            <param name="backgroundColor">
              Specifies fill color for PreserveRatioWithFill mode.</param>
            <param name="inplace">True if the original image should be modified inplace</param>
            <returns>
              Generated thumbnail image. Should be disposed by caller.</returns>
        </member>
        <member name="M:Serenity.Web.ThumbnailGenerator.GenerateEmptyBitmap(System.Int32,System.Int32,SixLabors.ImageSharp.Color)">
            <summary>
            Generates an empty bitmap
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="color">Background color</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Web.UploadFormatting">
            <summary>
            Contains helper methods for upload file name formatting
            </summary>
        </member>
        <member name="M:Serenity.Web.UploadFormatting.FormatFilename(Serenity.Web.FormatFilenameOptions)">
            <summary>
            Formats file name
            </summary>
            <param name="options">Formatting options</param>
            <exception cref="T:System.ArgumentNullException">options or options.OriginalName is null</exception>
        </member>
        <member name="M:Serenity.Web.UploadFormatting.FileNameSizeDisplay(System.String,System.Int32)">
            <summary>
            Gets a display string for file name and size
            </summary>
            <param name="name">File name</param>
            <param name="bytes">Size in bytes</param>
        </member>
        <member name="M:Serenity.Web.UploadFormatting.FileSizeDisplay(System.Int32)">
            <summary>
            Gets a display string for a file size
            </summary>
            <param name="bytes">File size in bytes</param>
        </member>
        <member name="T:Serenity.Web.UploadPathHelper">
            <summary>
            Contains helper functions for upload paths
            </summary>
        </member>
        <member name="M:Serenity.Web.UploadPathHelper.GetThumbnailName(System.String,System.String)">
            <summary>
            Gets thumb file name
            </summary>
            <param name="path">File path</param>
            <param name="thumbSuffix">Thumb suffix, default is "_t.jpg"</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Web.UploadPathHelper.CheckFileNameSecurity(System.String)">
            <summary>
            Checks file name security, e.g. it is a relative file (not rooted) that 
            does not contain ".." etc.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Serenity.Web.UploadPathHelper.FindAvailableName(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Finds an available name for a file
            </summary>
            <param name="path">File path</param>
            <param name="exists">Function that returns if a file exists</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Path or exists is null</exception>
        </member>
        <member name="T:Serenity.Web.UploadProcessor">
            <summary>
            Obsolete class for upload processing
            </summary>
        </member>
        <member name="M:Serenity.Web.UploadProcessor.#ctor(Serenity.Web.IUploadStorage,Serenity.Abstractions.IExceptionLogger)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="storage">Upload storage</param>
            <param name="logger">Exception logger</param>
            <exception cref="T:System.ArgumentNullException">Storage is null</exception>
        </member>
        <member name="P:Serenity.Web.UploadProcessor.ThumbWidth">
            <summary>
            Thumb width
            </summary>
        </member>
        <member name="P:Serenity.Web.UploadProcessor.ThumbHeight">
            <summary>
            Thumb height
            </summary>
        </member>
        <member name="P:Serenity.Web.UploadProcessor.ThumbBackColor">
            <summary>
            Thumb back color
            </summary>
        </member>
        <member name="P:Serenity.Web.UploadProcessor.ThumbScaleMode">
            <summary>
            Thumb scale mode
            </summary>
        </member>
        <member name="P:Serenity.Web.UploadProcessor.ThumbQuality">
            <summary>
            Thumb quality
            </summary>
        </member>
        <member name="M:Serenity.Web.UploadProcessor.ProcessStream(System.IO.Stream,System.String,Serenity.ITextLocalizer,Serenity.ComponentModel.IUploadOptions)">
            <summary>
            Processes an upload
            </summary>
            <param name="fileContent">File content</param>
            <param name="extension">File extension</param>
            <param name="localizer">Text localizer</param>
            <param name="options">Upload options</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Serenity.Web.UploadSettings">
            <summary>
            Upload settings
            </summary>
        </member>
        <member name="F:Serenity.Web.UploadSettings.SectionKey">
            <summary>
            The default section key in appsettings.json
            </summary>
        </member>
        <member name="P:Serenity.Web.UploadSettings.Path">
            <summary>
            Root path for uploads, default is "App_Data/upload/"
            </summary>
        </member>
        <member name="P:Serenity.Web.UploadSettings.Url">
            <summary>
            Root ur for uploads, default is "~/upload"
            </summary>
        </member>
        <member name="M:Serenity.Web.UploadSettings.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="P:Serenity.Web.UploadSettings.Value">
            <summary>
            Gets this instance
            </summary>
        </member>
        <member name="T:Serenity.Web.UploadStorageExtensions">
            <summary>
            Extension methods for <see cref="T:Serenity.Web.IUploadStorage"/> and related classes
            </summary>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.GetThumbnailUrl(Serenity.Web.IUploadStorage,System.String)">
            <summary>
            Gets thumbnail URL for the file path
            </summary>
            <param name="uploadStorage">Upload storage</param>
            <param name="path">Path</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.CopyTemporaryFile(Serenity.Web.IUploadStorage,Serenity.Web.CopyTemporaryFileOptions)">
            <summary>
            Copies a temporary file to its target location
            </summary>
            <param name="uploadStorage">Upload storage</param>
            <param name="options">Copy options</param>
            <exception cref="T:System.ArgumentNullException">uploadStorage is null</exception>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.ReadAllFileBytes(Serenity.Web.IUploadStorage,System.String)">
            <summary>
            Reads all file bytes
            </summary>
            <param name="uploadStorage">Upload storage</param>
            <param name="path">File path</param>
            <exception cref="T:System.ArgumentNullException">Upload storage is null</exception>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.GetOriginalName(Serenity.Web.IUploadStorage,System.String)">
            <summary>
            Gets original name of a file
            </summary>
            <param name="uploadStorage">Upload storage</param>
            <param name="path">File path</param>
            <exception cref="T:System.ArgumentNullException">uploadStorage is null</exception>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.SetOriginalName(Serenity.Web.IUploadStorage,System.String,System.String)">
            <summary>
            Sets original name for a file
            </summary>
            <param name="uploadStorage">Upload storage</param>
            <param name="path">File path</param>
            <param name="originalName">Original name</param>
            <exception cref="T:System.ArgumentNullException">Upload storage is null</exception>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.ScaleImageAs(System.Object,IImageProcessor,System.Int32,System.Int32,Serenity.Web.ImageScaleMode,System.String,System.String,Serenity.Web.ImageEncoderParams,Serenity.Web.IUploadStorage,System.String,Serenity.Web.OverwriteOption)">
            <summary>
            Scales an image and saves it to an upload storage file
            </summary>
            <param name="image">Source image</param>
            <param name="imageProcessor">Image processor</param>
            <param name="width">Target width</param>
            <param name="height">Target height</param>
            <param name="mode">Scale mode</param>
            <param name="backgroundColor">Pad color</param>
            <param name="mimeType">Mime type of target image file</param>
            <param name="encoderParams">Encoder parameters for target image</param>
            <param name="uploadStorage">Upload storage</param>
            <param name="path">Path</param>
            <param name="overwrite">Overwrite option</param>
            <exception cref="T:System.ArgumentNullException">One of inputs is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Width or height is less than zero</exception>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.ScaleImage(System.Object,IImageProcessor,Serenity.ComponentModel.IUploadImageOptions,Serenity.Web.IUploadStorage,System.String,Serenity.Web.OverwriteOption)">
            <summary>
            Scales the temporary image with provided upload image options if required 
            based on the options and saves the result to the target upload storage file
            </summary>
            <param name="image">Image object</param>
            <param name="imageProcessor">Image processor</param>
            <param name="options">Image upload options</param>
            <param name="uploadStorage">Upload storage</param>
            <param name="temporaryFile">Temporary input file</param>
            <param name="overwrite">Overwrite </param>
            <returns>The resulting image file path</returns>
            <exception cref="T:System.ArgumentNullException">image or options is null</exception>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.CreateDefaultThumb(System.Object,IImageProcessor,Serenity.ComponentModel.IUploadImageOptions,Serenity.Web.IUploadStorage,System.String,Serenity.Web.OverwriteOption)">
            <summary>
            Creates the default thumbnail for image if the size is provided
            in the upload image options (ThumbWidth and ThumbHeight >= 0) and saves it to the target upload storage file
            </summary>
            <param name="image">Image</param>
            <param name="imageProcessor">Image processor</param>
            <param name="options">Upload image options</param>
            <param name="uploadStorage">Upload storage</param>
            <param name="temporaryFile">Input temporary file</param>
            <param name="overwrite">Overwrite option</param>
            <exception cref="T:System.ArgumentNullException">image, options or temporaryFile is null</exception>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.CreateAdditionalThumbs(System.Object,IImageProcessor,Serenity.ComponentModel.IUploadImageOptions,Serenity.Web.IUploadStorage,System.String,Serenity.Web.OverwriteOption)">
            <summary>
            Creates additional thumbs if specified in the upload image options,
            and saves them to the target upload storage
            </summary>
            <param name="image">Image</param>
            <param name="imageProcessor">Image processor</param>
            <param name="options">Upload image options</param>
            <param name="uploadStorage">Target upload storage</param>
            <param name="temporaryFile">Input temporary file</param>
            <param name="overwrite">Overwrite option</param>
            <exception cref="T:System.ArgumentNullException">image, options or temporaryFile is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">options.ThumbSizes contains invalid values</exception>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.ScaleImageAndCreateAllThumbs(System.Object,IImageProcessor,Serenity.ComponentModel.IUploadImageOptions,Serenity.Web.IUploadStorage,System.String,Serenity.Web.OverwriteOption)">
            <summary>
            Depending on the image upload options, scales image, creates default and
            additional thumbs and saves them to the upload storage files.
            </summary>
            <param name="image">Input image</param>
            <param name="imageProcessor">Image processor</param>
            <param name="options">Upload image options</param>
            <param name="uploadStorage">Upload storage</param>
            <param name="temporaryFile">Temporary file</param>
            <param name="overwrite">Overwrite option</param>
            <returns>Temporary file</returns>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.CopyFrom(Serenity.Web.IUploadStorage,Serenity.Web.IUploadStorage,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Copies a file from another upload storage and returns the resulting file path
            </summary>
            <param name="targetStorage">Target upload storage</param>
            <param name="sourceStorage">Source upload storage</param>
            <param name="sourcePath">Source file path</param>
            <param name="targetPath">Target file path</param>
            <param name="autoRename">If a file exists at target, true to auto rename,
            false to raise an error, and null to overwrite</param>
        </member>
        <member name="M:Serenity.Web.UploadStorageExtensions.WriteFile(Serenity.Web.IUploadStorage,System.String,System.IO.Stream,System.Nullable{System.Boolean})">
            <summary>
            Writes a file
            </summary>
            <param name="uploadStorage">Upload storage</param>
            <param name="path">File path</param>
            <param name="source">Source stream</param>
            <param name="autoRename">If a file exists at target, true to auto rename,
            false to raise an error, and null to overwrite</param>
        </member>
        <member name="T:IImageProcessor">
            <summary>
            Image processor abstraction
            </summary>
        </member>
        <member name="M:IImageProcessor.GetImageSize(System.Object)">
            <summary>
            Gets the size for an image
            </summary>
            <param name="image">Image</param>
            <returns>Image size as (width, height) tuple</returns>
        </member>
        <member name="M:IImageProcessor.Load(System.IO.Stream,Serenity.Web.ImageFormatInfo@)">
            <summary>
            Loads the image from the source stream
            </summary>
            <param name="source">Source stream</param>
            <param name="formatInfo">Information about loaded image format</param>
        </member>
        <member name="M:IImageProcessor.Scale(System.Object,System.Int32,System.Int32,Serenity.Web.ImageScaleMode,System.String,System.Boolean)">
            <summary>
              Generates a thumbnail of the source image based on parameters.</summary>
            <remarks>
              <p>Thumbnail width or height must be greater than 0. Otherwise an empty image
              is generated.</p>
              <p>When ImageScaleMode.PreserveRatioNoFill used and both dimensions are set,
              if aspect ratio of source image and thumbnail doesn't match, thumbnail's horizontal or vertical
              size may be different than requested one. In, PreserveRatioWithFill mode thumbnail size will
              be at requested size but empty parts are filled with a solid color.</p></remarks>
            <param name="image">
              Image object to generate thumbnail for (required)</param>
            <param name="width">
              Thumbnail width. If 0, width is calculated by source aspect ratio. Only one of
              width or height can be zero.</param>
            <param name="height">
              Thumbnail height. If 0, height is calculated by source aspect ratio. Only one of
              width or height can be zero.</param>
            <param name="mode">
              Thumbnail generation mode. It is only important when both dimensions are specified and
              source aspect ratio is different than thumbnail (see <see cref="T:Serenity.Web.ImageScaleMode"/>).</param>
            <param name="backgroundColor">
              Specifies fill color for PreserveRatioWithFill mode.</param>
            <param name="inplace">True if the original image should be modified inplace</param>
            <returns>
              Generated thumbnail image. Should be disposed by caller.</returns>
        </member>
        <member name="M:IImageProcessor.Save(System.Object,System.IO.Stream,System.String,Serenity.Web.ImageEncoderParams)">
            <summary>
            Saves the image to target stream
            </summary>
            <param name="image">Image object</param>
            <param name="target">Target stream</param>
            <param name="mimeType">Mime type like "image/jpeg"</param>
            <param name="encoderParams">Encoder parameters</param>
        </member>
    </members>
</doc>
