{
  "version": 3,
  "sources": ["../../../../../Modules/Store/Categories/CategoriesPage.ts", "../../../../../Modules/Store/Categories/CategoriesGrid.ts", "../../../../../Modules/Store/Categories/CategoriesDialog.ts", "../../../../../Modules/Store/Categories/CategoriesExcelImportDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { CategoriesGrid } from './CategoriesGrid';\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new CategoriesGrid($('#GridDiv')).element);\r\n});", "import { Decorators, EntityGrid, LookupEditor } from '@serenity-is/corelib';\r\nimport { toId } from '@serenity-is/corelib/q';\r\nimport { ExcelExportHelper } from '../../Common/Helpers/ExcelExportHelper';\r\nimport { CategoriesColumns, CategoriesRow, CategoriesService, CategoriesTypeRow } from '../../ServerTypes/Store';\r\nimport { CategoriesListRequest } from '../../ServerTypes/Store/CategoriesListRequest';\r\nimport { CategoriesDialog } from './CategoriesDialog';\r\nimport { CategoriesExcelImportDialog } from './CategoriesExcelImportDialog';\r\n\r\n@Decorators.registerClass('Company.Store.CategoriesGrid')\r\nexport class CategoriesGrid extends EntityGrid<CategoriesRow, any> {\r\n    protected getColumnsKey() { return CategoriesColumns.columnsKey; }\r\n    protected getDialogType() { return CategoriesDialog; }\r\n    protected getIdProperty() { return CategoriesRow.idProperty; }\r\n    protected getInsertPermission() { return CategoriesRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return CategoriesRow.localTextPrefix; }\r\n    protected getService() { return CategoriesService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\r\n\r\n    //protected getQuickFilters() {\r\n    //    var filters = super.getQuickFilters();\r\n\r\n    //    filters.push({\r\n    //        type: LookupEditor,\r\n    //        options: {\r\n    //            lookupKey: CategoriesTypeRow.lookupKey\r\n    //        },\r\n    //        //field: 'CategoriesID',\r\n    //        //title: 'CategoriesType',\r\n    //        field: 'CategoryID',\r\n    //        title: 'CategoryType',\r\n    //        handler: w => {\r\n    //            (this.view.params as CategoriesListRequest).CategoryName = toId(w.value);\r\n    //        },\r\n    //        cssClass: 'hidden-xs'\r\n    //    });\r\n\r\n    //    return filters;\r\n    //}\r\n\r\n    protected getDefaultSortBy() {\r\n        return [CategoriesRow.Fields.CategoryCode];\r\n    }\r\n\r\n    protected getButtons() {\r\n        var buttons = super.getButtons();\r\n\r\n        buttons.push(ExcelExportHelper.createToolButton({\r\n            title: 'Export To Excel',\r\n            grid: this,\r\n            service: CategoriesService.baseUrl + '/ListExcel',\r\n            onViewSubmit: () => this.onViewSubmit(),\r\n            separator: true\r\n        }));\r\n\r\n        buttons.push({\r\n            title: 'Import From Excel',\r\n            cssClass: 'export-xlsx-button',\r\n            onClick: () => {\r\n                // open import dialog, let it handle rest\r\n                var dialog = new CategoriesExcelImportDialog();\r\n                dialog.element.on('dialogclose', () => {\r\n                    this.refresh();\r\n                    dialog = null;\r\n                });\r\n                dialog.dialogOpen();\r\n            }\r\n        });\r\n\r\n        return buttons;\r\n    }\r\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { CategoriesForm, CategoriesRow, CategoriesService } from '../../ServerTypes/Store';\r\n\r\n@Decorators.registerClass('Store.Store.CategoriesDialog')\r\n export class CategoriesDialog extends EntityDialog<CategoriesRow, any> {\r\n    protected getFormKey() { return CategoriesForm.formKey; }\r\n    protected getIdProperty() { return CategoriesRow.idProperty; }\r\n    protected getLocalTextPrefix() { return CategoriesRow.localTextPrefix; }\r\n    protected getNameProperty() { return CategoriesRow.nameProperty; }\r\n    protected getService() { return CategoriesService.baseUrl; }\r\n    protected getDeletePermission() { return CategoriesRow.deletePermission; }\r\n    protected getInsertPermission() { return CategoriesRow.insertPermission; }\r\n    protected getUpdatePermission() { return CategoriesRow.updatePermission; }\r\n\r\n    protected form = new CategoriesForm(this.idPrefix);\r\n}", "import { Decorators, PropertyDialog } from \"@serenity-is/corelib\";\r\nimport { DialogButton, isEmptyOrNull, notifyError, notifyInfo } from \"@serenity-is/corelib/q\";\r\nimport { toId } from '@serenity-is/corelib/q';\r\nimport { CategoriesExcelImportForm, CategoriesService } from \"../../ServerTypes/Store\";\r\n\r\n\r\n@Decorators.registerClass('Company.Store.CategoriesExcelImportDialog')\r\nexport class CategoriesExcelImportDialog extends PropertyDialog<any, any>{\r\n\r\n    protected form: CategoriesExcelImportForm;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.form = new CategoriesExcelImportForm(this.idPrefix);\r\n    }\r\n\r\n    protected getDialogTitle(): string {\r\n        return \"Excel Import\";\r\n    }\r\n\r\n    protected getDialogButtons(): DialogButton[] {\r\n        return [\r\n            {\r\n                text: 'Import',\r\n                click: () => {\r\n                    if (!this.validateBeforeSave())\r\n                        return;\r\n\r\n                    if (this.form.FileName.value == null ||\r\n                        isEmptyOrNull(this.form.FileName.value.Filename)) {\r\n                        notifyError(\"Please select a file!\");\r\n                        return;\r\n                    }\r\n\r\n                    CategoriesService.ExcelImport({\r\n                        FileName: this.form.FileName.value.Filename\r\n                    }, response => {\r\n                        notifyInfo(\r\n                            'Inserted: ' + (response.Inserted || 0) +\r\n                            ', Updated: ' + (response.Updated || 0));\r\n\r\n                        if (response.ErrorList != null && response.ErrorList.length > 0) {\r\n                            notifyError(response.ErrorList.join(',\\r\\n '));\r\n                        }\r\n\r\n                        this.dialogClose();\r\n                    });\r\n                },\r\n            },\r\n            {\r\n                text: 'Cancel',\r\n                click: () => this.dialogClose()\r\n            }\r\n        ];\r\n    }\r\n}\r\n\r\n"],
  "mappings": "mNAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAqD,SCArD,IAAAC,EAAyC,SAIjC,IAAMC,EAAN,cAA+B,cAAiC,CAAhE,kCAUJ,KAAU,KAAO,IAAIC,EAAe,KAAK,QAAQ,EATvC,YAAa,CAAE,OAAOA,EAAe,OAAS,CAC9C,eAAgB,CAAE,OAAOC,EAAc,UAAY,CACnD,oBAAqB,CAAE,OAAOA,EAAc,eAAiB,CAC7D,iBAAkB,CAAE,OAAOA,EAAc,YAAc,CACvD,YAAa,CAAE,OAAOC,EAAkB,OAAS,CACjD,qBAAsB,CAAE,OAAOD,EAAc,gBAAkB,CAC/D,qBAAsB,CAAE,OAAOA,EAAc,gBAAkB,CAC/D,qBAAsB,CAAE,OAAOA,EAAc,gBAAkB,CAG7E,EAXcE,EAAAJ,EAAA,oBAAAA,EAANK,EAAA,CADP,aAAW,cAAc,8BAA8B,GAC1CL,GCJd,IAAAM,EAA2C,SAC3CC,EAAqE,SAM9D,IAAMC,EAAN,cAA0C,gBAAwB,CAIrE,aAAc,CACV,MAAM,EAEN,KAAK,KAAO,IAAIC,EAA0B,KAAK,QAAQ,CAC3D,CAEU,gBAAyB,CAC/B,MAAO,cACX,CAEU,kBAAmC,CACzC,MAAO,CACH,CACI,KAAM,SACN,MAAO,IAAM,CACT,GAAK,KAAK,mBAAmB,EAG7B,IAAI,KAAK,KAAK,SAAS,OAAS,SAC5B,iBAAc,KAAK,KAAK,SAAS,MAAM,QAAQ,EAAG,IAClD,eAAY,uBAAuB,EACnC,MACJ,CAEAC,EAAkB,YAAY,CAC1B,SAAU,KAAK,KAAK,SAAS,MAAM,QACvC,EAAGC,GAAY,IACX,cACI,cAAgBA,EAAS,UAAY,GACrC,eAAiBA,EAAS,SAAW,EAAE,EAEvCA,EAAS,WAAa,MAAQA,EAAS,UAAU,OAAS,MAC1D,eAAYA,EAAS,UAAU,KAAK;AAAA,EAAQ,CAAC,EAGjD,KAAK,YAAY,CACrB,CAAC,EACL,CACJ,EACA,CACI,KAAM,SACN,MAAO,IAAM,KAAK,YAAY,CAClC,CACJ,CACJ,CACJ,EAjDaC,EAAAJ,EAAA,+BAAAA,EAANK,EAAA,CADN,aAAW,cAAc,2CAA2C,GACxDL,GFEN,IAAMM,EAAN,cAA6B,YAA+B,CACrD,eAAgB,CAAE,OAAOC,EAAkB,UAAY,CACvD,eAAgB,CAAE,OAAOC,CAAkB,CAC3C,eAAgB,CAAE,OAAOC,EAAc,UAAY,CACnD,qBAAsB,CAAE,OAAOA,EAAc,gBAAkB,CAC/D,oBAAqB,CAAE,OAAOA,EAAc,eAAiB,CAC7D,YAAa,CAAE,OAAOC,EAAkB,OAAS,CAE3D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CAuBU,kBAAmB,CACzB,MAAO,CAACF,EAAc,OAAO,YAAY,CAC7C,CAEU,YAAa,CACnB,IAAIG,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,KAAKC,EAAkB,iBAAiB,CAC5C,MAAO,kBACP,KAAM,KACN,QAASH,EAAkB,QAAU,aACrC,aAAc,IAAM,KAAK,aAAa,EACtC,UAAW,EACf,CAAC,CAAC,EAEFE,EAAQ,KAAK,CACT,MAAO,oBACP,SAAU,qBACV,QAAS,IAAM,CAEX,IAAIE,EAAS,IAAIC,EACjBD,EAAO,QAAQ,GAAG,cAAe,IAAM,CACnC,KAAK,QAAQ,EACbA,EAAS,IACb,CAAC,EACDA,EAAO,WAAW,CACtB,CACJ,CAAC,EAEMF,CACX,CACJ,EAhEaI,EAAAV,EAAA,kBAAAA,EAANW,EAAA,CADN,aAAW,cAAc,8BAA8B,GAC3CX,GDNb,EAAE,UAAW,IACT,0BAAuB,IAAIY,EAAe,EAAE,UAAU,CAAC,EAAE,OAAO,CACpE,CAAC",
  "names": ["import_q", "import_corelib", "import_corelib", "CategoriesDialog", "CategoriesForm", "CategoriesRow", "CategoriesService", "__name", "__decorateClass", "import_corelib", "import_q", "CategoriesExcelImportDialog", "CategoriesExcelImportForm", "CategoriesService", "response", "__name", "__decorateClass", "CategoriesGrid", "CategoriesColumns", "CategoriesDialog", "CategoriesRow", "CategoriesService", "container", "buttons", "ExcelExportHelper", "dialog", "CategoriesExcelImportDialog", "__name", "__decorateClass", "CategoriesGrid"]
}
