{
  "version": 3,
  "sources": ["../../../../../Modules/Store/WaresOrder/WaresOrderPage.ts", "../../../../../Modules/Store/WaresOrder/WaresOrderGrid.ts", "../../../../../Modules/Store/WaresOrder/WaresOrderDialog.ts", "../../../../../Modules/Common/Reporting/ReportHelper.ts", "../../../../../Modules/Common/Helpers/PdfExportHelper.ts"],
  "sourcesContent": ["import { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { WaresOrderGrid } from './WaresOrderGrid';\n\n$(function () {\n    initFullHeightGridPage(new WaresOrderGrid($('#GridDiv')).element);\n});", "import { Decorators, EntityGrid, EnumEditor, LookupEditor, ToolButton } from \"@serenity-is/corelib\";\nimport { toId } from \"@serenity-is/corelib/q\";\nimport { WaresOrderColumns, WaresOrderListRequest, WaresOrderRow, WaresOrderService, WaresRow } from \"../../ServerTypes/Store\";\nimport { WaresOrderDialog } from \"./WaresOrderDialog\";\nimport { StoreAverageDialog } from \"./StoreAverageDialog\";\nimport { ExcelExportHelper } from \"../../Common/Helpers/ExcelExportHelper\";\r\nimport { PdfExportHelper } from \"../../Common/Helpers/PdfExportHelper\";\r\nimport { ReportHelper } from \"../../Common/Reporting/ReportHelper\";\n\n\nconst fld = WaresOrderRow.Fields;\r\n\r\n@Decorators.registerClass()\r\n@Decorators.filterable()\nexport class WaresOrderGrid<P = {}> extends EntityGrid<WaresOrderRow, P> {\n    protected getColumnsKey() { return WaresOrderColumns.columnsKey; }\r\n    protected getDialogType() { return <any>WaresOrderDialog; }\r\n    protected getIdProperty() { return WaresOrderRow.idProperty; }\r\n    protected getInsertPermission() { return WaresOrderRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return WaresOrderRow.localTextPrefix; }\r\n    protected getService() { return WaresOrderService.baseUrl; }\n\n    protected shippingStateFilter: EnumEditor;\n\n    protected getQuickFilters() { //: Serenity.QuickFilter<Serenity.Widget<any>, any > []  {\r\n\r\n        var filters = super.getQuickFilters();\r\n\r\n        filters.push({\r\n            type: LookupEditor,\r\n            options: {\r\n                lookupKey: WaresRow.lookupKey\r\n            },\r\n            field: 'WaresOrderID',\r\n            title: 'Contains Wares in Details',\r\n            handler: w => {\r\n                (this.view.params as WaresOrderListRequest).WaresId = toId(w.value);\r\n            },\r\n            cssClass: 'hidden-xs'\r\n        });\r\n\r\n        return filters;\r\n    }\n\n    protected createQuickFilters() {\n        super.createQuickFilters();\n\n        this.shippingStateFilter = this.findQuickFilter(EnumEditor, fld.ShippingState);\n    }\n\n    protected getButtons(): ToolButton[] {\n        var buttons = super.getButtons();\n\n        buttons.push(ExcelExportHelper.createToolButton({\n            grid: this,\n            service: WaresOrderService.baseUrl + '/ListExcel',\n            onViewSubmit: () => this.onViewSubmit(),\n            separator: true\n        }));\n\n        buttons.push(PdfExportHelper.createToolButton({\n            grid: this,\n            onViewSubmit: () => this.onViewSubmit()\n        }));\n\n        buttons.push({\n            title: 'Warehouse',\r\n            cssClass: 'export-xlsx-button',\r\n            onClick: () => {\r\n                var dialog = new StoreAverageDialog();\r\n                dialog.element.on('dialogclose', () => {\r\n                    this.refresh();\r\n                    dialog = null;\r\n                });\r\n                dialog.dialogOpen();\r\n            }\r\n        });\n\n        return buttons;\n    }\n\n    protected getColumns() {\n        var columns = super.getColumns();\n\n        columns.splice(1, 0, {\n            id: 'Print Invoice',\n            field: null,\n            name: '',\n            cssClass: 'align-center',\n            format: ctx => '<a class=\"inline-action print-invoice\" title=\"invoice\">' +\r\n                '<i class=\"fa fa-file-pdf-o text-red\"></i></a>',\r\n            width: 24,\r\n            minWidth: 24,\r\n            maxWidth: 24\r\n        });\n\n        return columns;\n    }\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\r\n        super.onClick(e, row, cell);\r\n\r\n        if (e.isDefaultPrevented())\r\n            return;\r\n\r\n        var item = this.itemAt(row);\r\n        var target = $(e.target);\r\n\r\n        // if user clicks \"i\" element, e.g. icon\r\n        if (target.parent().hasClass('inline-action'))\r\n            target = target.parent();\r\n\r\n        if (target.hasClass('inline-action')) {\r\n            e.preventDefault();\r\n\r\n            if (target.hasClass('print-invoice')) {\r\n                ReportHelper.execute({\r\n                    reportKey: 'Store.WaresOrderDetail',\r\n                    params: {\r\n                        WaresOrderID: item.WaresOrderId\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\n\n    public set_shippingState(value: number): void {\n        this.shippingStateFilter.value = value == null ? '' : value.toString();\n    }\n\n    protected addButtonClick() {\n        var eq = this.view.params.EqualityFilter;\n        this.editItem(<WaresOrderRow>{\n            CounterpartyID: eq ? eq.CounterpartyID : null\n        });\n    }\n\n}\r\n", "import { WaresOrderForm, WaresOrderRow, WaresOrderService } from \"@/ServerTypes/Store\";\r\nimport { Decorators, EntityDialog } from \"@serenity-is/corelib\";\r\nimport { ReportHelper } from \"../../Common/Reporting/ReportHelper\";\r\n\r\n@Decorators.registerClass('Company.Store.WaresOrderDialog')\r\nexport class WaresOrderDialog<P = {}> extends EntityDialog<WaresOrderRow, P> {\r\n    protected getFormKey() { return WaresOrderForm.formKey; }\r\n    protected getRowDefinition() { return WaresOrderRow; }\r\n    protected getService() { return WaresOrderService.baseUrl; }\r\n\r\n    protected form = new WaresOrderForm(this.idPrefix);\r\n\r\n    getToolbarButtons() {\r\n        var buttons = super.getToolbarButtons();\r\n\r\n        buttons.push(ReportHelper.createToolButton({\r\n            title: 'Invoice',\r\n            cssClass: 'export-pdf-button',\r\n            reportKey: 'Northwind.OrderDetail',\r\n            getParams: () => ({\r\n                WaresOrderID: this.entityId\r\n            })\r\n        }));\r\n\r\n        return buttons;\r\n    }\r\n\r\n    protected updateInterface() {\r\n        super.updateInterface();\r\n\r\n        this.toolbar.findButton('export-pdf-button').toggle(this.isEditMode());\r\n    }\r\n}\r\n", "import { ToolButton } from \"@serenity-is/corelib\";\r\nimport { IconClassName, postToUrl } from \"@serenity-is/corelib/q\";\n\r\nexport interface ReportExecuteOptions {\r\n    reportKey: string;\r\n    download?: boolean;\r\n    extension?: 'pdf' | 'htm' | 'html' | 'xlsx' | 'docx';\r\n    getParams?: () => any;\r\n    params?: { [key: string]: any }\r\n    target?: string;\r\n}\r\n\r\nexport interface ReportButtonOptions extends ReportExecuteOptions {\r\n    title?: string;\r\n    cssClass?: string;\r\n    icon?: IconClassName;\r\n}\r\n\r\nexport namespace ReportHelper {\r\n\r\n    export function createToolButton(options: ReportButtonOptions): ToolButton {\r\n        return {\r\n            title: options.title ?? 'Report',\r\n            cssClass: options.cssClass ?? 'print-button',\r\n            icon: options.icon,\r\n            onClick: () => {\r\n                ReportHelper.execute(options);\r\n            }\r\n        };\r\n    }\r\n\r\n    export function execute(options: ReportExecuteOptions) {\r\n        var opt = options.getParams ? options.getParams() : options.params;\r\n\r\n        postToUrl({\r\n            url: '~/Serenity.Extensions/Report/' + (options.download ? 'Download' : 'Render'),\r\n            params: {\r\n                key: options.reportKey,\r\n                ext: options.extension ?? 'pdf',\r\n                opt: opt ? JSON.stringify(opt) : ''\r\n            },\r\n            target: options.target ?? '_blank'\r\n        });\r\n    }\r\n}\r\n", "import { DataGrid, ToolButton } from \"@serenity-is/corelib\";\r\nimport { deepClone, format, formatDate, ListRequest, ListResponse, resolveUrl, serviceCall } from \"@serenity-is/corelib/q\";\r\nimport { Column, Grid } from \"@serenity-is/sleekgrid\";\r\n\r\nexport interface PdfExportOptions {\r\n    grid: DataGrid<any, any>;\r\n    onViewSubmit: () => boolean;\r\n    title?: string;\r\n    hint?: string;\r\n    separator?: boolean;\r\n    reportTitle?: string;\r\n    titleTop?: number;\r\n    titleFontSize?: number;\r\n    fileName?: string;\r\n    pageNumbers?: boolean;\r\n    columnTitles?: { [key: string]: string };\r\n    tableOptions?: jsPDF.AutoTableOptions;\r\n    output?: string;\r\n    autoPrint?: boolean;\r\n    printDateTimeHeader?: boolean;\r\n}\r\n\r\nexport namespace PdfExportHelper {\r\n\r\n    function toAutoTableColumns(srcColumns: Column[], columnStyles: { [dataKey: string]: jsPDF.AutoTableStyles; },\r\n        columnTitles: { [key: string]: string }) {\r\n        return srcColumns.map(src => {\r\n            let col: jsPDF.AutoTableColumn = {\r\n                dataKey: src.id || src.field,\r\n                title: src.name || ''\r\n            };\r\n\r\n            if (columnTitles && columnTitles[col.dataKey] != null)\r\n                col.title = columnTitles[col.dataKey];\r\n\r\n            let style: jsPDF.AutoTableStyles = {};\r\n            if ((src.cssClass || '').indexOf(\"align-right\") >= 0)\r\n                style.halign = 'right';\r\n            else if ((src.cssClass || '').indexOf(\"align-center\") >= 0)\r\n                style.halign = 'center';\r\n\r\n            columnStyles[col.dataKey] = style;\r\n\r\n            return col;\r\n        });\r\n    }\r\n\r\n    function toAutoTableData(slickGrid: Grid, entities: any[], keys: string[], srcColumns: Column[]) {\r\n        let el = document.createElement('span');\r\n        let row = 0;\r\n        return entities.map(item => {\r\n            let dst = [];\r\n            for (let cell = 0; cell < srcColumns.length; cell++) {\r\n                var col = srcColumns[cell];\r\n                var format = slickGrid.getFormatter(row, col);\r\n                var ctx = slickGrid.getFormatterContext(row, cell);\r\n                ctx.item = item;\r\n                ctx.value = item[col.field];\r\n                let html: string = format ? format(ctx) : '';\r\n                if (!html || (html.indexOf('<') < 0 && html.indexOf('&') < 0))\r\n                    dst.push(html);\r\n                else {\r\n                    el.innerHTML = html;\r\n                    if (el.children.length == 1 &&\r\n                        $(el.children[0]).is(\"select\")) {\r\n                        dst.push($(el.children[0]).children(\"[selected]\").text());\r\n                    }\r\n                    else if (el.children.length == 1 &&\r\n                        $(el.children[0]).is(\":input\")) {\r\n                        dst.push($(el.children[0]).val());\r\n                    }\r\n                    else if (el.children.length == 1 &&\r\n                        $(el.children).is('.check-box')) {\r\n                        dst.push($(el.children).hasClass(\"checked\") ? \"X\" : \"\")\r\n                    }\r\n                    else\r\n                        dst.push(el.textContent || '');\r\n                }\r\n            }\r\n            row++;\r\n            return dst;\r\n        });\r\n    }\r\n\r\n    export function exportToPdf(options: PdfExportOptions): void {\r\n\r\n        var g = options.grid;\r\n\r\n        if (!options.onViewSubmit())\r\n            return;\r\n\r\n        includeAutoTable();\r\n\r\n        var request = deepClone(g.view.params) as ListRequest;\r\n        request.Take = 0;\r\n        request.Skip = 0;\r\n\r\n        var sortBy = g.view.sortBy;\r\n        if (sortBy != null)\r\n            request.Sort = sortBy;\r\n\r\n        var gridColumns = g.slickGrid.getColumns();\r\n        gridColumns = gridColumns.filter(x => x.id !== \"__select__\");\r\n\r\n        request.IncludeColumns = [];\r\n        for (var column of gridColumns)\r\n            request.IncludeColumns.push(column.id || column.field);\r\n\r\n        serviceCall({\r\n            url: g.view.url,\r\n            request: request,\r\n            onSuccess: response => {\r\n                // @ts-ignore\r\n                let doc = new jsPDF('l', 'pt');\r\n                let srcColumns = gridColumns;\r\n                let columnStyles: { [dataKey: string]: jsPDF.AutoTableStyles; } = {};\r\n                let columns = toAutoTableColumns(srcColumns, columnStyles, options.columnTitles);\r\n                var keys = columns.map(x => x.dataKey);\r\n                let entities = (<ListResponse<any>>response).Entities || [];\r\n                let data = toAutoTableData(g.slickGrid, entities, keys, srcColumns);\r\n\r\n                doc.setFontSize(options.titleFontSize || 10);\r\n                doc.setFont('helvetica', 'bold');\r\n                let reportTitle = options.reportTitle || g.getTitle() || \"Report\";\r\n\r\n                doc.autoTableText(reportTitle, doc.internal.pageSize.width / 2,\r\n                    options.titleTop || 25, { halign: 'center' });\r\n\r\n                var totalPagesExp = \"{{T}}\";\r\n\r\n                let pageNumbers = options.pageNumbers == null || options.pageNumbers;\r\n                var autoOptions = $.extend({\r\n                    margin: { top: 25, left: 25, right: 25, bottom: pageNumbers ? 25 : 30 },\r\n                    startY: 60,\r\n                    styles: {\r\n                        fontSize: 8,\r\n                        overflow: 'linebreak',\r\n                        cellPadding: 2,\r\n                        valign: 'middle'\r\n                    },\r\n                    columnStyles: columnStyles\r\n                }, options.tableOptions);\r\n\r\n                var footer: (data: any) => void;\r\n                var header: (data: any) => void;\r\n                if (pageNumbers) {\r\n                    footer = function (data) {\r\n                        var str = data.pageCount;\r\n                        // Total page number plugin only available in jspdf v1.0+\r\n                        if (typeof doc.putTotalPages === 'function') {\r\n                            str = str + \" / \" + totalPagesExp;\r\n                        }\r\n                        doc.autoTableText(str, doc.internal.pageSize.width / 2,\r\n                            doc.internal.pageSize.height - autoOptions.margin.bottom, {\r\n                            halign: 'center'\r\n                        });\r\n                    };\r\n                }\r\n\r\n                // Print header of page\r\n                if (options.printDateTimeHeader == null || options.printDateTimeHeader) {\r\n                    header = function (data) {\r\n                        doc.setFont('helvetica', 'normal');\r\n                        doc.setFontSize(8);\r\n\r\n                        // Date and time of the report\r\n                        doc.autoTableText(formatDate(new Date(), \"dd-MM-yyyy HH:mm\"),\r\n                            doc.internal.pageSize.width - autoOptions.margin.right, 13,\r\n                            {\r\n                                halign: 'right'\r\n                            });\r\n                    };\r\n                }\r\n\r\n                autoOptions.didDrawPage = (data) => {\r\n                    if (!!header) header(data);\r\n                    if (!!footer) footer(data);\r\n                };\r\n\r\n                autoOptions.head = [columns];\r\n                autoOptions.body = data;\r\n\r\n                doc.autoTable(autoOptions);\r\n\r\n                if (typeof doc.putTotalPages === 'function') {\r\n                    doc.putTotalPages(totalPagesExp);\r\n                }\r\n\r\n\r\n                if (!options.output || options.output == \"file\") {\r\n                    var fileName = options.fileName || options.reportTitle || \"{0}_{1}.pdf\";\r\n                    fileName = format(fileName, g.getTitle() || \"report\",\r\n                        formatDate(new Date(), \"yyyyMMdd_HHmm\"));\r\n                    doc.save(fileName);\r\n                    return;\r\n                }\r\n\r\n                if (options.autoPrint)\r\n                    doc.autoPrint();\r\n\r\n                var output = options.output;\r\n                if (output == 'newwindow' || '_blank')\r\n                    output = 'dataurlnewwindow';\r\n                else if (output == 'window')\r\n                    output = 'datauri';\r\n\r\n                doc.output(output);\r\n            }\r\n        });\r\n    }\r\n\r\n    export function createToolButton(options: PdfExportOptions) {\r\n\r\n        return <ToolButton>{\r\n            title: options.title || '',\r\n            hint: options.hint || 'PDF',\r\n            cssClass: 'export-pdf-button',\r\n            onClick: () => exportToPdf(options),\r\n            separator: options.separator\r\n        };\r\n    }\r\n\r\n    function includeJsPDF() {\r\n        // @ts-ignore\r\n        if (typeof jsPDF !== \"undefined\")\r\n            return;\r\n\r\n        var script = $(\"jsPDFScript\");\r\n        if (script.length > 0)\r\n            return;\r\n\r\n        $(\"<script/>\")\r\n            .attr(\"type\", \"text/javascript\")\r\n            .attr(\"id\", \"jsPDFScript\")\r\n            .attr(\"src\", resolveUrl(\"~/Serenity.Assets/Scripts/jspdf.min.js\"))\r\n            .appendTo(document.head);\r\n\r\n        if (typeof jsPDF === \"undefined\" && typeof jspdf !== \"undefined\") {\r\n            window.jsPDF = jspdf.jsPDF;\r\n        }\r\n    }\r\n\r\n    function includeAutoTable() {\r\n        includeJsPDF();\r\n\r\n        // @ts-ignore\r\n        if (typeof jsPDF === \"undefined\" ||\r\n            typeof (jsPDF as any).API == \"undefined\" ||\r\n            typeof (jsPDF as any).API.autoTable !== \"undefined\")\r\n            return;\r\n\r\n        var script = $(\"jsPDFAutoTableScript\");\r\n        if (script.length > 0)\r\n            return;\r\n\r\n        $(\"<script/>\")\r\n            .attr(\"type\", \"text/javascript\")\r\n            .attr(\"id\", \"jsPDFAutoTableScript\")\r\n            .attr(\"src\", resolveUrl(\"~/Serenity.Assets/Scripts/jspdf.plugin.autotable.min.js\"))\r\n            .appendTo(document.head);\r\n    }\r\n}"],
  "mappings": "wRAAA,IAAAA,EAAuC,SCAvC,IAAAC,EAA6E,SAC7EC,EAAqB,SCArB,IAAAC,EAAyC,SCAzC,IAAAC,EAAyC,SAiBlC,IAAUC,MAAV,CAEI,SAASC,EAAiBC,EAA0C,CApB/E,IAAAC,EAAAC,EAqBQ,MAAO,CACH,OAAOD,EAAAD,EAAQ,QAAR,KAAAC,EAAiB,SACxB,UAAUC,EAAAF,EAAQ,WAAR,KAAAE,EAAoB,eAC9B,KAAMF,EAAQ,KACd,QAAS,IAAM,CACXF,EAAa,QAAQE,CAAO,CAChC,CACJ,CACJ,CATOF,EAAS,iBAAAC,EAAAI,EAAAJ,EAAA,oBAWT,SAASK,EAAQJ,EAA+B,CA/B3D,IAAAC,EAAAC,EAgCQ,IAAIG,EAAML,EAAQ,UAAYA,EAAQ,UAAU,EAAIA,EAAQ,UAE5D,aAAU,CACN,IAAK,iCAAmCA,EAAQ,SAAW,WAAa,UACxE,OAAQ,CACJ,IAAKA,EAAQ,UACb,KAAKC,EAAAD,EAAQ,YAAR,KAAAC,EAAqB,MAC1B,IAAKI,EAAM,KAAK,UAAUA,CAAG,EAAI,EACrC,EACA,QAAQH,EAAAF,EAAQ,SAAR,KAAAE,EAAkB,QAC9B,CAAC,CACL,CAZOJ,EAAS,QAAAM,EAAAD,EAAAC,EAAA,aAbHN,MAAA,KDbV,IAAMQ,EAAN,cAAuC,cAA+B,CAAtE,kCAKH,KAAU,KAAO,IAAIC,EAAe,KAAK,QAAQ,EAJvC,YAAa,CAAE,OAAOA,EAAe,OAAS,CAC9C,kBAAmB,CAAE,OAAOC,CAAe,CAC3C,YAAa,CAAE,OAAOC,EAAkB,OAAS,CAI3D,mBAAoB,CAChB,IAAIC,EAAU,MAAM,kBAAkB,EAEtC,OAAAA,EAAQ,KAAKC,EAAa,iBAAiB,CACvC,MAAO,UACP,SAAU,oBACV,UAAW,wBACX,UAAW,KAAO,CACd,aAAc,KAAK,QACvB,EACJ,CAAC,CAAC,EAEKD,CACX,CAEU,iBAAkB,CACxB,MAAM,gBAAgB,EAEtB,KAAK,QAAQ,WAAW,mBAAmB,EAAE,OAAO,KAAK,WAAW,CAAC,CACzE,CACJ,EA3BaE,EAAAN,EAAA,oBAAAA,EAANO,EAAA,CADN,aAAW,cAAc,gCAAgC,GAC7CP,GEJb,IAAAQ,EAAkG,SAqB3F,IAAUC,MAAV,CAEH,SAASC,EAAmBC,EAAsBC,EAC9CC,EAAyC,CACzC,OAAOF,EAAW,IAAIG,GAAO,CACzB,IAAIC,EAA6B,CAC7B,QAASD,EAAI,IAAMA,EAAI,MACvB,MAAOA,EAAI,MAAQ,EACvB,EAEID,GAAgBA,EAAaE,EAAI,OAAO,GAAK,OAC7CA,EAAI,MAAQF,EAAaE,EAAI,OAAO,GAExC,IAAIC,EAA+B,CAAC,EACpC,OAAKF,EAAI,UAAY,IAAI,QAAQ,aAAa,GAAK,EAC/CE,EAAM,OAAS,SACTF,EAAI,UAAY,IAAI,QAAQ,cAAc,GAAK,IACrDE,EAAM,OAAS,UAEnBJ,EAAaG,EAAI,OAAO,EAAIC,EAErBD,CACX,CAAC,CACL,CArBSE,EAAAP,EAAA,sBAuBT,SAASQ,EAAgBC,EAAiBC,EAAiBC,EAAgBV,EAAsB,CAC7F,IAAIW,EAAK,SAAS,cAAc,MAAM,EAClCC,EAAM,EACV,OAAOH,EAAS,IAAII,GAAQ,CACxB,IAAIC,EAAM,CAAC,EACX,QAASC,EAAO,EAAGA,EAAOf,EAAW,OAAQe,IAAQ,CACjD,IAAIX,EAAMJ,EAAWe,CAAI,EACrBC,EAASR,EAAU,aAAaI,EAAKR,CAAG,EACxCa,EAAMT,EAAU,oBAAoBI,EAAKG,CAAI,EACjDE,EAAI,KAAOJ,EACXI,EAAI,MAAQJ,EAAKT,EAAI,KAAK,EAC1B,IAAIc,EAAeF,EAASA,EAAOC,CAAG,EAAI,GACtC,CAACC,GAASA,EAAK,QAAQ,GAAG,EAAI,GAAKA,EAAK,QAAQ,GAAG,EAAI,EACvDJ,EAAI,KAAKI,CAAI,GAEbP,EAAG,UAAYO,EACXP,EAAG,SAAS,QAAU,GACtB,EAAEA,EAAG,SAAS,CAAC,CAAC,EAAE,GAAG,QAAQ,EAC7BG,EAAI,KAAK,EAAEH,EAAG,SAAS,CAAC,CAAC,EAAE,SAAS,YAAY,EAAE,KAAK,CAAC,EAEnDA,EAAG,SAAS,QAAU,GAC3B,EAAEA,EAAG,SAAS,CAAC,CAAC,EAAE,GAAG,QAAQ,EAC7BG,EAAI,KAAK,EAAEH,EAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,EAE3BA,EAAG,SAAS,QAAU,GAC3B,EAAEA,EAAG,QAAQ,EAAE,GAAG,YAAY,EAC9BG,EAAI,KAAK,EAAEH,EAAG,QAAQ,EAAE,SAAS,SAAS,EAAI,IAAM,EAAE,EAGtDG,EAAI,KAAKH,EAAG,aAAe,EAAE,EAEzC,CACA,OAAAC,IACOE,CACX,CAAC,CACL,CAnCSR,EAAAC,EAAA,mBAqCF,SAASY,EAAYC,EAAiC,CAEzD,IAAIC,EAAID,EAAQ,KAEhB,GAAKA,EAAQ,aAAa,EAG1B,CAAAE,EAAiB,EAEjB,IAAIC,KAAU,aAAUF,EAAE,KAAK,MAAM,EACrCE,EAAQ,KAAO,EACfA,EAAQ,KAAO,EAEf,IAAIC,EAASH,EAAE,KAAK,OAChBG,GAAU,OACVD,EAAQ,KAAOC,GAEnB,IAAIC,EAAcJ,EAAE,UAAU,WAAW,EACzCI,EAAcA,EAAY,OAAO,GAAK,EAAE,KAAO,YAAY,EAE3DF,EAAQ,eAAiB,CAAC,EAC1B,QAASG,KAAUD,EACfF,EAAQ,eAAe,KAAKG,EAAO,IAAMA,EAAO,KAAK,KAEzD,eAAY,CACR,IAAKL,EAAE,KAAK,IACZ,QAASE,EACT,UAAWI,GAAY,CAEnB,IAAIC,EAAM,IAAI,MAAM,IAAK,IAAI,EACzB5B,EAAayB,EACbxB,EAA8D,CAAC,EAC/D4B,EAAU9B,EAAmBC,EAAYC,EAAcmB,EAAQ,YAAY,EAC/E,IAAIV,EAAOmB,EAAQ,IAAIC,GAAKA,EAAE,OAAO,EACrC,IAAIrB,EAA+BkB,EAAU,UAAY,CAAC,EACtDI,EAAOxB,EAAgBc,EAAE,UAAWZ,EAAUC,EAAMV,CAAU,EAElE4B,EAAI,YAAYR,EAAQ,eAAiB,EAAE,EAC3CQ,EAAI,QAAQ,YAAa,MAAM,EAC/B,IAAII,EAAcZ,EAAQ,aAAeC,EAAE,SAAS,GAAK,SAEzDO,EAAI,cAAcI,EAAaJ,EAAI,SAAS,SAAS,MAAQ,EACzDR,EAAQ,UAAY,GAAI,CAAE,OAAQ,QAAS,CAAC,EAEhD,IAAIa,EAAgB,QAEpB,IAAIC,EAAcd,EAAQ,aAAe,MAAQA,EAAQ,YACzD,IAAIe,EAAc,EAAE,OAAO,CACvB,OAAQ,CAAE,IAAK,GAAI,KAAM,GAAI,MAAO,GAAI,OAAQD,EAAc,GAAK,EAAG,EACtE,OAAQ,GACR,OAAQ,CACJ,SAAU,EACV,SAAU,YACV,YAAa,EACb,OAAQ,QACZ,EACA,aAAcjC,CAClB,EAAGmB,EAAQ,YAAY,EAEnBgB,EACAC,EA6CJ,GA5CIH,IACAE,EAAS9B,EAAA,SAAUyB,EAAM,CACrB,IAAIO,EAAMP,EAAK,UAEX,OAAOH,EAAI,eAAkB,aAC7BU,EAAMA,EAAM,MAAQL,GAExBL,EAAI,cAAcU,EAAKV,EAAI,SAAS,SAAS,MAAQ,EACjDA,EAAI,SAAS,SAAS,OAASO,EAAY,OAAO,OAAQ,CAC1D,OAAQ,QACZ,CAAC,CACL,EAVS,YAcTf,EAAQ,qBAAuB,MAAQA,EAAQ,uBAC/CiB,EAAS/B,EAAA,SAAUyB,EAAM,CACrBH,EAAI,QAAQ,YAAa,QAAQ,EACjCA,EAAI,YAAY,CAAC,EAGjBA,EAAI,iBAAc,cAAW,IAAI,KAAQ,kBAAkB,EACvDA,EAAI,SAAS,SAAS,MAAQO,EAAY,OAAO,MAAO,GACxD,CACI,OAAQ,OACZ,CAAC,CACT,EAVS,WAabA,EAAY,YAAeJ,GAAS,CAC1BM,GAAQA,EAAON,CAAI,EACnBK,GAAQA,EAAOL,CAAI,CAC7B,EAEAI,EAAY,KAAO,CAACN,CAAO,EAC3BM,EAAY,KAAOJ,EAEnBH,EAAI,UAAUO,CAAW,EAErB,OAAOP,EAAI,eAAkB,YAC7BA,EAAI,cAAcK,CAAa,EAI/B,CAACb,EAAQ,QAAUA,EAAQ,QAAU,OAAQ,CAC7C,IAAImB,EAAWnB,EAAQ,UAAYA,EAAQ,aAAe,cAC1DmB,KAAW,UAAOA,EAAUlB,EAAE,SAAS,GAAK,YACxC,cAAW,IAAI,KAAQ,eAAe,CAAC,EAC3CO,EAAI,KAAKW,CAAQ,EACjB,MACJ,CAEInB,EAAQ,WACRQ,EAAI,UAAU,EAElB,IAAIY,EAASpB,EAAQ,OACjBoB,GAAU,YACVA,EAAS,mBAIbZ,EAAI,OAAOY,CAAM,CACrB,CACJ,CAAC,EACL,CA7HO1C,EAAS,YAAAqB,EAAAb,EAAAa,EAAA,eA+HT,SAASsB,EAAiBrB,EAA2B,CAExD,MAAmB,CACf,MAAOA,EAAQ,OAAS,GACxB,KAAMA,EAAQ,MAAQ,MACtB,SAAU,oBACV,QAAS,IAAMD,EAAYC,CAAO,EAClC,UAAWA,EAAQ,SACvB,CACJ,CATOtB,EAAS,iBAAA2C,EAAAnC,EAAAmC,EAAA,oBAWhB,SAASC,GAAe,CAEpB,GAAI,OAAO,OAAU,YAGrB,KAAIC,EAAS,EAAE,aAAa,EACxBA,EAAO,OAAS,IAGpB,EAAE,WAAW,EACR,KAAK,OAAQ,iBAAiB,EAC9B,KAAK,KAAM,aAAa,EACxB,KAAK,SAAO,cAAW,wCAAwC,CAAC,EAChE,SAAS,SAAS,IAAI,EAEvB,OAAO,OAAU,aAAe,OAAO,OAAU,cACjD,OAAO,MAAQ,MAAM,QAE7B,CAlBSrC,EAAAoC,EAAA,gBAoBT,SAASpB,GAAmB,CAIxB,GAHAoB,EAAa,EAGT,SAAO,OAAU,aACjB,OAAQ,MAAc,KAAO,aAC7B,OAAQ,MAAc,IAAI,WAAc,aAG5C,KAAIC,EAAS,EAAE,sBAAsB,EACjCA,EAAO,OAAS,GAGpB,EAAE,WAAW,EACR,KAAK,OAAQ,iBAAiB,EAC9B,KAAK,KAAM,sBAAsB,EACjC,KAAK,SAAO,cAAW,yDAAyD,CAAC,EACjF,SAAS,SAAS,IAAI,EAC/B,CAlBSrC,EAAAgB,EAAA,sBA5NIxB,MAAA,KHZjB,IAAM8C,GAAMC,EAAc,OAIbC,EAAN,cAAqC,YAA6B,CAC3D,eAAgB,CAAE,OAAOC,EAAkB,UAAY,CACvD,eAAgB,CAAE,OAAYC,CAAkB,CAChD,eAAgB,CAAE,OAAOH,EAAc,UAAY,CACnD,qBAAsB,CAAE,OAAOA,EAAc,gBAAkB,CAC/D,oBAAqB,CAAE,OAAOA,EAAc,eAAiB,CAC7D,YAAa,CAAE,OAAOI,EAAkB,OAAS,CAIjD,iBAAkB,CAExB,IAAIC,EAAU,MAAM,gBAAgB,EAEpC,OAAAA,EAAQ,KAAK,CACT,KAAM,eACN,QAAS,CACL,UAAWC,EAAS,SACxB,EACA,MAAO,eACP,MAAO,4BACP,QAASC,GAAK,CACT,KAAK,KAAK,OAAiC,WAAU,QAAKA,EAAE,KAAK,CACtE,EACA,SAAU,WACd,CAAC,EAEMF,CACX,CAEU,oBAAqB,CAC3B,MAAM,mBAAmB,EAEzB,KAAK,oBAAsB,KAAK,gBAAgB,aAAYN,GAAI,aAAa,CACjF,CAEU,YAA2B,CACjC,IAAIS,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,KAAKC,EAAkB,iBAAiB,CAC5C,KAAM,KACN,QAASL,EAAkB,QAAU,aACrC,aAAc,IAAM,KAAK,aAAa,EACtC,UAAW,EACf,CAAC,CAAC,EAEFI,EAAQ,KAAKE,EAAgB,iBAAiB,CAC1C,KAAM,KACN,aAAc,IAAM,KAAK,aAAa,CAC1C,CAAC,CAAC,EAEFF,EAAQ,KAAK,CACT,MAAO,YACP,SAAU,qBACV,QAAS,IAAM,CACX,IAAIG,EAAS,IAAIC,EACjBD,EAAO,QAAQ,GAAG,cAAe,IAAM,CACnC,KAAK,QAAQ,EACbA,EAAS,IACb,CAAC,EACDA,EAAO,WAAW,CACtB,CACJ,CAAC,EAEMH,CACX,CAEU,YAAa,CACnB,IAAIK,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,OAAO,EAAG,EAAG,CACjB,GAAI,gBACJ,MAAO,KACP,KAAM,GACN,SAAU,eACV,OAAQC,GAAO,uGAEf,MAAO,GACP,SAAU,GACV,SAAU,EACd,CAAC,EAEMD,CACX,CAEU,QAAQE,EAAsBC,EAAaC,EAAc,CAG/D,GAFA,MAAM,QAAQF,EAAGC,EAAKC,CAAI,EAEtB,CAAAF,EAAE,mBAAmB,EAGzB,KAAIG,EAAO,KAAK,OAAOF,CAAG,EACtBG,EAAS,EAAEJ,EAAE,MAAM,EAGnBI,EAAO,OAAO,EAAE,SAAS,eAAe,IACxCA,EAASA,EAAO,OAAO,GAEvBA,EAAO,SAAS,eAAe,IAC/BJ,EAAE,eAAe,EAEbI,EAAO,SAAS,eAAe,GAC/BC,EAAa,QAAQ,CACjB,UAAW,yBACX,OAAQ,CACJ,aAAcF,EAAK,YACvB,CACJ,CAAC,GAGb,CAEO,kBAAkBG,EAAqB,CAC1C,KAAK,oBAAoB,MAAQA,GAAS,KAAO,GAAKA,EAAM,SAAS,CACzE,CAEU,gBAAiB,CACvB,IAAIC,EAAK,KAAK,KAAK,OAAO,eAC1B,KAAK,SAAwB,CACzB,eAAgBA,EAAKA,EAAG,eAAiB,IAC7C,CAAC,CACL,CAEJ,EA3HaC,EAAAtB,EAAA,kBAAAA,EAANuB,EAAA,CAFN,aAAW,cAAc,EACzB,aAAW,WAAW,GACVvB,GDXb,EAAE,UAAY,IACV,0BAAuB,IAAIwB,EAAe,EAAE,UAAU,CAAC,EAAE,OAAO,CACpE,CAAC",
  "names": ["import_q", "import_corelib", "import_q", "import_corelib", "import_q", "ReportHelper", "createToolButton", "options", "_a", "_b", "__name", "execute", "opt", "WaresOrderDialog", "WaresOrderForm", "WaresOrderRow", "WaresOrderService", "buttons", "ReportHelper", "__name", "__decorateClass", "import_q", "PdfExportHelper", "toAutoTableColumns", "srcColumns", "columnStyles", "columnTitles", "src", "col", "style", "__name", "toAutoTableData", "slickGrid", "entities", "keys", "el", "row", "item", "dst", "cell", "format", "ctx", "html", "exportToPdf", "options", "g", "includeAutoTable", "request", "sortBy", "gridColumns", "column", "response", "doc", "columns", "x", "data", "reportTitle", "totalPagesExp", "pageNumbers", "autoOptions", "footer", "header", "str", "fileName", "output", "createToolButton", "includeJsPDF", "script", "fld", "WaresOrderRow", "WaresOrderGrid", "WaresOrderColumns", "WaresOrderDialog", "WaresOrderService", "filters", "WaresRow", "w", "buttons", "ExcelExportHelper", "PdfExportHelper", "dialog", "StoreAverageDialog", "columns", "ctx", "e", "row", "cell", "item", "target", "ReportHelper", "value", "eq", "__name", "__decorateClass", "WaresOrderGrid"]
}
