{
  "version": 3,
  "sources": ["../../../../../Modules/Store/Wares/WaresPage.ts", "../../../../../Modules/Store/Wares/WaresGrid.ts", "../../../../../Modules/Store/Wares/WaresDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { WaresGrid } from './WaresGrid';\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new WaresGrid($('#GridDiv')).element);\r\n});", "import { Decorators, EntityGrid, LookupEditor } from \"@serenity-is/corelib\";\r\nimport { deepClone, Dictionary, first, formatNumber, htmlEncode, notifyError, parseDecimal, parseInteger, parseQueryString, serviceRequest, localText, toId, trimToNull, tryFirst } from \"@serenity-is/corelib/q\";\r\nimport { ExcelExportHelper, PdfExportHelper } from \"@serenity-is/extensions\";\r\nimport { Column, FormatterContext, NonDataRow } from \"@serenity-is/sleekgrid\";\r\nimport { WaresColumns, WaresRow, WaresService, CounterpartiesRow, CategoriesRow } from \"../../ServerTypes/Store\";\r\nimport { WaresDialog } from \"./WaresDialog\";\r\n\r\nconst fld = WaresRow.Fields;\r\n\r\n@Decorators.registerClass()\r\n@Decorators.filterable()\r\nexport class WaresGrid extends EntityGrid<WaresRow, any> {\r\n    protected getColumnsKey() { return WaresColumns.columnsKey; }\r\n    protected getDialogType() { return <any>WaresDialog; }\r\n    protected getIdProperty() { return WaresRow.idProperty; }\r\n    protected getInsertPermission() { return WaresRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return WaresRow.localTextPrefix; }\r\n    protected getService() { return WaresService.baseUrl; }\r\n\r\n    private pendingChanges: Dictionary<any> = {};\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n\r\n        this.slickContainer.on('change', '.edit:input', (e) => this.inputsChange(e));\r\n    }\r\n\r\n    protected getButtons() {\r\n        var buttons = super.getButtons();\r\n\r\n        buttons.push(ExcelExportHelper.createToolButton({\r\n            grid: this,\r\n            service: WaresService.baseUrl + '/ListExcel',\r\n            onViewSubmit: () => this.onViewSubmit(),\r\n            separator: true\r\n        }));\r\n\r\n        buttons.push(PdfExportHelper.createToolButton({\r\n            grid: this,\r\n            onViewSubmit: () => this.onViewSubmit(),\r\n            reportTitle: 'Wares List',\r\n            columnTitles: {\r\n                'Discontinued': 'Dis.',\r\n            },\r\n            tableOptions: {\r\n                columnStyles: {\r\n                    ProductID: {\r\n                        cellWidth: 25,\r\n                        halign: 'right'\r\n                    },\r\n                    Discountinued: {\r\n                        cellWidth: 25\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n\r\n        buttons.push({\r\n            title: 'Save Changes',\r\n            cssClass: 'apply-changes-button disabled',\r\n            onClick: e => this.saveClick(),\r\n            separator: true\r\n        });\r\n\r\n        return buttons;\r\n    }\r\n\r\n    protected onViewProcessData(response) {\r\n        this.pendingChanges = {};\r\n        this.setSaveButtonState();\r\n        return super.onViewProcessData(response);\r\n    }\r\n\r\n    // PLEASE NOTE! Inline editing in grids is not something Serenity supports nor recommends.\r\n    // SlickGrid has some set of limitations, UI is very hard to use on some devices like mobile, \r\n    // custom widgets and validations are not possible, and as a bonus the code can become a mess.\r\n    // \r\n    // This was just a sample how-to after much requests, and is not supported. \r\n    // This is all we can offer, please don't ask us to Guide you...\r\n\r\n    /**\r\n     * It would be nice if we could use autonumeric, Serenity editors etc. here, to control input validation,\r\n     * but it's not supported by SlickGrid as we are only allowed to return a string, and should attach\r\n     * no event handlers to rendered cell contents\r\n     */\r\n    private numericInputFormatter(ctx) {\r\n        if ((ctx.item as NonDataRow).__nonDataRow)\r\n            return htmlEncode(formatNumber(ctx.value, '#0.##'));\r\n\r\n        var klass = 'edit numeric';\r\n        var item = ctx.item as WaresRow;\r\n        var pending = this.pendingChanges[item.WaresId];\r\n\r\n        if (pending && pending[ctx.column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, ctx.column.field) as number;\r\n\r\n        return \"<input type='text' class='\" + klass +\r\n            \"' data-field='\" + ctx.column.field +\r\n            \"' value='\" + formatNumber(value, '0.##') + \"'/>\";\r\n    }\r\n\r\n    private moneyInputFormatter(ctx) {\r\n        var klass = 'edit numeric';\r\n        var item = ctx.item as WaresRow;\r\n        var pending = this.pendingChanges[item.WaresId];\r\n\r\n        if (pending && pending[ctx.column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, ctx.column.field) as number;\r\n\r\n        return \"<input type='text' style='text - align:right' class='\" + klass +\r\n            \"' data-field='\" + ctx.column.field +\r\n            \"' value='\" + formatNumber(value, '0.0000') + \"'/>\";\r\n    }\r\n\r\n    private stringInputFormatter(ctx) {\r\n        if ((ctx.item as NonDataRow).__nonDataRow)\r\n            return htmlEncode(ctx.value);\r\n\r\n        var klass = 'edit string';\r\n        var item = ctx.item as WaresRow;\r\n        var pending = this.pendingChanges[item.WaresId];\r\n        var column = ctx.column as Column;\r\n\r\n        if (pending && pending[column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, column.field) as string;\r\n\r\n        return \"<input type='text' class='\" + klass +\r\n            \"' data-field='\" + column.field +\r\n            \"' value='\" + htmlEncode(value) +\r\n            \"' maxlength='\" + column.sourceItem.maxLength + \"'/>\";\r\n    }\r\n\r\n    /**\r\n    * Sorry but you cannot use LookupEditor, e.g. Select2 here, only possible is a SELECT element\r\n    */\r\n    private selectFormatter(ctx: FormatterContext, idField: string, lookup: Q.Lookup<any>) {\r\n        if ((ctx.item as NonDataRow).__nonDataRow)\r\n            return htmlEncode(ctx.value);\r\n\r\n        var klass = 'edit';\r\n        var item = ctx.item as WaresRow;\r\n        var pending = this.pendingChanges[item.WaresId];\r\n        var column = ctx.column as Column;\r\n\r\n        if (pending && pending[idField] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, idField);\r\n        var markup = \"<select class='\" + klass +\r\n            \"' data-field='\" + idField +\r\n            \"' style='width: 100%; max-width: 100%'>\" +\r\n            \"<option value=''>--</option>\";\r\n        for (var c of lookup.items) {\r\n            let id = c[lookup.idField];\r\n            markup += \"<option value='\" + htmlEncode(id) + \"'\"\r\n            if (id == value) {\r\n                markup += \" selected\";\r\n            }\r\n            markup += \">\" + htmlEncode(c[lookup.textField]) + \"</option>\";\r\n        }\r\n        return markup + \"</select>\";\r\n    }\r\n\r\n    private getEffectiveValue(item, field): any {\r\n        var pending = this.pendingChanges[item.WaresID];\r\n        if (pending && pending[field] !== undefined) {\r\n            return pending[field];\r\n        }\r\n\r\n        return item[field];\r\n    }\r\n\r\n    protected getColumns() {\r\n        var columns = super.getColumns();\r\n        var num = ctx => this.numericInputFormatter(ctx);\r\n        var str = ctx => this.stringInputFormatter(ctx);\r\n        var mon = ctx => this.moneyInputFormatter(ctx);\r\n\r\n        first(columns, x => x.field === 'QuantityPerUnit').format = str;\r\n\r\n        var category = first(columns, x => x.field === fld.CategoryCategoryName);\r\n        category.referencedFields = [fld.CategoryId];\r\n        category.format = ctx => this.selectFormatter(ctx, fld.CategoryId, CategoriesRow.getLookup());\r\n\r\n        var counterparty = first(columns, x => x.field === fld.CounterpartyCompanyName);\r\n        counterparty.referencedFields = [fld.CounterpartyId];\r\n        counterparty.format = ctx => this.selectFormatter(ctx, fld.CounterpartyId, CounterpartiesRow.getLookup());\r\n\r\n        first(columns, x => x.field === fld.UnitPrice).format = num;\r\n        first(columns, x => x.field == fld.UnitPrice).cssClass += \" col-unit-price\";\r\n        first(columns, x => x.field === fld.QuantityPerUnit).format = num;\r\n        first(columns, x => x.field === fld.MeasureName).format = str;\r\n\r\n        return columns;\r\n    }\r\n\r\n    private inputsChange(e: JQueryEventObject) {\r\n        var cell = this.slickGrid.getCellFromEvent(e);\r\n        var item = this.itemAt(cell.row);\r\n        var input = $(e.target);\r\n        var field = input.data('field');\r\n        var txt = trimToNull(input.val());\r\n        var pending = this.pendingChanges[item.WaresId];\r\n\r\n        var effective = this.getEffectiveValue(item, field);\r\n        var oldText: string;\r\n        if (input.hasClass(\"numeric\"))\r\n            oldText = formatNumber(effective, '0.##');\r\n        else\r\n            oldText = effective as string;\r\n\r\n        var value;\r\n        if (field === 'UnitPrice') {\r\n            value = parseDecimal(txt ?? '');\r\n            if (value == null || isNaN(value)) {\r\n                notifyError(localText('Validation.Decimal'), '', null);\r\n                input.val(oldText);\r\n                input.focus();\r\n                return;\r\n            }\r\n        }\r\n        else if (input.hasClass(\"numeric\")) {\r\n            var i = parseInteger(txt ?? '');\r\n            if (isNaN(i) || i > 32767 || i < 0) {\r\n                notifyError(localText('Validation.Integer'), '', null);\r\n                input.val(oldText);\r\n                input.focus();\r\n                return;\r\n            }\r\n            value = i;\r\n        }\r\n        else if (input.is('select'))\r\n            value = toId(input.val());\r\n        else\r\n            value = txt;\r\n\r\n        if (!pending) {\r\n            this.pendingChanges[item.WaresId] = pending = {};\r\n        }\r\n\r\n        pending[field] = value;\r\n        item[field] = value;\r\n        this.view.refresh();\r\n\r\n        if (input.hasClass(\"numeric\"))\r\n            value = formatNumber(value, '0.##');\r\n\r\n        input.val(value).addClass('dirty');\r\n\r\n        this.setSaveButtonState();\r\n    }\r\n\r\n    private setSaveButtonState() {\r\n        this.toolbar.findButton('apply-changes-button').toggleClass('disabled',\r\n            Object.keys(this.pendingChanges).length === 0);\r\n    }\r\n\r\n    private saveClick() {\r\n        if (Object.keys(this.pendingChanges).length === 0) {\r\n            return;\r\n        }\r\n\r\n        // this calls save service for all modified rows, one by one\r\n        // you could write a batch update service\r\n        var keys = Object.keys(this.pendingChanges);\r\n        var current = -1;\r\n        var self = this;\r\n\r\n        (function saveNext() {\r\n            if (++current >= keys.length) {\r\n                self.refresh();\r\n                return;\r\n            }\r\n\r\n            var key = keys[current];\r\n            var entity = deepClone(self.pendingChanges[key]);\r\n            entity.WaresId = key;\r\n            serviceRequest(WaresService.Methods.Update, {\r\n                EntityId: key,\r\n                Entity: entity\r\n            }, (response) => {\r\n                delete self.pendingChanges[key];\r\n                saveNext();\r\n            });\r\n        })();\r\n    }\r\n\r\n    protected getQuickFilters() {\r\n        var flt = super.getQuickFilters();\r\n\r\n        var q = parseQueryString();\r\n        if (q[\"cat\"]) {\r\n            var category = tryFirst(flt, x => x.field == \"CategoryID\");\r\n            category.init = e => {\r\n                e.element.getWidget(LookupEditor).value = q[\"cat\"];\r\n            };\r\n        }\r\n\r\n        return flt;\r\n    }\r\n\r\n}", "\uFEFFimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { WaresForm, WaresRow, WaresService } from '../../ServerTypes/Store';\r\n\r\n@Decorators.registerClass('Store.Store.WaresDialog')\r\nexport class WaresDialog extends EntityDialog<WaresRow, any> {\r\n    protected getFormKey() { return WaresForm.formKey; }\r\n    protected getIdProperty() { return WaresRow.idProperty; }\r\n    protected getLocalTextPrefix() { return WaresRow.localTextPrefix; }\r\n    protected getNameProperty() { return WaresRow.nameProperty; }\r\n    protected getService() { return WaresService.baseUrl; }\r\n    protected getDeletePermission() { return WaresRow.deletePermission; }\r\n    protected getInsertPermission() { return WaresRow.insertPermission; }\r\n    protected getUpdatePermission() { return WaresRow.updatePermission; }\r\n\r\n    protected form = new WaresForm(this.idPrefix);\r\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "import_extensions", "import_corelib", "WaresDialog", "WaresForm", "WaresRow", "WaresService", "__name", "__decorateClass", "fld", "WaresRow", "WaresGrid", "container", "e", "WaresColumns", "WaresDialog", "WaresService", "buttons", "response", "ctx", "klass", "item", "pending", "value", "column", "idField", "lookup", "markup", "c", "id", "field", "columns", "num", "__name", "str", "mon", "x", "category", "CategoriesRow", "counterparty", "CounterpartiesRow", "cell", "input", "txt", "effective", "oldText", "i", "keys", "current", "self", "saveNext", "key", "entity", "flt", "q", "__decorateClass", "WaresGrid"]
}
