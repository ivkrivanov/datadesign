{
  "version": 3,
  "sources": ["external-global:@serenity-is/corelib/slick", "../../../../../Modules/Store/ProductDetails/ProductDetailsPage.ts", "../../../../../Modules/Store/ProductDetails/ProductDetailsGrid.ts"],
  "sourcesContent": ["module.exports = Slick;", "import { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { ProductDetailsGrid } from './ProductDetailsGrid';\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new ProductDetailsGrid($('#GridDiv')).element);\r\n});", "import { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { ProductDetailsColumns, ProductDetailsRow, ProductDetailsService } from '../../ServerTypes/Store';\r\nimport { ProductDetailsDialog } from './ProductDetailsDialog';\r\nimport { Dictionary, Lookup, attrEncode, coalesce, deepClone, first, formatNumber, htmlEncode, notifyError, parseDecimal, parseInteger, serviceRequest, trimToNull } from '@serenity-is/corelib/q';\r\nimport { Column, FormatterContext } from '@serenity-is/sleekgrid';\r\nimport { Aggregators } from '@serenity-is/corelib/slick';\n\nconst fld = ProductDetailsRow.Fields;\r\n\r\n@Decorators.registerClass('Company.Store.ProductDetailsGrid')\n@Decorators.filterable()\r\nexport class ProductDetailsGrid extends EntityGrid<ProductDetailsRow, any> {\r\n    protected getColumnsKey() { return ProductDetailsColumns.columnsKey; }\r\n    protected getDialogType() { return ProductDetailsDialog; }\r\n    protected getIdProperty() { return ProductDetailsRow.idProperty; }\r\n    protected getInsertPermission() { return ProductDetailsRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return ProductDetailsRow.localTextPrefix; }\r\n    protected getService() { return ProductDetailsService.baseUrl; }\n\n    private pendingChanges: Dictionary<any> = {};\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\n\n        this.slickContainer.on('change', '.edit:input', (e) => this.inputsChange(e));\r\n    }\n\n    protected getButtons() {\r\n        var buttons = super.getButtons();\r\n        buttons.push({\r\n            title: 'Save Changes',\r\n            cssClass: 'apply-changes-button disabled',\r\n            onClick: e => this.saveClick(),\r\n            separator: true\r\n        });\r\n\r\n        return buttons;\r\n    }\n\n    private numericInputFormatter(ctx) {\r\n        var klass = 'edit numeric';\r\n        var item = ctx.item as ProductDetailsRow;\r\n        var pending = this.pendingChanges[item.WaresId];\r\n\r\n        if (pending && pending[ctx.column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, ctx.column.field) as number;\r\n\r\n        return \"<input type='text' class='\" + klass +\r\n            \"' data-field='\" + ctx.column.field +\r\n            \"' value='\" + formatNumber(value, '0.####') + \"'/>\";\r\n    }\n\n    private moneyInputFormatter(ctx) {\r\n        var klass = 'edit numeric';\r\n        var item = ctx.item as ProductDetailsRow;\r\n        var pending = this.pendingChanges[item.WaresId];\r\n\r\n        if (pending && pending[ctx.column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, ctx.column.field) as number;\r\n\r\n        return \"<input type='text' style='text - align:right' class='\" + klass +\r\n            \"' data-field='\" + ctx.column.field +\r\n            \"' value='\" + formatNumber(value, '0.0000') + \"'/>\";\r\n    }\n\n    private stringInputFormatter(ctx) {\r\n        var klass = 'edit string';\r\n        var item = ctx.item as ProductDetailsRow;\r\n        var pending = this.pendingChanges[item.WaresId];\r\n        var column = ctx.column as Column;\r\n\r\n        if (pending && pending[column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, column.field) as string;\r\n\r\n        return \"<input type='text' class='\" + klass +\r\n            \"' data-field='\" + column.field +\r\n            \"' value='\" + attrEncode(value) +\r\n            \"' maxlength='\" + column.sourceItem.maxLength + \"'/>\";\r\n    }\n\n    private selectFormatter(ctx: FormatterContext, idField: string, lookup: Lookup<any>): string {\r\n        var klass = 'edit';\r\n        var item = ctx.item as ProductDetailsRow;\r\n        var pending = this.pendingChanges[item.WaresId];\r\n        var column = ctx.column as Column;\r\n\r\n        if (pending && pending[idField] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, idField);\r\n        var markup = \"<select class='\" + klass +\r\n            \"' data-field='\" + idField +\r\n            \"' style='width: 100%; max-width: 100%'>\";\r\n        for (var c of lookup.items) {\r\n            let id = c[lookup.idField];\r\n            markup += \"<option value='\" + attrEncode(id) + \"'\"\r\n            if (id == value) {\r\n                markup += \" selected\";\r\n            }\r\n            markup += \">\" + htmlEncode(c[lookup.textField]) + \"</option>\";\r\n        }\r\n        return markup + \"</select>\";\r\n    }\n\n    private getEffectiveValue(item, field): any {\r\n        var pending = this.pendingChanges[item.WaresID];\r\n        if (pending && pending[field] !== undefined) {\r\n            return pending[field];\r\n        }\r\n\r\n        return item[field];\r\n    }\n\n    private inputsChange(e: JQueryEventObject) {\r\n        var cell = this.slickGrid.getCellFromEvent(e);\r\n        var item = this.itemAt(cell.row);\r\n        var input = $(e.target);\r\n        var field = input.data('field');\r\n        var text = coalesce(trimToNull(input.val()), '0');\r\n        var pending = this.pendingChanges[item.WaresId];\r\n\r\n        var effective = this.getEffectiveValue(item, field);\r\n        var oldText: string;\r\n        if (input.hasClass(\"numeric\"))\r\n            oldText = formatNumber(effective, '0.####');\r\n        else\r\n            oldText = effective as string;\r\n\r\n        var value;\r\n        if (field === 'UnitPrice') {\r\n            value = parseDecimal(text);\r\n            if (value == null || isNaN(value)) {\r\n                notifyError(text('Validation.Decimal'), '', null);\r\n                input.val(oldText);\r\n                input.focus();\r\n                return;\r\n            }\r\n        }\r\n        else if (input.hasClass(\"numeric\")) {\r\n            var i = parseInteger(text);\r\n            if (isNaN(i) || i > 32767 || i < 0) {\r\n                notifyError(text('Validation.Integer'), '', null);\r\n                input.val(oldText);\r\n                input.focus();\r\n                return;\r\n            }\r\n            value = i;\r\n        }\r\n        else\r\n            value = text;\r\n\r\n        if (!pending) {\r\n            this.pendingChanges[item.ProductId] = pending = {};\r\n        }\r\n\r\n        pending[field] = value;\r\n        item[field] = value;\r\n        this.view.refresh();\r\n\r\n        if (input.hasClass(\"numeric\"))\r\n            value = formatNumber(value, '0.####');\r\n\r\n        input.val(value).addClass('dirty');\r\n\r\n        this.setSaveButtonState();\r\n    }\n\n    private setSaveButtonState() {\r\n        this.toolbar.findButton('apply-changes-button').toggleClass('disabled',\r\n            Object.keys(this.pendingChanges).length === 0);\r\n    }\n\n    private saveClick() {\r\n        if (Object.keys(this.pendingChanges).length === 0) {\r\n            return;\r\n        }\r\n\r\n        // this calls save service for all modified rows, one by one\r\n        // you could write a batch update service\r\n        var keys = Object.keys(this.pendingChanges);\r\n        var current = -1;\r\n        var self = this;\r\n\r\n        (function saveNext() {\r\n            if (++current >= keys.length) {\r\n                self.refresh();\r\n                return;\r\n            }\r\n\r\n            var key = keys[current];\r\n            var entity = deepClone(self.pendingChanges[key]);\r\n            entity.ProductID = key;\r\n            serviceRequest('Store/Product/Update', {\r\n                EntityId: key,\r\n                Entity: entity\r\n            }, (response) => {\r\n                delete self.pendingChanges[key];\r\n                saveNext();\r\n            });\r\n        })();\r\n    }\n\n    protected createSlickGrid() {\r\n        var grid = super.createSlickGrid();\r\n\r\n        grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());\r\n\r\n        this.view.setSummaryOptions({\r\n            aggregators: [new Aggregators.Sum(fld.LineTotal)]\r\n        });\r\n\r\n        return grid;\r\n    }\n\r\n    protected getColumns() {\r\n        var columns = super.getColumns();\n\r\n        var num = ctx => this.numericInputFormatter(ctx);\r\n        var str = ctx => this.stringInputFormatter(ctx);\r\n        var mon = ctx => this.moneyInputFormatter(ctx);\r\n\r\n        first(columns, x => x.field === fld.PlanPrice).format = mon;\r\n        first(columns, x => x.field == fld.PlanPrice).cssClass += \" col-unit-price\";\r\n        first(columns, x => x.field === fld.Quantity).format = num;\r\n        first(columns, x => x.field === fld.ProductQuantity).format = num;\r\n        first(columns, x => x.field === fld.LineTotal)\n\r\n            .groupTotalsFormatter = (totals, col) =>\r\n                (totals.sum ? ('Sum: ' + coalesce(totals.sum[col.field], '')) : '');\r\n\r\n        return columns;\r\n    }\r\n\r\n    protected getSlickOptions() {\r\n        var opt = super.getSlickOptions();\r\n\r\n        opt.showFooterRow = true;\r\n        return opt;\r\n    }\r\n\r\n    protected usePager() {\r\n        return false;\r\n    }  \n}"],
  "mappings": "sKAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAA,EAAO,QAAU,QCAjB,IAAAC,EAAuC,SCAvC,IAAAC,EAAuC,SAGvC,IAAAC,EAA0K,SAE1KC,EAA4B,SAE5B,IAAMC,EAAMC,EAAkB,OAIjBC,EAAN,cAAiC,YAAmC,CAUvE,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,EAHnB,KAAQ,eAAkC,CAAC,EAKvC,KAAK,eAAe,GAAG,SAAU,cAAgBC,GAAM,KAAK,aAAaA,CAAC,CAAC,CAC/E,CAbU,eAAgB,CAAE,OAAOC,EAAsB,UAAY,CAC3D,eAAgB,CAAE,OAAOC,CAAsB,CAC/C,eAAgB,CAAE,OAAOL,EAAkB,UAAY,CACvD,qBAAsB,CAAE,OAAOA,EAAkB,gBAAkB,CACnE,oBAAqB,CAAE,OAAOA,EAAkB,eAAiB,CACjE,YAAa,CAAE,OAAOM,EAAsB,OAAS,CAUrD,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAC/B,OAAAA,EAAQ,KAAK,CACT,MAAO,eACP,SAAU,gCACV,QAASJ,GAAK,KAAK,UAAU,EAC7B,UAAW,EACf,CAAC,EAEMI,CACX,CAEQ,sBAAsBC,EAAK,CAC/B,IAAIC,EAAQ,eACRC,EAAOF,EAAI,KACXG,EAAU,KAAK,eAAeD,EAAK,OAAO,EAE1CC,GAAWA,EAAQH,EAAI,OAAO,KAAK,IAAM,SACzCC,GAAS,UAGb,IAAIG,EAAQ,KAAK,kBAAkBF,EAAMF,EAAI,OAAO,KAAK,EAEzD,MAAO,6BAA+BC,EAClC,iBAAmBD,EAAI,OAAO,MAC9B,eAAc,gBAAaI,EAAO,QAAQ,EAAI,KACtD,CAEQ,oBAAoBJ,EAAK,CAC7B,IAAIC,EAAQ,eACRC,EAAOF,EAAI,KACXG,EAAU,KAAK,eAAeD,EAAK,OAAO,EAE1CC,GAAWA,EAAQH,EAAI,OAAO,KAAK,IAAM,SACzCC,GAAS,UAGb,IAAIG,EAAQ,KAAK,kBAAkBF,EAAMF,EAAI,OAAO,KAAK,EAEzD,MAAO,wDAA0DC,EAC7D,iBAAmBD,EAAI,OAAO,MAC9B,eAAc,gBAAaI,EAAO,QAAQ,EAAI,KACtD,CAEQ,qBAAqBJ,EAAK,CAC9B,IAAIC,EAAQ,cACRC,EAAOF,EAAI,KACXG,EAAU,KAAK,eAAeD,EAAK,OAAO,EAC1CG,EAASL,EAAI,OAEbG,GAAWA,EAAQE,EAAO,KAAK,IAAM,SACrCJ,GAAS,UAGb,IAAIG,EAAQ,KAAK,kBAAkBF,EAAMG,EAAO,KAAK,EAErD,MAAO,6BAA+BJ,EAClC,iBAAmBI,EAAO,MAC1B,eAAc,cAAWD,CAAK,EAC9B,gBAAkBC,EAAO,WAAW,UAAY,KACxD,CAEQ,gBAAgBL,EAAuBM,EAAiBC,EAA6B,CACzF,IAAIN,EAAQ,OACRC,EAAOF,EAAI,KACXG,EAAU,KAAK,eAAeD,EAAK,OAAO,EAC1CG,EAASL,EAAI,OAEbG,GAAWA,EAAQG,CAAO,IAAM,SAChCL,GAAS,UAGb,IAAIG,EAAQ,KAAK,kBAAkBF,EAAMI,CAAO,EAC5CE,EAAS,kBAAoBP,EAC7B,iBAAmBK,EACnB,0CACJ,QAASG,KAAKF,EAAO,MAAO,CACxB,IAAIG,EAAKD,EAAEF,EAAO,OAAO,EACzBC,GAAU,qBAAoB,cAAWE,CAAE,EAAI,IAC3CA,GAAMN,IACNI,GAAU,aAEdA,GAAU,OAAM,cAAWC,EAAEF,EAAO,SAAS,CAAC,EAAI,WACtD,CACA,OAAOC,EAAS,WACpB,CAEQ,kBAAkBN,EAAMS,EAAY,CACxC,IAAIR,EAAU,KAAK,eAAeD,EAAK,OAAO,EAC9C,OAAIC,GAAWA,EAAQQ,CAAK,IAAM,OACvBR,EAAQQ,CAAK,EAGjBT,EAAKS,CAAK,CACrB,CAEQ,aAAa,EAAsB,CACvC,IAAIC,EAAO,KAAK,UAAU,iBAAiB,CAAC,EACxCV,EAAO,KAAK,OAAOU,EAAK,GAAG,EAC3BC,EAAQ,EAAE,EAAE,MAAM,EAClBF,EAAQE,EAAM,KAAK,OAAO,EAC1BC,KAAO,eAAS,cAAWD,EAAM,IAAI,CAAC,EAAG,GAAG,EAC5CV,EAAU,KAAK,eAAeD,EAAK,OAAO,EAE1Ca,EAAY,KAAK,kBAAkBb,EAAMS,CAAK,EAC9CK,EACAH,EAAM,SAAS,SAAS,EACxBG,KAAU,gBAAaD,EAAW,QAAQ,EAE1CC,EAAUD,EAEd,IAAIX,EACJ,GAAIO,IAAU,aAEV,GADAP,KAAQ,gBAAaU,CAAI,EACrBV,GAAS,MAAQ,MAAMA,CAAK,EAAG,IAC/B,eAAYU,EAAK,oBAAoB,EAAG,GAAI,IAAI,EAChDD,EAAM,IAAIG,CAAO,EACjBH,EAAM,MAAM,EACZ,MACJ,UAEKA,EAAM,SAAS,SAAS,EAAG,CAChC,IAAII,KAAI,gBAAaH,CAAI,EACzB,GAAI,MAAMG,CAAC,GAAKA,EAAI,OAASA,EAAI,EAAG,IAChC,eAAYH,EAAK,oBAAoB,EAAG,GAAI,IAAI,EAChDD,EAAM,IAAIG,CAAO,EACjBH,EAAM,MAAM,EACZ,MACJ,CACAT,EAAQa,CACZ,MAEIb,EAAQU,EAEPX,IACD,KAAK,eAAeD,EAAK,SAAS,EAAIC,EAAU,CAAC,GAGrDA,EAAQQ,CAAK,EAAIP,EACjBF,EAAKS,CAAK,EAAIP,EACd,KAAK,KAAK,QAAQ,EAEdS,EAAM,SAAS,SAAS,IACxBT,KAAQ,gBAAaA,EAAO,QAAQ,GAExCS,EAAM,IAAIT,CAAK,EAAE,SAAS,OAAO,EAEjC,KAAK,mBAAmB,CAC5B,CAEQ,oBAAqB,CACzB,KAAK,QAAQ,WAAW,sBAAsB,EAAE,YAAY,WACxD,OAAO,KAAK,KAAK,cAAc,EAAE,SAAW,CAAC,CACrD,CAEQ,WAAY,CAChB,GAAI,OAAO,KAAK,KAAK,cAAc,EAAE,SAAW,EAMhD,KAAIc,EAAO,OAAO,KAAK,KAAK,cAAc,EACtCC,EAAU,GACVC,EAAO,KAEVC,EAAA,SAASC,GAAW,CACjB,GAAI,EAAEH,GAAWD,EAAK,OAAQ,CAC1BE,EAAK,QAAQ,EACb,MACJ,CAEA,IAAIG,EAAML,EAAKC,CAAO,EAClBK,KAAS,aAAUJ,EAAK,eAAeG,CAAG,CAAC,EAC/CC,EAAO,UAAYD,KACnB,kBAAe,uBAAwB,CACnC,SAAUA,EACV,OAAQC,CACZ,EAAIC,GAAa,CACb,OAAOL,EAAK,eAAeG,CAAG,EAC9BD,EAAS,CACb,CAAC,CACL,EAhBC,YAgBE,EACP,CAEU,iBAAkB,CACxB,IAAII,EAAO,MAAM,gBAAgB,EAEjC,OAAAA,EAAK,eAAe,IAAI,MAAM,KAAK,yBAA2B,EAE9D,KAAK,KAAK,kBAAkB,CACxB,YAAa,CAAC,IAAI,cAAY,IAAInC,EAAI,SAAS,CAAC,CACpD,CAAC,EAEMmC,CACX,CAEU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAE3BC,EAAMP,EAAArB,GAAO,KAAK,sBAAsBA,CAAG,EAArC,OACN6B,EAAMR,EAAArB,GAAO,KAAK,qBAAqBA,CAAG,EAApC,OACN8B,EAAMT,EAAArB,GAAO,KAAK,oBAAoBA,CAAG,EAAnC,OAEV,kBAAM2B,EAASI,GAAKA,EAAE,QAAUxC,EAAI,SAAS,EAAE,OAASuC,KACxD,SAAMH,EAASI,GAAKA,EAAE,OAASxC,EAAI,SAAS,EAAE,UAAY,qBAC1D,SAAMoC,EAASI,GAAKA,EAAE,QAAUxC,EAAI,QAAQ,EAAE,OAASqC,KACvD,SAAMD,EAASI,GAAKA,EAAE,QAAUxC,EAAI,eAAe,EAAE,OAASqC,KAC9D,SAAMD,EAASI,GAAKA,EAAE,QAAUxC,EAAI,SAAS,EAExC,qBAAuB,CAACyC,EAAQC,IAC5BD,EAAO,IAAO,WAAU,YAASA,EAAO,IAAIC,EAAI,KAAK,EAAG,EAAE,EAAK,GAEjEN,CACX,CAEU,iBAAkB,CACxB,IAAIO,EAAM,MAAM,gBAAgB,EAEhC,OAAAA,EAAI,cAAgB,GACbA,CACX,CAEU,UAAW,CACjB,MAAO,EACX,CACJ,EAlPab,EAAA5B,EAAA,sBAAAA,EAAN0C,EAAA,CAFN,aAAW,cAAc,kCAAkC,EAC3D,aAAW,WAAW,GACV1C,GDRb,EAAE,UAAW,IACT,0BAAuB,IAAI2C,EAAmB,EAAE,UAAU,CAAC,EAAE,OAAO,CACxE,CAAC",
  "names": ["require_slick", "__commonJSMin", "exports", "module", "import_q", "import_corelib", "import_q", "import_slick", "fld", "ProductDetailsRow", "ProductDetailsGrid", "container", "e", "ProductDetailsColumns", "ProductDetailsDialog", "ProductDetailsService", "buttons", "ctx", "klass", "item", "pending", "value", "column", "idField", "lookup", "markup", "c", "id", "field", "cell", "input", "text", "effective", "oldText", "i", "keys", "current", "self", "__name", "saveNext", "key", "entity", "response", "grid", "columns", "num", "str", "mon", "x", "totals", "col", "opt", "__decorateClass", "ProductDetailsGrid"]
}
