{
  "version": 3,
  "sources": ["../../../../../Modules/Store/Products/ProductsPage.ts", "../../../../../Modules/Store/Products/ProductsGrid.ts", "../../../../../Modules/Store/Products/ProductsDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { ProductsGrid } from './ProductsGrid';\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new ProductsGrid($('#GridDiv')).element);\r\n});", "import { Decorators, EntityGrid, EnumEditor, LookupEditor, ToolButton } from '@serenity-is/corelib';\nimport { attrEncode, coalesce, deepClone, Dictionary, first, formatNumber, htmlEncode, notifyError, parseDecimal, parseInteger, parseQueryString, serviceRequest, toId, trimToNull, tryFirst } from \"@serenity-is/corelib/q\";\nimport { ExcelExportHelper, PdfExportHelper, ReportHelper } from \"@serenity-is/extensions\";\r\nimport { Column, FormatterContext } from '@serenity-is/sleekgrid';\r\nimport { CategoriesRow, ProductsColumns, ProductsListRequest, ProductsRow, ProductsService, WaresRow } from '../../ServerTypes/Store';\r\nimport { ProductsDialog } from './ProductsDialog';\r\n\nconst fld = ProductsRow.Fields;\n\r\n@Decorators.registerClass('Store.Store.ProductsGrid')\n@Decorators.filterable()\r\nexport class ProductsGrid extends EntityGrid<ProductsRow, any> {\r\n    protected getColumnsKey() { return ProductsColumns.columnsKey; }\r\n    protected getDialogType() { return <any>ProductsDialog; }\r\n    protected getIdProperty() { return ProductsRow.idProperty; }\r\n    protected getInsertPermission() { return ProductsRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return ProductsRow.localTextPrefix; }\r\n    protected getService() { return ProductsService.baseUrl; }\n\n    private pendingChanges: Dictionary<any> = {};\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\n\n    protected getQuickFilters() {\r\n        var filters = super.getQuickFilters();\n\n        var q = parseQueryString();\r\n        if (q[\"cat\"]) {\r\n            var category = tryFirst(filters, x => x.field == \"CategoryId\");\r\n            category.init = e => {\r\n                e.element.getWidget(LookupEditor).value = q[\"cat\"];\r\n            };\r\n        }\n\r\n        filters.push({\r\n            type: LookupEditor,\r\n            options: {\r\n                lookupKey: WaresRow.lookupKey\r\n            },\r\n            field: 'WaresID',\r\n            title: 'Contains Wares in Details',\r\n            handler: w => {\r\n                (this.view.params as ProductsListRequest).WaresId = toId(w.value);\r\n            },\r\n            cssClass: 'hidden-xs'\r\n        });\r\n\r\n        return filters;\r\n    }\n\n    protected getButtons(): ToolButton[] {\r\n        var buttons = super.getButtons();\r\n\r\n        buttons.push( ExcelExportHelper.createToolButton({\r\n            title: 'Export To Excel',\r\n            grid: this,\r\n            service: ProductsService.baseUrl + '/ListExcel',\r\n            onViewSubmit: () => this.onViewSubmit(),\r\n            separator: true\r\n        }));\r\n\r\n        //buttons.push({\r\n        //    title: 'Import From Excel',\r\n        //    cssClass: 'export-xlsx-button',\r\n        //    onClick: () => {\r\n        //        // open import dialog, let it handle rest\r\n        //        var dialog = new ProductExcelImportDialog();\r\n        //        dialog.element.on('dialogclose', () => {\r\n        //            this.refresh();\r\n        //            dialog = null;\r\n        //        });\r\n        //        dialog.dialogOpen();\r\n        //    }\r\n        //});\n\n        buttons.push(PdfExportHelper.createToolButton({\r\n            grid: this,\r\n            onViewSubmit: () => this.onViewSubmit(),\r\n            reportTitle: 'Product List',\r\n            columnTitles: {\r\n                'Discontinued': 'Dis.',\r\n            },\r\n            tableOptions: {\r\n                columnStyles: {\r\n                    ProductID: {\r\n                        columnWidth: 25,\r\n                        halign: 'right'\r\n                    },\r\n                    Discountinued: {\r\n                        columnWidth: 25\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n\r\n        buttons.push({\r\n            title: 'Save Changes',\r\n            cssClass: 'apply-changes-button disabled',\r\n            onClick: e => this.saveClick(),\r\n            separator: true\r\n        });\r\n\r\n        return buttons;\r\n    }\n\n    protected onViewProcessData(response) {\r\n        this.pendingChanges = {};\r\n        this.setSaveButtonState();\r\n        return super.onViewProcessData(response);\r\n    }\n\n    private numericInputFormatter(ctx) {\r\n        var klass = 'edit numeric';\r\n        var item = ctx.item as ProductsRow;\r\n        var pending = this.pendingChanges[item.ProductId];\r\n\r\n        if (pending && pending[ctx.column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, ctx.column.field) as number;\r\n\r\n        return \"<input type='text' class='\" + klass +\r\n            \"' data-field='\" + ctx.column.field +\r\n            \"' value='\" + formatNumber(value, '0.####') + \"'/>\";\r\n    }\n\n    private moneyInputFormatter(ctx) {\r\n        var klass = 'edit numeric';\r\n        var item = ctx.item as ProductsRow;\r\n        var pending = this.pendingChanges[item.ProductId];\r\n\r\n        if (pending && pending[ctx.column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, ctx.column.field) as number;\r\n\r\n        return \"<input type='text' style='text - align:right' class='\" + klass +\r\n            \"' data-field='\" + ctx.column.field +\r\n            \"' value='\" + formatNumber(value, '0.0000') + \"'/>\";\r\n    }\n\n    private stringInputFormatter(ctx) {\r\n        var klass = 'edit string';\r\n        var item = ctx.item as ProductsRow;\r\n        var pending = this.pendingChanges[item.ProductId];\r\n        var column = ctx.column as Column;\r\n\r\n        if (pending && pending[column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, column.field) as string;\r\n\r\n        return \"<input type='text' class='\" + klass +\r\n            \"' data-field='\" + column.field +\r\n            \"' value='\" + attrEncode(value) +\r\n            \"' maxlength='\" + column.sourceItem.maxLength + \"'/>\";\r\n    }\n\n    /**\r\n     * Sorry but you cannot use LookupEditor, e.g. Select2 here, only possible is a SELECT element\r\n     */\r\n    private selectFormatter(ctx: FormatterContext, idField: string, lookup: Q.Lookup<any>) {\r\n        var klass = 'edit';\r\n        var item = ctx.item as ProductsRow;\r\n        var pending = this.pendingChanges[item.ProductId];\r\n        var column = ctx.column as Slick.Column;\r\n\r\n        if (pending && pending[idField] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, idField);\r\n        var markup = \"<select class='\" + klass +\r\n            \"' data-field='\" + idField +\r\n            \"' style='width: 100%; max-width: 100%'>\";\r\n        for (var c of lookup.items) {\r\n            let id = c[lookup.idField];\r\n            markup += \"<option value='\" + attrEncode(id) + \"'\"\r\n            if (id == value) {\r\n                markup += \" selected\";\r\n            }\r\n            markup += \">\" + htmlEncode(c[lookup.textField]) + \"</option>\";\r\n        }\r\n        return markup + \"</select>\";\r\n    }\n\n    private getEffectiveValue(item, field): any {\r\n        var pending = this.pendingChanges[item.ProductID];\r\n        if (pending && pending[field] !== undefined) {\r\n            return pending[field];\r\n        }\r\n\r\n        return item[field];\r\n    }\n\n    protected getColumns() {\r\n        var columns = super.getColumns();\r\n        var num = ctx => this.numericInputFormatter(ctx);\r\n        var str = ctx => this.stringInputFormatter(ctx);\r\n        var mon = ctx => this.moneyInputFormatter(ctx);\r\n\r\n        first(columns, x => x.field === 'QuantityPerUnit').format = str;\r\n\r\n        var category = first(columns, x => x.field === fld.CategoryCategoryName);\r\n        category.referencedFields = [fld.CategoryId];\r\n        category.format = ctx => this.selectFormatter(ctx, fld.CategoryId, CategoriesRow.getLookup());\r\n\r\n        //var supplier = Q.first(columns, x => x.field === fld.SupplierCompanyName);\r\n        //supplier.referencedFields = [fld.SupplierID];\r\n        //supplier.format = ctx => this.selectFormatter(ctx, fld.SupplierID, SupplierRow.getLookup());\r\n\r\n        first(columns, x => x.field === fld.UnitPrice).format = mon;\r\n        first(columns, x => x.field == fld.UnitPrice).cssClass += \" col-unit-price\";\r\n        first(columns, x => x.field === fld.UnitsInStock).format = num;\r\n        first(columns, x => x.field === fld.UnitsOnOrder).format = num;\r\n        first(columns, x => x.field === fld.ReorderLevel).format = num;\r\n\r\n        return columns;\r\n    }\n\n    private inputsChange(e: JQueryEventObject) {\r\n        var cell = this.slickGrid.getCellFromEvent(e);\r\n        var item = this.itemAt(cell.row);\r\n        var input = $(e.target);\r\n        var field = input.data('field');\r\n        var text = coalesce(trimToNull(input.val()), '0');\r\n        var pending = this.pendingChanges[item.ProductId];\r\n\r\n        var effective = this.getEffectiveValue(item, field);\r\n        var oldText: string;\r\n        if (input.hasClass(\"numeric\"))\r\n            oldText = formatNumber(effective, '0.####');\r\n        else\r\n            oldText = effective as string;\r\n\r\n        var value;\r\n        if (field === 'UnitPrice') {\r\n            value = parseDecimal(text);\r\n            if (value == null || isNaN(value)) {\r\n                notifyError(text('Validation.Decimal'), '', null);\r\n                input.val(oldText);\r\n                input.focus();\r\n                return;\r\n            }\r\n        }\r\n        else if (input.hasClass(\"numeric\")) {\r\n            var i = parseInteger(text);\r\n            if (isNaN(i) || i > 32767 || i < 0) {\r\n                notifyError(text('Validation.Integer'), '', null);\r\n                input.val(oldText);\r\n                input.focus();\r\n                return;\r\n            }\r\n            value = i;\r\n        }\r\n        else\r\n            value = text;\r\n\r\n        if (!pending) {\r\n            this.pendingChanges[item.ProductId] = pending = {};\r\n        }\r\n\r\n        pending[field] = value;\r\n        item[field] = value;\r\n        this.view.refresh();\r\n\r\n        if (input.hasClass(\"numeric\"))\r\n            value = formatNumber(value, '0.####');\r\n\r\n        input.val(value).addClass('dirty');\r\n\r\n        this.setSaveButtonState();\r\n    }\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\r\n        super.onClick(e, row, cell);\r\n\r\n        if (e.isDefaultPrevented())\r\n            return;\r\n\r\n        var item = this.itemAt(row);\r\n        var target = $(e.target);\r\n\r\n        // if user clicks \"i\" element, e.g. icon\r\n        if (target.parent().hasClass('inline-action'))\r\n            target = target.parent();\r\n\r\n        if (target.hasClass('inline-action')) {\r\n            e.preventDefault();\r\n\r\n            if (target.hasClass('print-invoice')) {\r\n                ReportHelper.execute({\r\n                    reportKey: 'Northwind.OrderDetail',\r\n                    params: {\r\n                        ProductId: item.ProductId\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\n\n    private setSaveButtonState() {\r\n        this.toolbar.findButton('apply-changes-button').toggleClass('disabled',\r\n            Object.keys(this.pendingChanges).length === 0);\r\n    }\n\n    private saveClick() {\r\n        if (Object.keys(this.pendingChanges).length === 0) {\r\n            return;\r\n        }\r\n\r\n        // this calls save service for all modified rows, one by one\r\n        // you could write a batch update service\r\n        var keys = Object.keys(this.pendingChanges);\r\n        var current = -1;\r\n        var self = this;\r\n\r\n        (function saveNext() {\r\n            if (++current >= keys.length) {\r\n                self.refresh();\r\n                return;\r\n            }\r\n\r\n            var key = keys[current];\r\n            var entity = deepClone(self.pendingChanges[key]);\r\n            entity.ProductID = key;\r\n            serviceRequest('Store/Product/Update', {\r\n                EntityId: key,\r\n                Entity: entity\r\n            }, (response) => {\r\n                delete self.pendingChanges[key];\r\n                saveNext();\r\n            });\r\n        })();\r\n    }\n\n\n    //protected addButtonClick() {\r\n    //    var eq = this.view.params.EqualityFilter;\r\n    //    this.editItem(<ProductsRow>{\r\n    //        CustomerID: eq ? eq.CustomerID : null\r\n    //    });\r\n    //}\r\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { ReportHelper } from \"@serenity-is/extensions\";\r\nimport { ProductsForm, ProductsRow, ProductsService } from '../../ServerTypes/Store';\r\n\r\n@Decorators.registerClass('Store.Store.ProductsDialog')\r\nexport class ProductsDialog extends EntityDialog<ProductsRow, any> {\r\n    protected getFormKey() { return ProductsForm.formKey; }\r\n    protected getIdProperty() { return ProductsRow.idProperty; }\r\n    protected getLocalTextPrefix() { return ProductsRow.localTextPrefix; }\r\n    protected getNameProperty() { return ProductsRow.nameProperty; }\r\n    protected getService() { return ProductsService.baseUrl; }\r\n    protected getDeletePermission() { return ProductsRow.deletePermission; }\r\n    protected getInsertPermission() { return ProductsRow.insertPermission; }\r\n    protected getUpdatePermission() { return ProductsRow.updatePermission; }\r\n\r\n    protected form = new ProductsForm(this.idPrefix);\n\n    constructor() {\r\n        super();\r\n    }\n\r\n    getToolbarButtons() {\r\n        var buttons = super.getToolbarButtons();\r\n\r\n        buttons.push(ReportHelper.createToolButton({\r\n            title: 'Invoice',\r\n            cssClass: 'export-pdf-button',\r\n            reportKey: 'Northwind.OrderDetail',\r\n            getParams: () => ({\r\n                OrderID: this.get_entityId()\r\n            })\r\n        }));\r\n\r\n        return buttons;\r\n    }\r\n\r\n    protected updateInterface() {\r\n        super.updateInterface();\r\n\r\n        this.toolbar.findButton('export-pdf-button').toggle(this.isEditMode());\r\n    }\r\n}"],
  "mappings": "+KAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAA6E,SAC7EC,EAAoM,SACpMC,EAAiE,SCFjE,IAAAC,EAAyC,SACzCC,EAA6B,SAItB,IAAMC,EAAN,cAA6B,cAA+B,CAY/D,aAAc,CACV,MAAM,EAHV,KAAU,KAAO,IAAIC,EAAa,KAAK,QAAQ,CAI/C,CAbU,YAAa,CAAE,OAAOA,EAAa,OAAS,CAC5C,eAAgB,CAAE,OAAOC,EAAY,UAAY,CACjD,oBAAqB,CAAE,OAAOA,EAAY,eAAiB,CAC3D,iBAAkB,CAAE,OAAOA,EAAY,YAAc,CACrD,YAAa,CAAE,OAAOC,EAAgB,OAAS,CAC/C,qBAAsB,CAAE,OAAOD,EAAY,gBAAkB,CAC7D,qBAAsB,CAAE,OAAOA,EAAY,gBAAkB,CAC7D,qBAAsB,CAAE,OAAOA,EAAY,gBAAkB,CAQvE,mBAAoB,CAChB,IAAIE,EAAU,MAAM,kBAAkB,EAEtC,OAAAA,EAAQ,KAAK,eAAa,iBAAiB,CACvC,MAAO,UACP,SAAU,oBACV,UAAW,wBACX,UAAW,KAAO,CACd,QAAS,KAAK,aAAa,CAC/B,EACJ,CAAC,CAAC,EAEKA,CACX,CAEU,iBAAkB,CACxB,MAAM,gBAAgB,EAEtB,KAAK,QAAQ,WAAW,mBAAmB,EAAE,OAAO,KAAK,WAAW,CAAC,CACzE,CACJ,EApCaC,EAAAL,EAAA,kBAAAA,EAANM,EAAA,CADN,aAAW,cAAc,4BAA4B,GACzCN,GDEb,IAAMO,EAAMC,EAAY,OAIXC,EAAN,cAA2B,YAA6B,CAU3D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,EAHnB,KAAQ,eAAkC,CAAC,CAI3C,CAXU,eAAgB,CAAE,OAAOC,EAAgB,UAAY,CACrD,eAAgB,CAAE,OAAYC,CAAgB,CAC9C,eAAgB,CAAE,OAAOJ,EAAY,UAAY,CACjD,qBAAsB,CAAE,OAAOA,EAAY,gBAAkB,CAC7D,oBAAqB,CAAE,OAAOA,EAAY,eAAiB,CAC3D,YAAa,CAAE,OAAOK,EAAgB,OAAS,CAQ/C,iBAAkB,CACxB,IAAIC,EAAU,MAAM,gBAAgB,EAEhCC,KAAI,oBAAiB,EACzB,GAAIA,EAAE,IAAQ,CACV,IAAIC,KAAW,YAASF,EAASG,GAAKA,EAAE,OAAS,YAAY,EAC7DD,EAAS,KAAOE,GAAK,CACjBA,EAAE,QAAQ,UAAU,cAAY,EAAE,MAAQH,EAAE,GAChD,CACJ,CAEA,OAAAD,EAAQ,KAAK,CACT,KAAM,eACN,QAAS,CACL,UAAWK,EAAS,SACxB,EACA,MAAO,UACP,MAAO,4BACP,QAASC,GAAK,CACT,KAAK,KAAK,OAA+B,WAAU,QAAKA,EAAE,KAAK,CACpE,EACA,SAAU,WACd,CAAC,EAEMN,CACX,CAEU,YAA2B,CACjC,IAAIO,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,KAAM,oBAAkB,iBAAiB,CAC7C,MAAO,kBACP,KAAM,KACN,QAASR,EAAgB,QAAU,aACnC,aAAc,IAAM,KAAK,aAAa,EACtC,UAAW,EACf,CAAC,CAAC,EAgBFQ,EAAQ,KAAK,kBAAgB,iBAAiB,CAC1C,KAAM,KACN,aAAc,IAAM,KAAK,aAAa,EACtC,YAAa,eACb,aAAc,CACV,aAAgB,MACpB,EACA,aAAc,CACV,aAAc,CACV,UAAW,CACP,YAAa,GACb,OAAQ,OACZ,EACA,cAAe,CACX,YAAa,EACjB,CACJ,CACJ,CACJ,CAAC,CAAC,EAEFA,EAAQ,KAAK,CACT,MAAO,eACP,SAAU,gCACV,QAASH,GAAK,KAAK,UAAU,EAC7B,UAAW,EACf,CAAC,EAEMG,CACX,CAEU,kBAAkBC,EAAU,CAClC,YAAK,eAAiB,CAAC,EACvB,KAAK,mBAAmB,EACjB,MAAM,kBAAkBA,CAAQ,CAC3C,CAEQ,sBAAsBC,EAAK,CAC/B,IAAIC,EAAQ,eACRC,EAAOF,EAAI,KACXG,EAAU,KAAK,eAAeD,EAAK,SAAS,EAE5CC,GAAWA,EAAQH,EAAI,OAAO,KAAK,IAAM,SACzCC,GAAS,UAGb,IAAIG,EAAQ,KAAK,kBAAkBF,EAAMF,EAAI,OAAO,KAAK,EAEzD,MAAO,6BAA+BC,EAClC,iBAAmBD,EAAI,OAAO,MAC9B,eAAc,gBAAaI,EAAO,QAAQ,EAAI,KACtD,CAEQ,oBAAoBJ,EAAK,CAC7B,IAAIC,EAAQ,eACRC,EAAOF,EAAI,KACXG,EAAU,KAAK,eAAeD,EAAK,SAAS,EAE5CC,GAAWA,EAAQH,EAAI,OAAO,KAAK,IAAM,SACzCC,GAAS,UAGb,IAAIG,EAAQ,KAAK,kBAAkBF,EAAMF,EAAI,OAAO,KAAK,EAEzD,MAAO,wDAA0DC,EAC7D,iBAAmBD,EAAI,OAAO,MAC9B,eAAc,gBAAaI,EAAO,QAAQ,EAAI,KACtD,CAEQ,qBAAqBJ,EAAK,CAC9B,IAAIC,EAAQ,cACRC,EAAOF,EAAI,KACXG,EAAU,KAAK,eAAeD,EAAK,SAAS,EAC5CG,EAASL,EAAI,OAEbG,GAAWA,EAAQE,EAAO,KAAK,IAAM,SACrCJ,GAAS,UAGb,IAAIG,EAAQ,KAAK,kBAAkBF,EAAMG,EAAO,KAAK,EAErD,MAAO,6BAA+BJ,EAClC,iBAAmBI,EAAO,MAC1B,eAAc,cAAWD,CAAK,EAC9B,gBAAkBC,EAAO,WAAW,UAAY,KACxD,CAKQ,gBAAgBL,EAAuBM,EAAiBC,EAAuB,CACnF,IAAIN,EAAQ,OACRC,EAAOF,EAAI,KACXG,EAAU,KAAK,eAAeD,EAAK,SAAS,EAC5CG,EAASL,EAAI,OAEbG,GAAWA,EAAQG,CAAO,IAAM,SAChCL,GAAS,UAGb,IAAIG,EAAQ,KAAK,kBAAkBF,EAAMI,CAAO,EAC5CE,EAAS,kBAAoBP,EAC7B,iBAAmBK,EACnB,0CACJ,QAASG,KAAKF,EAAO,MAAO,CACxB,IAAIG,EAAKD,EAAEF,EAAO,OAAO,EACzBC,GAAU,qBAAoB,cAAWE,CAAE,EAAI,IAC3CA,GAAMN,IACNI,GAAU,aAEdA,GAAU,OAAM,cAAWC,EAAEF,EAAO,SAAS,CAAC,EAAI,WACtD,CACA,OAAOC,EAAS,WACpB,CAEQ,kBAAkBN,EAAMS,EAAY,CACxC,IAAIR,EAAU,KAAK,eAAeD,EAAK,SAAS,EAChD,OAAIC,GAAWA,EAAQQ,CAAK,IAAM,OACvBR,EAAQQ,CAAK,EAGjBT,EAAKS,CAAK,CACrB,CAEU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAC3BC,EAAMC,EAAAd,GAAO,KAAK,sBAAsBA,CAAG,EAArC,OACNe,EAAMD,EAAAd,GAAO,KAAK,qBAAqBA,CAAG,EAApC,OACNgB,EAAMF,EAAAd,GAAO,KAAK,oBAAoBA,CAAG,EAAnC,UAEV,SAAMY,EAASlB,GAAKA,EAAE,QAAU,iBAAiB,EAAE,OAASqB,EAE5D,IAAItB,KAAW,SAAMmB,EAASlB,GAAKA,EAAE,QAAUV,EAAI,oBAAoB,EACvE,OAAAS,EAAS,iBAAmB,CAACT,EAAI,UAAU,EAC3CS,EAAS,OAASO,GAAO,KAAK,gBAAgBA,EAAKhB,EAAI,WAAYiC,EAAc,UAAU,CAAC,KAM5F,SAAML,EAASlB,GAAKA,EAAE,QAAUV,EAAI,SAAS,EAAE,OAASgC,KACxD,SAAMJ,EAASlB,GAAKA,EAAE,OAASV,EAAI,SAAS,EAAE,UAAY,qBAC1D,SAAM4B,EAASlB,GAAKA,EAAE,QAAUV,EAAI,YAAY,EAAE,OAAS6B,KAC3D,SAAMD,EAASlB,GAAKA,EAAE,QAAUV,EAAI,YAAY,EAAE,OAAS6B,KAC3D,SAAMD,EAASlB,GAAKA,EAAE,QAAUV,EAAI,YAAY,EAAE,OAAS6B,EAEpDD,CACX,CAEQ,aAAa,EAAsB,CACvC,IAAIM,EAAO,KAAK,UAAU,iBAAiB,CAAC,EACxChB,EAAO,KAAK,OAAOgB,EAAK,GAAG,EAC3BC,EAAQ,EAAE,EAAE,MAAM,EAClBR,EAAQQ,EAAM,KAAK,OAAO,EAC1BC,KAAO,eAAS,cAAWD,EAAM,IAAI,CAAC,EAAG,GAAG,EAC5ChB,EAAU,KAAK,eAAeD,EAAK,SAAS,EAE5CmB,EAAY,KAAK,kBAAkBnB,EAAMS,CAAK,EAC9CW,EACAH,EAAM,SAAS,SAAS,EACxBG,KAAU,gBAAaD,EAAW,QAAQ,EAE1CC,EAAUD,EAEd,IAAIjB,EACJ,GAAIO,IAAU,aAEV,GADAP,KAAQ,gBAAagB,CAAI,EACrBhB,GAAS,MAAQ,MAAMA,CAAK,EAAG,IAC/B,eAAYgB,EAAK,oBAAoB,EAAG,GAAI,IAAI,EAChDD,EAAM,IAAIG,CAAO,EACjBH,EAAM,MAAM,EACZ,MACJ,UAEKA,EAAM,SAAS,SAAS,EAAG,CAChC,IAAII,KAAI,gBAAaH,CAAI,EACzB,GAAI,MAAMG,CAAC,GAAKA,EAAI,OAASA,EAAI,EAAG,IAChC,eAAYH,EAAK,oBAAoB,EAAG,GAAI,IAAI,EAChDD,EAAM,IAAIG,CAAO,EACjBH,EAAM,MAAM,EACZ,MACJ,CACAf,EAAQmB,CACZ,MAEInB,EAAQgB,EAEPjB,IACD,KAAK,eAAeD,EAAK,SAAS,EAAIC,EAAU,CAAC,GAGrDA,EAAQQ,CAAK,EAAIP,EACjBF,EAAKS,CAAK,EAAIP,EACd,KAAK,KAAK,QAAQ,EAEde,EAAM,SAAS,SAAS,IACxBf,KAAQ,gBAAaA,EAAO,QAAQ,GAExCe,EAAM,IAAIf,CAAK,EAAE,SAAS,OAAO,EAEjC,KAAK,mBAAmB,CAC5B,CAEU,QAAQ,EAAsBoB,EAAaN,EAAc,CAG/D,GAFA,MAAM,QAAQ,EAAGM,EAAKN,CAAI,EAEtB,GAAE,mBAAmB,EAGzB,KAAIhB,EAAO,KAAK,OAAOsB,CAAG,EACtBC,EAAS,EAAE,EAAE,MAAM,EAGnBA,EAAO,OAAO,EAAE,SAAS,eAAe,IACxCA,EAASA,EAAO,OAAO,GAEvBA,EAAO,SAAS,eAAe,IAC/B,EAAE,eAAe,EAEbA,EAAO,SAAS,eAAe,GAC/B,eAAa,QAAQ,CACjB,UAAW,wBACX,OAAQ,CACJ,UAAWvB,EAAK,SACpB,CACJ,CAAC,GAGb,CAEQ,oBAAqB,CACzB,KAAK,QAAQ,WAAW,sBAAsB,EAAE,YAAY,WACxD,OAAO,KAAK,KAAK,cAAc,EAAE,SAAW,CAAC,CACrD,CAEQ,WAAY,CAChB,GAAI,OAAO,KAAK,KAAK,cAAc,EAAE,SAAW,EAMhD,KAAIwB,EAAO,OAAO,KAAK,KAAK,cAAc,EACtCC,EAAU,GACVC,EAAO,KAEVd,EAAA,SAASe,GAAW,CACjB,GAAI,EAAEF,GAAWD,EAAK,OAAQ,CAC1BE,EAAK,QAAQ,EACb,MACJ,CAEA,IAAIE,EAAMJ,EAAKC,CAAO,EAClBI,KAAS,aAAUH,EAAK,eAAeE,CAAG,CAAC,EAC/CC,EAAO,UAAYD,KACnB,kBAAe,uBAAwB,CACnC,SAAUA,EACV,OAAQC,CACZ,EAAIhC,GAAa,CACb,OAAO6B,EAAK,eAAeE,CAAG,EAC9BD,EAAS,CACb,CAAC,CACL,EAhBC,YAgBE,EACP,CASJ,EAjVaf,EAAA5B,EAAA,gBAAAA,EAAN8C,EAAA,CAFN,aAAW,cAAc,0BAA0B,EACnD,aAAW,WAAW,GACV9C,GDRb,EAAE,UAAW,IACT,0BAAuB,IAAI+C,EAAa,EAAE,UAAU,CAAC,EAAE,OAAO,CAClE,CAAC",
  "names": ["import_q", "import_corelib", "import_q", "import_extensions", "import_corelib", "import_extensions", "ProductsDialog", "ProductsForm", "ProductsRow", "ProductsService", "buttons", "__name", "__decorateClass", "fld", "ProductsRow", "ProductsGrid", "container", "ProductsColumns", "ProductsDialog", "ProductsService", "filters", "q", "category", "x", "e", "WaresRow", "w", "buttons", "response", "ctx", "klass", "item", "pending", "value", "column", "idField", "lookup", "markup", "c", "id", "field", "columns", "num", "__name", "str", "mon", "CategoriesRow", "cell", "input", "text", "effective", "oldText", "i", "row", "target", "keys", "current", "self", "saveNext", "key", "entity", "__decorateClass", "ProductsGrid"]
}
