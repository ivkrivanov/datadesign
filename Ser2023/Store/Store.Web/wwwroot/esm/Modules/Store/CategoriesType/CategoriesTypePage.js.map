{
  "version": 3,
  "sources": ["../../../../../Modules/Store/CategoriesType/CategoriesTypePage.ts", "../../../../../Modules/Store/CategoriesType/CategoriesTypeGrid.ts", "../../../../../Modules/ServerTypes/Store/CategoriesTypeColumns.ts", "../../../../../Modules/ServerTypes/Store/CategoriesTypeForm.ts", "../../../../../Modules/ServerTypes/Store/CategoriesTypeRow.ts", "../../../../../Modules/ServerTypes/Store/CategoriesTypeService.ts", "../../../../../Modules/ServerTypes/Store/PermissionKeys.ts", "../../../../../Modules/Store/CategoriesType/CategoriesTypeDialog.ts"],
  "sourcesContent": ["\r\nimport { initFullHeightGridPage } from \"@serenity-is/corelib/q\"\r\nimport { CategoriesTypeGrid } from \"./CategoriesTypeGrid\";\r\n\r\n$(function () {\r\n    initFullHeightGridPage(new CategoriesTypeGrid($('#GridDiv')).element);\r\n});\r\n", "\r\nimport { Decorators, EntityGrid } from \"@serenity-is/corelib\";\nimport { CategoriesTypeColumns, CategoriesTypeRow, CategoriesTypeService } from \"../../ServerTypes/Store\";\r\nimport { CategoriesTypeDialog } from \"./CategoriesTypeDialog\";\r\n\r\n    @Decorators.registerClass('Store.Store.CategoriesTypeDialog')\r\n    export class CategoriesTypeGrid extends EntityGrid<CategoriesTypeRow, any> {\r\n        protected getColumnsKey() { return 'Store.CategoriesType'; }\r\n        protected getDialogType() { return CategoriesTypeDialog; }\r\n        protected getIdProperty() { return CategoriesTypeRow.idProperty; }\r\n        //protected getInsertPermission() { return CategoriesTypeRow.insertPermission; }\r\n        protected getLocalTextPrefix() { return CategoriesTypeRow.localTextPrefix; }\r\n        protected getService() { return CategoriesTypeService.baseUrl; }\r\n    }\r\n", "\uFEFFexport class CategoriesTypeColumns {\n    static columnsKey = 'Store.CategoriesType';\n}\n", "\uFEFFimport { IntegerEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesTypeForm {\n    Type: IntegerEditor;\n    CategoryType: StringEditor;\n}\n\nexport class CategoriesTypeForm extends PrefixedContext {\n    static formKey = 'Store.CategoriesType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CategoriesTypeForm.init)  {\n            CategoriesTypeForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = StringEditor;\n\n            initFormType(CategoriesTypeForm, [\n                'Type', w0,\n                'CategoryType', w1\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesTypeRow {\n    CategoryTypeId?: number;\n    Type?: number;\n    CategoryType?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class CategoriesTypeRow {\n    static readonly idProperty = 'CategoryTypeId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Type';\n    static readonly localTextPrefix = 'Store.CategoriesType';\n    static readonly lookupKey = 'Store.CategoriesType';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<CategoriesTypeRow>('Store.CategoriesType') }\n    static async getLookupAsync() { return getLookupAsync<CategoriesTypeRow>('Store.CategoriesType') }\n\n    static readonly deletePermission = 'Store:CategoriesType:Delete';\n    static readonly insertPermission = 'Store:CategoriesType:Modify';\n    static readonly readPermission = 'Store:CategoriesType:View';\n    static readonly updatePermission = 'Store:CategoriesType:Modify';\n\n    static readonly Fields = fieldsProxy<CategoriesTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { CategoriesTypeRow } from \"./CategoriesTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace CategoriesTypeService {\n    export const baseUrl = 'Store/CategoriesType';\n\n    export declare function Create(request: SaveRequest<CategoriesTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoriesTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoriesTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CategoriesTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/CategoriesType/Create\",\n        Update: \"Store/CategoriesType/Update\",\n        Delete: \"Store/CategoriesType/Delete\",\n        Retrieve: \"Store/CategoriesType/Retrieve\",\n        List: \"Store/CategoriesType/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CategoriesTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport namespace PermissionKeys {\n    export const General = \"Store:General\";\n\n    export namespace Categories {\n        export const Delete = \"Store:Categories:Delete\";\n        export const Modify = \"Store:Categories:Modify\";\n        export const View = \"Store:Categories:View\";\n    }\n\n    export namespace CategoriesType {\n        export const Delete = \"Store:CategoriesType:Delete\";\n        export const Modify = \"Store:CategoriesType:Modify\";\n        export const View = \"Store:CategoriesType:View\";\n    }\n\n    export namespace Shops {\n        export const Delete = \"Store:Shops:Delete\";\n        export const Modify = \"Store:Shops:Modify\";\n        export const View = \"Store:Shops:View\";\n    }\n\n    export namespace DocumentType {\n        export const Delete = \"Store:DocumentType:Delete\";\n        export const Modify = \"Store:DocumentType:Modify\";\n        export const View = \"Store:DocumentType:View\";\n    }\n\n    export namespace Measures {\n        export const Delete = \"Store:Measures:Delete\";\n        export const Modify = \"Store:Measures:Modify\";\n        export const View = \"Store:Measures:View\";\n    }\n\n    export namespace OperationType {\n        export const Delete = \"Store:OperationType:Delete\";\n        export const Modify = \"Store:OperationType:Modify\";\n        export const View = \"Store:OperationType:View\";\n    }\n\n    export namespace Counterparties {\n        export const Delete = \"Store:Counterparty:Delete\";\n        export const Modify = \"Store:Counterparty:Modify\";\n        export const View = \"Store:Counterparty:View\";\n    }\n\n    export namespace Wares {\n        export const Delete = \"Store:Wares:Delete\";\n        export const Modify = \"Store:Wares:Modify\";\n        export const View = \"Store:Wares:View\";\n    }\n\n    export namespace Product {\n        export const Delete = \"Store:Product:Delete\";\n        export const Modify = \"Store:Product:Modify\";\n        export const View = \"Store:Product:View\";\n    }\n}\n", "\r\nimport { Decorators, EntityDialog } from \"@serenity-is/corelib\";\r\nimport { CategoriesTypeForm, CategoriesTypeRow, CategoriesTypeService } from \"../../ServerTypes/Store\";\r\n\r\n    @Decorators.registerClass('Store.Store.CategoriesTypeDialog')\r\n    export class CategoriesTypeDialog extends EntityDialog<CategoriesTypeRow, any> {\r\n        protected getFormKey() { return CategoriesTypeForm.formKey; }\r\n        protected getIdProperty() { return CategoriesTypeRow.idProperty; }\r\n        protected getLocalTextPrefix() { return CategoriesTypeRow.localTextPrefix; }\r\n        protected getNameProperty() { return CategoriesTypeRow.nameProperty; }\r\n        protected getService() { return CategoriesTypeService.baseUrl; }\r\n        //protected getDeletePermission() { return CategoriesTypeRow.deletePermission; }\r\n        //protected getInsertPermission() { return CategoriesTypeRow.insertPermission; }\r\n        //protected getUpdatePermission() { return CategoriesTypeRow.updatePermission; }\r\n\r\n        protected form = new CategoriesTypeForm(this.idPrefix);\r\n\r\n    }\r\n"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "CategoriesTypeColumns", "__name", "import_corelib", "import_q", "_CategoriesTypeForm", "prefix", "w0", "w1", "CategoriesTypeForm", "__name", "import_q", "CategoriesTypeRow", "__async", "__name", "import_q", "CategoriesTypeService", "x", "r", "s", "o", "PermissionKeys", "Categories", "CategoriesType", "Shops", "DocumentType", "Measures", "OperationType", "Counterparties", "Wares", "Product", "import_corelib", "CategoriesTypeDialog", "CategoriesTypeForm", "CategoriesTypeRow", "CategoriesTypeService", "__name", "__decorateClass", "CategoriesTypeGrid", "CategoriesTypeDialog", "CategoriesTypeRow", "CategoriesTypeService", "__name", "__decorateClass", "CategoriesTypeGrid"]
}
