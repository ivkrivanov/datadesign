{
  "version": 3,
  "sources": ["../../../../../Modules/Store/Categories/CategoriesPage.ts", "../../../../../Modules/Store/Categories/CategoriesGrid.ts", "../../../../../Modules/Common/Helpers/ExcelExportHelper.ts", "../../../../../Modules/Store/Categories/CategoriesDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { CategoriesGrid } from './CategoriesGrid';\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new CategoriesGrid($('#GridDiv')).element);\r\n});", "import { Decorators, EntityGrid, LookupEditor } from '@serenity-is/corelib';\r\nimport { toId } from '@serenity-is/corelib/q';\r\nimport { ExcelExportHelper } from '../../Common/Helpers/ExcelExportHelper';\r\nimport { CategoriesColumns, CategoriesRow, CategoriesService, CategoriesTypeRow } from '../../ServerTypes/Store';\r\nimport { CategoriesListRequest } from '../../ServerTypes/Store/CategoriesListRequest';\r\nimport { CategoriesDialog } from './CategoriesDialog';\r\n\r\n@Decorators.registerClass('Store.Store.CategoriesGrid')\r\nexport class CategoriesGrid extends EntityGrid<CategoriesRow, any> {\r\n    protected getColumnsKey() { return CategoriesColumns.columnsKey; }\r\n    protected getDialogType() { return CategoriesDialog; }\r\n    protected getIdProperty() { return CategoriesRow.idProperty; }\r\n    protected getInsertPermission() { return CategoriesRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return CategoriesRow.localTextPrefix; }\r\n    protected getService() { return CategoriesService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\r\n\r\n    //protected getQuickFilters() {\r\n    //    var filters = super.getQuickFilters();\r\n\r\n    //    filters.push({\r\n    //        type: LookupEditor,\r\n    //        options: {\r\n    //            lookupKey: CategoriesTypeRow.lookupKey\r\n    //        },\r\n    //        field: 'CategoriesID',\r\n    //        title: 'CategoriesType',\r\n    //        handler: w => {\r\n    //            (this.view.params as CategoriesListRequest).CategoryId = toId(w.value);\r\n    //        },\r\n    //        cssClass: 'hidden-xs'\r\n    //    });\r\n\r\n    //    return filters;\r\n    //}\r\n\r\n    protected getDefaultSortBy() {\r\n        return [CategoriesRow.Fields.CategoryCode];\r\n    }\r\n\r\n    protected getButtons() {\r\n        var buttons = super.getButtons();\r\n\r\n        buttons.push(ExcelExportHelper.createToolButton({\r\n            title: 'Export To Excel',\r\n            grid: this,\r\n            service: CategoriesService.baseUrl + '/ListExcel',\r\n            onViewSubmit: () => this.onViewSubmit(),\r\n            separator: true\r\n        }));\r\n\r\n        //buttons.push({\r\n        //    title: 'Import From Excel',\r\n        //    cssClass: 'export-xlsx-button',\r\n        //    onClick: () => {\r\n        //        // open import dialog, let it handle rest\r\n        //        var dialog = new CategoriesExcelImportDialog();\r\n        //        dialog.element.on('dialogclose', () => {\r\n        //            this.refresh();\r\n        //            dialog = null;\r\n        //        });\r\n        //        dialog.dialogOpen();\r\n        //    }\r\n        //});\r\n\r\n        return buttons;\r\n    }\r\n}", "import { DataGrid, ToolButton } from \"@serenity-is/corelib\";\r\nimport { coalesce, deepClone, ListRequest, postToService } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface ExcelExportOptions {\r\n    grid: DataGrid<any, any>;\r\n    service: string;\r\n    onViewSubmit: () => boolean;\r\n    editRequest?: (request: ListRequest) => ListRequest;\r\n    title?: string;\r\n    hint?: string;\r\n    separator?: boolean;\r\n}\r\n\r\nexport namespace ExcelExportHelper {\r\n\r\n    export function createToolButton(options: ExcelExportOptions): ToolButton {\r\n\r\n        return {\r\n            hint: coalesce(options.hint, 'Excel'),\r\n            title: coalesce(options.title, ''),\r\n            cssClass: 'export-xlsx-button',\r\n            icon: 'fa-file-excel-o',\r\n            onClick: function () {\r\n                if (!options.onViewSubmit()) {\r\n                    return;\r\n                }\r\n\r\n                let grid = options.grid;\r\n\r\n                var request = deepClone(grid.getView().params) as ListRequest;\r\n                request.Take = 0;\r\n                request.Skip = 0;\r\n                var sortBy = grid.getView().sortBy;\r\n                if (sortBy) {\r\n                    request.Sort = sortBy;\r\n                }\r\n\r\n                request.ExportColumns = [];\r\n                let columns = grid.getGrid().getColumns();\r\n                for (let column of columns) {\r\n                    request.ExportColumns.push(column.id || column.field);\r\n                }\r\n\r\n                if (options.editRequest)\r\n                    request = options.editRequest(request);\r\n\r\n                postToService({ service: options.service, request: request, target: '_blank' });\r\n            },\r\n            separator: options.separator\r\n        };\r\n    }\r\n}\r\n", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { CategoriesForm, CategoriesRow, CategoriesService } from '../../ServerTypes/Store';\r\n\r\n@Decorators.registerClass('Store.Store.CategoriesDialog')\r\n export class CategoriesDialog extends EntityDialog<CategoriesRow, any> {\r\n    protected getFormKey() { return CategoriesForm.formKey; }\r\n    protected getIdProperty() { return CategoriesRow.idProperty; }\r\n    protected getLocalTextPrefix() { return CategoriesRow.localTextPrefix; }\r\n    protected getNameProperty() { return CategoriesRow.nameProperty; }\r\n    protected getService() { return CategoriesService.baseUrl; }\r\n    protected getDeletePermission() { return CategoriesRow.deletePermission; }\r\n    protected getInsertPermission() { return CategoriesRow.insertPermission; }\r\n    protected getUpdatePermission() { return CategoriesRow.updatePermission; }\r\n\r\n    protected form = new CategoriesForm(this.idPrefix);\r\n}"],
  "mappings": "0JAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAqD,SCCrD,IAAAC,EAAgE,SAYzD,IAAUC,MAAV,CAEI,SAASC,EAAiBC,EAAyC,CAEtE,MAAO,CACH,QAAM,YAASA,EAAQ,KAAM,OAAO,EACpC,SAAO,YAASA,EAAQ,MAAO,EAAE,EACjC,SAAU,qBACV,KAAM,kBACN,QAAS,UAAY,CACjB,GAAI,CAACA,EAAQ,aAAa,EACtB,OAGJ,IAAIC,EAAOD,EAAQ,KAEnB,IAAIE,KAAU,aAAUD,EAAK,QAAQ,EAAE,MAAM,EAC7CC,EAAQ,KAAO,EACfA,EAAQ,KAAO,EACf,IAAIC,EAASF,EAAK,QAAQ,EAAE,OACxBE,IACAD,EAAQ,KAAOC,GAGnBD,EAAQ,cAAgB,CAAC,EACzB,IAAIE,EAAUH,EAAK,QAAQ,EAAE,WAAW,EACxC,QAASI,KAAUD,EACfF,EAAQ,cAAc,KAAKG,EAAO,IAAMA,EAAO,KAAK,EAGpDL,EAAQ,cACRE,EAAUF,EAAQ,YAAYE,CAAO,MAEzC,iBAAc,CAAE,QAASF,EAAQ,QAAS,QAASE,EAAS,OAAQ,QAAS,CAAC,CAClF,EACA,UAAWF,EAAQ,SACvB,CACJ,CAnCOF,EAAS,iBAAAC,EAAAO,EAAAP,EAAA,sBAFHD,MAAA,KCbjB,IAAAS,EAAyC,SAIjC,IAAMC,EAAN,cAA+B,cAAiC,CAAhE,kCAUJ,KAAU,KAAO,IAAIC,EAAe,KAAK,QAAQ,EATvC,YAAa,CAAE,OAAOA,EAAe,OAAS,CAC9C,eAAgB,CAAE,OAAOC,EAAc,UAAY,CACnD,oBAAqB,CAAE,OAAOA,EAAc,eAAiB,CAC7D,iBAAkB,CAAE,OAAOA,EAAc,YAAc,CACvD,YAAa,CAAE,OAAOC,EAAkB,OAAS,CACjD,qBAAsB,CAAE,OAAOD,EAAc,gBAAkB,CAC/D,qBAAsB,CAAE,OAAOA,EAAc,gBAAkB,CAC/D,qBAAsB,CAAE,OAAOA,EAAc,gBAAkB,CAG7E,EAXcE,EAAAJ,EAAA,oBAAAA,EAANK,EAAA,CADP,aAAW,cAAc,8BAA8B,GAC1CL,GFIP,IAAMM,EAAN,cAA6B,YAA+B,CACrD,eAAgB,CAAE,OAAOC,EAAkB,UAAY,CACvD,eAAgB,CAAE,OAAOC,CAAkB,CAC3C,eAAgB,CAAE,OAAOC,EAAc,UAAY,CACnD,qBAAsB,CAAE,OAAOA,EAAc,gBAAkB,CAC/D,oBAAqB,CAAE,OAAOA,EAAc,eAAiB,CAC7D,YAAa,CAAE,OAAOC,EAAkB,OAAS,CAE3D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CAqBU,kBAAmB,CACzB,MAAO,CAACF,EAAc,OAAO,YAAY,CAC7C,CAEU,YAAa,CACnB,IAAIG,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,KAAKC,EAAkB,iBAAiB,CAC5C,MAAO,kBACP,KAAM,KACN,QAASH,EAAkB,QAAU,aACrC,aAAc,IAAM,KAAK,aAAa,EACtC,UAAW,EACf,CAAC,CAAC,EAgBKE,CACX,CACJ,EA9DaE,EAAAR,EAAA,kBAAAA,EAANS,EAAA,CADN,aAAW,cAAc,4BAA4B,GACzCT,GDLb,EAAE,UAAW,IACT,0BAAuB,IAAIU,EAAe,EAAE,UAAU,CAAC,EAAE,OAAO,CACpE,CAAC",
  "names": ["import_q", "import_corelib", "import_q", "ExcelExportHelper", "createToolButton", "options", "grid", "request", "sortBy", "columns", "column", "__name", "import_corelib", "CategoriesDialog", "CategoriesForm", "CategoriesRow", "CategoriesService", "__name", "__decorateClass", "CategoriesGrid", "CategoriesColumns", "CategoriesDialog", "CategoriesRow", "CategoriesService", "container", "buttons", "ExcelExportHelper", "__name", "__decorateClass", "CategoriesGrid"]
}
