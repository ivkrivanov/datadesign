{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/Store/CategoriesColumns.ts", "../../../Modules/Store/CategoriesType/CategoriesTypeDialog.ts", "../../../Modules/ServerTypes/Store/CategoriesForm.ts", "../../../Modules/ServerTypes/Store/CategoriesLangRow.ts", "../../../Modules/ServerTypes/Store/CategoriesLangService.ts", "../../../Modules/ServerTypes/Store/CategoriesRow.ts", "../../../Modules/ServerTypes/Store/CategoriesService.ts", "../../../Modules/ServerTypes/Store/CategoriesTypeColumns.ts", "../../../Modules/ServerTypes/Store/CategoriesTypeForm.ts", "../../../Modules/ServerTypes/Store/CategoriesTypeRow.ts", "../../../Modules/ServerTypes/Store/CategoriesTypeService.ts", "../../../Modules/Store/Counterparties/EmployeeListFormatter.ts", "../../../Modules/ServerTypes/Store/CounterpartiesColumns.ts", "../../../Modules/ServerTypes/Store/CounterpartiesForm.ts", "../../../Modules/Store/Shared/PhoneEditor.ts", "../../../Modules/Store/Notes/NotesEditor.ts", "../../../Modules/Store/Notes/NotesDialog.ts", "../../../Modules/ServerTypes/Store/CounterpartiesRow.ts", "../../../Modules/ServerTypes/Store/CounterpartiesService.ts", "../../../Modules/ServerTypes/Store/CounterpartyDetailsRow.ts", "../../../Modules/ServerTypes/Store/CounterpartyRepresentativesRow.ts", "../../../Modules/ServerTypes/Store/DocumentTypeColumns.ts", "../../../Modules/ServerTypes/Store/DocumentTypeForm.ts", "../../../Modules/ServerTypes/Store/DocumentTypeRow.ts", "../../../Modules/ServerTypes/Store/DocumentTypeService.ts", "../../../Modules/ServerTypes/Store/EmployeesRow.ts", "../../../Modules/ServerTypes/Store/Gender.ts", "../../../Modules/ServerTypes/Store/MeasuresColumns.ts", "../../../Modules/ServerTypes/Store/MeasuresForm.ts", "../../../Modules/ServerTypes/Store/MeasuresRow.ts", "../../../Modules/ServerTypes/Store/MeasuresService.ts", "../../../Modules/ServerTypes/Store/NotesRow.ts", "../../../Modules/ServerTypes/Store/NotesService.ts", "../../../Modules/ServerTypes/Store/OperationTypeColumns.ts", "../../../Modules/ServerTypes/Store/OperationTypeForm.ts", "../../../Modules/ServerTypes/Store/OperationTypeRow.ts", "../../../Modules/ServerTypes/Store/OperationTypeService.ts", "../../../Modules/ServerTypes/Store/PermissionKeys.ts", "../../../Modules/ServerTypes/Store/ShippersColumns.ts", "../../../Modules/ServerTypes/Store/ShippersForm.ts", "../../../Modules/ServerTypes/Store/ShippersRow.ts", "../../../Modules/ServerTypes/Store/ShippersService.ts", "../../../Modules/ServerTypes/Store/ShopsColumns.ts", "../../../Modules/ServerTypes/Store/ShopsForm.ts", "../../../Modules/ServerTypes/Store/ShopsRow.ts", "../../../Modules/ServerTypes/Store/ShopsService.ts", "../../../Modules/ServerTypes/Store/WaresColumns.ts", "../../../Modules/Store/Categories/CategoriesDialog.ts", "../../../Modules/ServerTypes/Store/WaresForm.ts", "../../../Modules/ServerTypes/Store/WaresLangRow.ts", "../../../Modules/ServerTypes/Store/WaresLangService.ts", "../../../Modules/ServerTypes/Store/WaresRow.ts", "../../../Modules/ServerTypes/Store/WaresService.ts"],
  "sourcesContent": ["\uFEFFexport class CategoriesColumns {\r\n    static columnsKey = 'Store.Categories';\r\n}", "\r\nimport { Decorators, EntityDialog } from \"@serenity-is/corelib\";\r\nimport { CategoriesTypeForm, CategoriesTypeRow, CategoriesTypeService } from \"../../ServerTypes/Store\";\r\n\r\n    @Decorators.registerClass('Store.Store.CategoriesTypeDialog')\r\n    export class CategoriesTypeDialog extends EntityDialog<CategoriesTypeRow, any> {\r\n        protected getFormKey() { return CategoriesTypeForm.formKey; }\r\n        protected getIdProperty() { return CategoriesTypeRow.idProperty; }\r\n        protected getLocalTextPrefix() { return CategoriesTypeRow.localTextPrefix; }\r\n        protected getNameProperty() { return CategoriesTypeRow.nameProperty; }\r\n        protected getService() { return CategoriesTypeService.baseUrl; }\r\n        protected getDeletePermission() { return CategoriesTypeRow.deletePermission; }\r\n        protected getInsertPermission() { return CategoriesTypeRow.insertPermission; }\r\n        protected getUpdatePermission() { return CategoriesTypeRow.updatePermission; }\r\n\r\n        protected form = new CategoriesTypeForm(this.idPrefix);\r\n    }\r\n", "\uFEFFimport { CategoriesTypeDialog } from \"@/Store/CategoriesType/CategoriesTypeDialog\";\nimport { LookupEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesForm {\n    CategoryTypeId: LookupEditor;\n    CategoryCode: LookupEditor;\n    CategoryName: StringEditor;\n    Description: StringEditor;\n    Picture: StringEditor;\n}\n\nexport class CategoriesForm extends PrefixedContext {\n    static formKey = 'Store.Categories';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CategoriesForm.init)  {\n            CategoriesForm.init = true;\n\n            var w0 = LookupEditor;\n            var w1 = StringEditor;\n\n            initFormType(CategoriesForm, [\n                'CategoryTypeId', w0,\n                'CategoryCode', w0,\n                'CategoryName', w1,\n                'Description', w1,\n                'Picture', w1\n            ]);\n        }\n    }\n}\n\n[CategoriesTypeDialog]; // referenced types\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesLangRow {\n    Id?: number;\n    CategoryId?: number;\n    LanguageId?: number;\n    CategoryName?: string;\n    Description?: string;\n}\n\nexport abstract class CategoriesLangRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'CategoryName';\n    static readonly localTextPrefix = 'Store.CategoriesLang';\n    static readonly deletePermission = 'Store:General';\n    static readonly insertPermission = 'Store:General';\n    static readonly readPermission = 'Store:General';\n    static readonly updatePermission = 'Store:General';\n\n    static readonly Fields = fieldsProxy<CategoriesLangRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { CategoriesLangRow } from \"./CategoriesLangRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace CategoriesLangService {\n    export const baseUrl = 'Store/CategoriesLang';\n\n    export declare function Create(request: SaveRequest<CategoriesLangRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoriesLangRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoriesLangRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CategoriesLangRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/CategoriesLang/Create\",\n        Update: \"Store/CategoriesLang/Update\",\n        Delete: \"Store/CategoriesLang/Delete\",\n        Retrieve: \"Store/CategoriesLang/Retrieve\",\n        List: \"Store/CategoriesLang/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CategoriesLangService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesRow {\n    CategoryId?: number;\n    CategoryTypeId?: number;\n    CategoryCode?: string;\n    CategoryName?: string;\n    Description?: string;\n    Picture?: number[];\n    IsActive?: number;\n    TenantId?: number;\n    Type?: number;\n    CategoryType?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class CategoriesRow {\n    static readonly idProperty = 'CategoryId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'CategoryName';\n    static readonly localTextPrefix = 'Store.Categories';\n    static readonly lookupKey = 'Store.Categories';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<CategoriesRow>('Store.Categories') }\n    static async getLookupAsync() { return getLookupAsync<CategoriesRow>('Store.Categories') }\n\n    static readonly deletePermission = 'Store:CategoriesType:Delete';\n    static readonly insertPermission = 'Store:CategoriesType:Modify';\n    static readonly readPermission = 'Store:CategoriesType:View';\n    static readonly updatePermission = 'Store:CategoriesType:Modify';\n\n    static readonly Fields = fieldsProxy<CategoriesRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListResponse } from \"@serenity-is/corelib\";\nimport { CategoriesRow } from \"./CategoriesRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { CategoriesListRequest } from \"./CategoriesListRequest\";\n\nexport namespace CategoriesService {\n    export const baseUrl = 'Store/Categories';\n\n    export declare function Create(request: SaveRequest<CategoriesRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoriesRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoriesRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: CategoriesListRequest, onSuccess?: (response: ListResponse<CategoriesRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Categories/Create\",\n        Update: \"Store/Categories/Update\",\n        Delete: \"Store/Categories/Delete\",\n        Retrieve: \"Store/Categories/Retrieve\",\n        List: \"Store/Categories/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CategoriesService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class CategoriesTypeColumns {\n    static columnsKey = 'Store.CategoriesType';\n}\n", "\uFEFFimport { IntegerEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesTypeForm {\n    Type: IntegerEditor;\n    CategoryType: StringEditor;\n}\n\nexport class CategoriesTypeForm extends PrefixedContext {\n    static formKey = 'Store.CategoriesType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CategoriesTypeForm.init)  {\n            CategoriesTypeForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = StringEditor;\n\n            initFormType(CategoriesTypeForm, [\n                'Type', w0,\n                'CategoryType', w1\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesTypeRow {\n    CategoryTypeId?: number;\n    Type?: number;\n    CategoryType?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class CategoriesTypeRow {\n    static readonly idProperty = 'CategoryTypeId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Type';\n    static readonly localTextPrefix = 'Store.CategoriesType';\n    static readonly lookupKey = 'Store.CategoriesType';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<CategoriesTypeRow>('Store.CategoriesType') }\n    static async getLookupAsync() { return getLookupAsync<CategoriesTypeRow>('Store.CategoriesType') }\n\n    static readonly deletePermission = 'Store:CategoriesType:Delete';\n    static readonly insertPermission = 'Store:CategoriesType:Modify';\n    static readonly readPermission = 'Store:CategoriesType:View';\n    static readonly updatePermission = 'Store:CategoriesType:Modify';\n\n    static readonly Fields = fieldsProxy<CategoriesTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { CategoriesTypeRow } from \"./CategoriesTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace CategoriesTypeService {\n    export const baseUrl = 'Store/CategoriesType';\n\n    export declare function Create(request: SaveRequest<CategoriesTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoriesTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoriesTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CategoriesTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/CategoriesType/Create\",\n        Update: \"Store/CategoriesType/Update\",\n        Delete: \"Store/CategoriesType/Delete\",\n        Retrieve: \"Store/CategoriesType/Retrieve\",\n        List: \"Store/CategoriesType/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CategoriesTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "import { Decorators, Formatter } from \"@serenity-is/corelib\";\r\nimport { FormatterContext } from \"@serenity-is/sleekgrid\";\r\nimport { EmployeesRow } from \"../../ServerTypes/Store\";\r\n\r\n@Decorators.registerFormatter('Store.Store.EmployeeListFormatter')\r\nexport class EmployeeListFormatter implements Formatter {\r\n    format(ctx: FormatterContext) {\r\n        var idList = ctx.value as string[];\r\n        if (!idList || !idList.length)\r\n            return \"\";\r\n\r\n        var byId = EmployeesRow.getLookup().itemById;\r\n        let z: EmployeesRow;\r\n        return idList.map(x => ((z = byId[x]) ? z.FullName : x)).join(\", \");\r\n    }\r\n}\r\n", "\uFEFFimport { EmployeeListFormatter } from \"@/Store/Counterparties/EmployeeListFormatter\";\n\nexport class CounterpartiesColumns {\n    static columnsKey = 'Store.Counterparties';\n}\n\n[EmployeeListFormatter]; // referenced types\n", "\uFEFFimport { StringEditor, LookupEditor, DateEditor, EmailEditor, BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { PhoneEditor } from \"@/Store/Shared/PhoneEditor\";\nimport { NotesEditor } from \"@/Store/Notes/NotesEditor\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CounterpartiesForm {\n    CounterpartyId: StringEditor;\n    CompanyName: StringEditor;\n    ContactName: StringEditor;\n    ContactTitle: StringEditor;\n    Representatives: LookupEditor;\n    Address: StringEditor;\n    Country: LookupEditor;\n    City: LookupEditor;\n    Region: StringEditor;\n    PostalCode: StringEditor;\n    Phone: PhoneEditor;\n    NotesList: NotesEditor;\n    LastContactDate: DateEditor;\n    LastContactedBy: LookupEditor;\n    Email: EmailEditor;\n    SendBulletin: BooleanEditor;\n}\n\nexport class CounterpartiesForm extends PrefixedContext {\n    static formKey = 'Store.Counterparties';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CounterpartiesForm.init)  {\n            CounterpartiesForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = LookupEditor;\n            var w2 = PhoneEditor;\n            var w3 = NotesEditor;\n            var w4 = DateEditor;\n            var w5 = EmailEditor;\n            var w6 = BooleanEditor;\n\n            initFormType(CounterpartiesForm, [\n                'CounterpartyId', w0,\n                'CompanyName', w0,\n                'ContactName', w0,\n                'ContactTitle', w0,\n                'Representatives', w1,\n                'Address', w0,\n                'Country', w1,\n                'City', w1,\n                'Region', w0,\n                'PostalCode', w0,\n                'Phone', w2,\n                'NotesList', w3,\n                'LastContactDate', w4,\n                'LastContactedBy', w1,\n                'Email', w5,\n                'SendBulletin', w6\n            ]);\n        }\n    }\n}\n", "\r\nimport { Decorators, StringEditor, WX } from \"@serenity-is/corelib\";\r\nimport { isEmptyOrNull, replaceAll, startsWith, localText, trimToNull } from \"@serenity-is/corelib/q\";\n\n@Decorators.registerEditor('Store.Store.PhoneEditor')\r\nexport class PhoneEditor extends StringEditor {\r\n    constructor(input: JQuery) {\r\n        super(input);\r\n\r\n        this.addValidationRule(this.uniqueName, e => {\r\n            var value = trimToNull(this.get_value());\r\n            if (value == null) {\r\n                return null;\r\n            }\r\n            return PhoneEditor.validate(value, this.multiple);\r\n        });\r\n\r\n        input.bind('change', e => {\r\n            if (!WX.hasOriginalEvent(e)) {\r\n                return;\r\n            }\r\n            this.formatValue();\r\n        });\r\n\r\n        input.bind('blur', e => {\r\n            if (this.element.hasClass('valid')) {\r\n                this.formatValue();\r\n            }\r\n        });\r\n    }\r\n\r\n    protected formatValue(): void {\r\n        this.element.val(this.getFormattedValue());\r\n    }\r\n\r\n    protected getFormattedValue(): string {\r\n        var value = this.element.val();\r\n        if (this.multiple) {\r\n            return PhoneEditor.formatMulti(value, PhoneEditor.formatPhone);\r\n        }\r\n        return PhoneEditor.formatPhone(value);\r\n    }\r\n\r\n    @Decorators.option()\r\n    public multiple: boolean;\r\n\r\n    get_value() {\r\n        return this.getFormattedValue();\r\n    }\r\n\r\n    set_value(value: string) {\r\n        this.element.val(value);\r\n    }\r\n\r\n    static validate(phone: string, isMultiple: boolean) {\r\n        var valid = (isMultiple ? PhoneEditor.isValidMulti(phone, PhoneEditor.isValidPhone) : PhoneEditor.isValidPhone(phone));\r\n        if (valid) {\r\n            return null;\r\n        }\r\n        return localText((isMultiple ? 'Validation.StorePhoneMultiple' : 'Validation.StorePhone'));\r\n    }\r\n\r\n    static isValidPhone(phone: string) {\r\n        if (isEmptyOrNull(phone)) {\r\n            return false;\r\n        }\r\n        phone = replaceAll(replaceAll(phone, ' ', ''), '-', '');\r\n        if (phone.length < 10) {\r\n            return false;\r\n        }\r\n\r\n        if (startsWith(phone, '0')) {\r\n            phone = phone.substring(1);\r\n        }\r\n\r\n        if (startsWith(phone, '(') && phone.charAt(4) === ')') {\r\n            phone = phone.substr(1, 3) + phone.substring(5);\r\n        }\r\n\r\n        if (phone.length !== 12) {\r\n            return false;\r\n        }\r\n\r\n        if (startsWith(phone, '0')) {\r\n            return false;\r\n        }\r\n\r\n        for (var i = 0; i < phone.length; i++) {\r\n            var c = phone.charAt(i);\r\n            if (c < '0' || c > '9') {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    static formatPhone(phone) {\r\n        if (!PhoneEditor.isValidPhone(phone)) {\r\n            return phone;\r\n        }\r\n        phone = replaceAll(replaceAll(replaceAll(replaceAll(phone, ' ', ''), '-', ''), '(', ''), ')', '');\r\n        if (startsWith(phone, '0')) {\r\n            phone = phone.substring(1);\r\n        }\r\n        phone = '(' + phone.substr(0, 3) + ') ' + phone.substr(3, 3) + '-' + phone.substr(6, 2) + phone.substr(8, 2) + phone.substr(10, 2);\r\n        return phone;\r\n    }\r\n\r\n    static formatMulti(phone: string, format: (s: string) => string) {\r\n        var phones = replaceAll(phone, String.fromCharCode(59), String.fromCharCode(44)).split(String.fromCharCode(44));\r\n        var result = '';\r\n        for (var x of phones) {\r\n            var s = trimToNull(x);\r\n            if (s == null) {\r\n                continue;\r\n            }\r\n            if (result.length > 0) {\r\n                result += ', ';\r\n            }\r\n            result += format(s);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static isValidMulti(phone: string, check: (s: string) => boolean) {\r\n        if (isEmptyOrNull(phone)) {\r\n            return false;\r\n        }\r\n        var phones = replaceAll(phone, String.fromCharCode(59), String.fromCharCode(44)).split(String.fromCharCode(44));\r\n        var anyValid = false;\r\n        for (var $t1 = 0; $t1 < phones.length; $t1++) {\r\n            var x = phones[$t1];\r\n            var s = trimToNull(x);\r\n            if (s == null) {\r\n                continue;\r\n            }\r\n            if (!check(s)) {\r\n                return false;\r\n            }\r\n            anyValid = true;\r\n        }\r\n        if (!anyValid) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "import { Decorators, IGetEditValue, ISetEditValue, PropertyItem, TemplatedWidget, Toolbar } from \"@serenity-is/corelib\";\r\nimport { Authorization, coalesce, confirmDialog, formatDate, formatISODateTimeUTC, insert, trimToNull } from \"@serenity-is/corelib/q\";\r\nimport { NotesRow } from \"../../ServerTypes/Store\";\r\nimport { NotesDialog } from \"./NotesDialog\";\r\n\r\n@Decorators.registerEditor('Store.Store.NotesEditor', [IGetEditValue, ISetEditValue])\r\n@Decorators.element(\"<div/>\")\r\nexport class NotesEditor extends TemplatedWidget<any>\r\n    implements IGetEditValue, ISetEditValue {\r\n\r\n    private isDirty: boolean;\r\n    private items: NotesRow[];\r\n\r\n    constructor(div: JQuery) {\r\n        super(div);\r\n\r\n        new Toolbar(this.byId('Toolbar'), {\r\n            buttons: [{\r\n                title: 'Add Note',\r\n                cssClass: 'add-button',\r\n                onClick: e => {\r\n                    e.preventDefault();\r\n                    this.addClick();\r\n                }\r\n            }]\r\n        });\r\n    }\r\n\r\n    protected getTemplate() {\r\n        return \"<div><div id='~_Toolbar'></div><ul id='~_NoteList'></ul></div>\";\r\n    }\r\n\r\n    protected updateContent() {\r\n        var noteList = this.byId('NoteList');\r\n        noteList.children().remove();\r\n        if (this.items) {\r\n            var index = 0;\r\n            for (var t1 = 0; t1 < this.items.length; t1++) {\r\n                var item = this.items[t1];\r\n                var li = $('<li/>');\r\n                $('<div/>').addClass('note-text').html(coalesce(item.Text, '')).appendTo(li);\r\n\r\n                $('<a/>').attr('href', '#').addClass('note-date')\r\n                    .text(item.InsertUserDisplayName + ' - ' +\r\n                        formatDate(item.InsertDate, 'g'))\r\n                    .data('index', index).appendTo(li).click((e) => this.editClick(e));\r\n\r\n                $('<a/>').attr('href', '#').addClass('note-delete')\r\n                    .attr('title', 'delete note').data('index', index)\r\n                    .appendTo(li).click((e) => this.deleteClick(e));\r\n\r\n                li.appendTo(noteList);\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected addClick() {\r\n        var dlg = new NotesDialog();\r\n        dlg.dialogTitle = 'Add Note';\r\n        dlg.okClick = () => {\r\n            var text = trimToNull(dlg.text);\r\n            if (text == null) {\r\n                return;\r\n            }\r\n\r\n            this.items = this.items || [];\r\n            insert(this.items, 0, {\r\n                Text: text,\r\n                InsertUserDisplayName: Authorization.userDefinition.DisplayName,\r\n                InsertDate: formatISODateTimeUTC(new Date())\r\n            });\r\n\r\n            this.updateContent();\r\n            dlg.dialogClose();\r\n            this.set_isDirty(true);\r\n            this.onChange && this.onChange();\r\n        };\r\n        dlg.dialogOpen();\r\n    }\r\n\r\n    protected editClick(e) {\r\n        e.preventDefault();\r\n        var index = $(e.target).data('index');\r\n        var old = this.items[index];\r\n        var dlg = new NotesDialog();\r\n        dlg.dialogTitle = 'Edit Note';\r\n        dlg.text = old.Text;\r\n        dlg.okClick = () => {\r\n            var text = trimToNull(dlg.text);\r\n            if (!text) {\r\n                return;\r\n            }\r\n\r\n            this.items[index].Text = text;\r\n            this.updateContent();\r\n            dlg.dialogClose();\r\n            this.set_isDirty(true);\r\n            this.onChange && this.onChange();\r\n        };\r\n        dlg.dialogOpen();\r\n    }\r\n\r\n    public deleteClick(e) {\r\n        e.preventDefault();\r\n        var index = $(e.target).data('index');\r\n        confirmDialog('Delete this note?', () => {\r\n            this.items.splice(index, 1);\r\n            this.updateContent();\r\n            this.set_isDirty(true);\r\n            this.onChange && this.onChange();\r\n        });\r\n    }\r\n\r\n    public get value() {\r\n        return this.items;\r\n    }\r\n\r\n    public set value(value: NotesRow[]) {\r\n        this.items = value || [];\r\n        this.set_isDirty(false);\r\n        this.updateContent();\r\n    }\r\n\r\n    public getEditValue(prop: PropertyItem, target) {\r\n        target[prop.name] = this.value;\r\n    }\r\n\r\n    public setEditValue(source, prop: PropertyItem) {\r\n        this.value = source[prop.name] || [];\r\n    }\r\n\r\n    public get_isDirty(): boolean {\r\n        return this.isDirty;\r\n    }\r\n\r\n    public set_isDirty(value): void {\r\n        this.isDirty = value;\r\n    }\r\n\r\n    public onChange: () => void;\r\n}\r\n", "import { Decorators, HtmlContentEditor, HtmlNoteContentEditor, TemplatedDialog } from \"@serenity-is/corelib\";\r\nimport { localText } from \"@serenity-is/corelib/q\";\r\n\r\n@Decorators.registerClass('Store.Store.NotesDialog')\r\nexport class NotesDialog extends TemplatedDialog<any> {\r\n\r\n    private textEditor: HtmlContentEditor;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.textEditor = new HtmlNoteContentEditor(this.byId('Text'));\r\n    }\r\n\r\n    protected getTemplate() {\r\n        return (\r\n            \"<form id='~_Form' class='s-Form'>\" +\r\n            \"<textarea id='~_Text' class='required'></textarea>\" +\r\n            \"</form>\");\r\n    }\r\n\r\n    protected getDialogButtons() {\r\n        return [\r\n            {\r\n                text: localText('Dialogs.OkButton'),\r\n                click: () => {\r\n                    if (!this.validateForm()) {\r\n                        return;\r\n                    }\r\n\r\n                    this.okClick && this.okClick();\r\n                }\r\n            },\r\n            {\r\n                text: localText('Dialogs.CancelButton'),\r\n                click: () => this.dialogClose()\r\n            }\r\n        ];\r\n    }\r\n\r\n    get text(): string {\r\n        return this.textEditor.value;\r\n    }\r\n\r\n    set text(value: string) {\r\n        this.textEditor.value = value;\r\n    }\r\n\r\n    public okClick: () => void;\r\n}\r\n", "\uFEFFimport { NotesRow } from \"./NotesRow\";\nimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CounterpartiesRow {\n    Id?: number;\n    CounterpartyId?: string;\n    CompanyName?: string;\n    ContactName?: string;\n    ContactTitle?: string;\n    Address?: string;\n    City?: string;\n    Region?: string;\n    PostalCode?: string;\n    Country?: string;\n    Phone?: string;\n    IsActive?: number;\n    TenantId?: number;\n    NotesList?: NotesRow[];\n    Representatives?: number[];\n    LastContactDate?: string;\n    LastContactedBy?: number;\n    Email?: string;\n    SendBulletin?: boolean;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class CounterpartiesRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'CounterpartyId';\n    static readonly localTextPrefix = 'Store.Counterparties';\n    static readonly lookupKey = 'Store.Counterparties';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<CounterpartiesRow>('Store.Counterparties') }\n    static async getLookupAsync() { return getLookupAsync<CounterpartiesRow>('Store.Counterparties') }\n\n    static readonly deletePermission = 'Store:Counterparties:Delete';\n    static readonly insertPermission = 'Store:Counterparties:Modify';\n    static readonly readPermission = 'Store:Counterparties:View';\n    static readonly updatePermission = 'Store:Counterparties:Modify';\n\n    static readonly Fields = fieldsProxy<CounterpartiesRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { CounterpartiesRow } from \"./CounterpartiesRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace CounterpartiesService {\n    export const baseUrl = 'Store/Counterparties';\n\n    export declare function Create(request: SaveRequest<CounterpartiesRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CounterpartiesRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CounterpartiesRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CounterpartiesRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Counterparties/Create\",\n        Update: \"Store/Counterparties/Update\",\n        Delete: \"Store/Counterparties/Delete\",\n        Retrieve: \"Store/Counterparties/Retrieve\",\n        List: \"Store/Counterparties/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CounterpartiesService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CounterpartyDetailsRow {\n    Id?: number;\n    LastContactDate?: string;\n    LastContactedBy?: number;\n    Email?: string;\n    SendBulletin?: boolean;\n    LastContactedByLastName?: string;\n    LastContactedByFirstName?: string;\n    LastContactedByTitle?: string;\n    LastContactedByTitleOfCourtesy?: string;\n    LastContactedByBirthDate?: string;\n    LastContactedByHireDate?: string;\n    LastContactedByAddress?: string;\n    LastContactedByCity?: string;\n    LastContactedByRegion?: string;\n    LastContactedByPostalCode?: string;\n    LastContactedByCountry?: string;\n    LastContactedByHomePhone?: string;\n    LastContactedByExtension?: string;\n    LastContactedByPhoto?: number[];\n    LastContactedByNotes?: string;\n    LastContactedByReportsTo?: number;\n    LastContactedByPhotoPath?: string;\n}\n\nexport abstract class CounterpartyDetailsRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'Email';\n    static readonly localTextPrefix = 'Store.CounterpartyDetails';\n    static readonly deletePermission = 'Store:Counterparties:Delete';\n    static readonly insertPermission = 'Store:Counterparties:Modify';\n    static readonly readPermission = 'Store:Counterparties:View';\n    static readonly updatePermission = 'Store:Counterparties:Modify';\n\n    static readonly Fields = fieldsProxy<CounterpartyDetailsRow>();\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CounterpartyRepresentativesRow {\n    RepresentativeId?: number;\n    CounterpartyId?: number;\n    EmployeeId?: number;\n}\n\nexport abstract class CounterpartyRepresentativesRow {\n    static readonly idProperty = 'RepresentativeId';\n    static readonly localTextPrefix = 'Store.CounterpartyRepresentatives';\n    static readonly deletePermission = 'Store:Counterparties:Delete';\n    static readonly insertPermission = 'Store:Counterparties:Modify';\n    static readonly readPermission = 'Store:Counterparties:View';\n    static readonly updatePermission = 'Store:Counterparties:Modify';\n\n    static readonly Fields = fieldsProxy<CounterpartyRepresentativesRow>();\n}\n", "\uFEFFexport class DocumentTypeColumns {\r\n    static columnsKey = 'Store.DocumentType';\r\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface DocumentTypeForm {\n    DocumentName: StringEditor;\n}\n\nexport class DocumentTypeForm extends PrefixedContext {\n    static formKey = 'Store.DocumentType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!DocumentTypeForm.init)  {\n            DocumentTypeForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(DocumentTypeForm, [\n                'DocumentName', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface DocumentTypeRow {\n    DocumentTypeId?: number;\n    DocumentName?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class DocumentTypeRow {\n    static readonly idProperty = 'DocumentTypeId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'DocumentName';\n    static readonly localTextPrefix = 'Store.DocumentType';\n    static readonly lookupKey = 'Store.DocumentType';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<DocumentTypeRow>('Store.DocumentType') }\n    static async getLookupAsync() { return getLookupAsync<DocumentTypeRow>('Store.DocumentType') }\n\n    static readonly deletePermission = 'Store:DocumentType:Delete';\n    static readonly insertPermission = 'Store:DocumentType:Modify';\n    static readonly readPermission = 'Store:DocumentType:View';\n    static readonly updatePermission = 'Store:DocumentType:Modify';\n\n    static readonly Fields = fieldsProxy<DocumentTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { DocumentTypeRow } from \"./DocumentTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace DocumentTypeService {\n    export const baseUrl = 'Store/DocumentType';\n\n    export declare function Create(request: SaveRequest<DocumentTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<DocumentTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<DocumentTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<DocumentTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/DocumentType/Create\",\n        Update: \"Store/DocumentType/Update\",\n        Delete: \"Store/DocumentType/Delete\",\n        Retrieve: \"Store/DocumentType/Retrieve\",\n        List: \"Store/DocumentType/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>DocumentTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { Gender } from \"./Gender\";\nimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeesRow {\n    EmployeeId?: number;\n    LastName?: string;\n    FirstName?: string;\n    FullName?: string;\n    Title?: string;\n    TitleOfCourtesy?: string;\n    BirthDate?: string;\n    HireDate?: string;\n    Address?: string;\n    City?: string;\n    Region?: string;\n    PostalCode?: string;\n    Country?: string;\n    HomePhone?: string;\n    Extension?: string;\n    Photo?: number[];\n    Notes?: string;\n    ReportsTo?: number;\n    PhotoPath?: string;\n    IsActive?: number;\n    TenantId?: number;\n    ReportsToFullName?: string;\n    ReportsToLastName?: string;\n    ReportsToFirstName?: string;\n    ReportsToTitle?: string;\n    ReportsToTitleOfCourtesy?: string;\n    ReportsToBirthDate?: string;\n    ReportsToHireDate?: string;\n    ReportsToAddress?: string;\n    ReportsToCity?: string;\n    ReportsToRegion?: string;\n    ReportsToPostalCode?: string;\n    ReportsToCountry?: string;\n    ReportsToHomePhone?: string;\n    ReportsToExtension?: string;\n    ReportsToPhoto?: number[];\n    ReportsToNotes?: string;\n    ReportsToReportsTo?: number;\n    ReportsToPhotoPath?: string;\n    Gender?: Gender;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class EmployeesRow {\n    static readonly idProperty = 'EmployeeId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'LastName';\n    static readonly localTextPrefix = 'Store.Employees';\n    static readonly lookupKey = 'Store.Employees';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<EmployeesRow>('Store.Employees') }\n    static async getLookupAsync() { return getLookupAsync<EmployeesRow>('Store.Employees') }\n\n    static readonly deletePermission = 'Store:General';\n    static readonly insertPermission = 'Store:General';\n    static readonly readPermission = 'Store:General';\n    static readonly updatePermission = 'Store:General';\n\n    static readonly Fields = fieldsProxy<EmployeesRow>();\n}\n", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum Gender {\n    Male = 1,\n    Female = 2\n}\nDecorators.registerEnumType(Gender, 'Store.Store.Gender', 'Store.Store.Entities.Gender');\n", "\uFEFFexport class MeasuresColumns {\r\n    static columnsKey = 'Store.Measures';\r\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface MeasuresForm {\n    MeasureName: StringEditor;\n}\n\nexport class MeasuresForm extends PrefixedContext {\n    static formKey = 'Store.Measures';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MeasuresForm.init)  {\n            MeasuresForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(MeasuresForm, [\n                'MeasureName', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface MeasuresRow {\n    MeasureId?: number;\n    MeasureName?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class MeasuresRow {\n    static readonly idProperty = 'MeasureId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'MeasureName';\n    static readonly localTextPrefix = 'Store.Measures';\n    static readonly lookupKey = 'Store.Measures';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<MeasuresRow>('Store.Measures') }\n    static async getLookupAsync() { return getLookupAsync<MeasuresRow>('Store.Measures') }\n\n    static readonly deletePermission = 'Store:Measures:Delete';\n    static readonly insertPermission = 'Store:Measures:Modify';\n    static readonly readPermission = 'Store:Measures:View';\n    static readonly updatePermission = 'Store:Measures:Modify';\n\n    static readonly Fields = fieldsProxy<MeasuresRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { MeasuresRow } from \"./MeasuresRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace MeasuresService {\n    export const baseUrl = 'Store/Measures';\n\n    export declare function Create(request: SaveRequest<MeasuresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<MeasuresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MeasuresRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MeasuresRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Measures/Create\",\n        Update: \"Store/Measures/Update\",\n        Delete: \"Store/Measures/Delete\",\n        Retrieve: \"Store/Measures/Retrieve\",\n        List: \"Store/Measures/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MeasuresService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface NotesRow {\n    NoteId?: number;\n    EntityType?: string;\n    EntityId?: number;\n    Text?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    InsertUserDisplayName?: string;\n}\n\nexport abstract class NotesRow {\n    static readonly idProperty = 'NoteId';\n    static readonly nameProperty = 'EntityType';\n    static readonly localTextPrefix = 'Store.Notes';\n    static readonly deletePermission = 'Store:General';\n    static readonly insertPermission = 'Store:General';\n    static readonly readPermission = 'Store:General';\n    static readonly updatePermission = 'Store:General';\n\n    static readonly Fields = fieldsProxy<NotesRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { NotesRow } from \"./NotesRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace NotesService {\n    export const baseUrl = 'Store/Notes';\n\n    export declare function Create(request: SaveRequest<NotesRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<NotesRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<NotesRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<NotesRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Notes/Create\",\n        Update: \"Store/Notes/Update\",\n        Delete: \"Store/Notes/Delete\",\n        Retrieve: \"Store/Notes/Retrieve\",\n        List: \"Store/Notes/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>NotesService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class OperationTypeColumns {\r\n    static columnsKey = 'Store.OperationType';\r\n}", "\uFEFFimport { IntegerEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface OperationTypeForm {\n    OpCode: IntegerEditor;\n    Operation: StringEditor;\n}\n\nexport class OperationTypeForm extends PrefixedContext {\n    static formKey = 'Store.OperationType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!OperationTypeForm.init)  {\n            OperationTypeForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = StringEditor;\n\n            initFormType(OperationTypeForm, [\n                'OpCode', w0,\n                'Operation', w1\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface OperationTypeRow {\n    OperationTypeId?: number;\n    OpCode?: number;\n    Operation?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class OperationTypeRow {\n    static readonly idProperty = 'OperationTypeId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Operation';\n    static readonly localTextPrefix = 'Store.OperationType';\n    static readonly lookupKey = 'Store.OperationType';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<OperationTypeRow>('Store.OperationType') }\n    static async getLookupAsync() { return getLookupAsync<OperationTypeRow>('Store.OperationType') }\n\n    static readonly deletePermission = 'Store:OperationType:Delete';\n    static readonly insertPermission = 'Store:OperationType:Modify';\n    static readonly readPermission = 'Store:OperationType:View';\n    static readonly updatePermission = 'Store:OperationType:Modify';\n\n    static readonly Fields = fieldsProxy<OperationTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { OperationTypeRow } from \"./OperationTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace OperationTypeService {\n    export const baseUrl = 'Store/OperationType';\n\n    export declare function Create(request: SaveRequest<OperationTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<OperationTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<OperationTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<OperationTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/OperationType/Create\",\n        Update: \"Store/OperationType/Update\",\n        Delete: \"Store/OperationType/Delete\",\n        Retrieve: \"Store/OperationType/Retrieve\",\n        List: \"Store/OperationType/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>OperationTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport namespace PermissionKeys {\n    export const General = \"Store:General\";\n\n    export namespace Categories {\n        export const Delete = \"Store:Categories:Delete\";\n        export const Modify = \"Store:Categories:Modify\";\n        export const View = \"Store:Categories:View\";\n    }\n\n    export namespace CategoriesType {\n        export const Delete = \"Store:CategoriesType:Delete\";\n        export const Modify = \"Store:CategoriesType:Modify\";\n        export const View = \"Store:CategoriesType:View\";\n    }\n\n    export namespace Shops {\n        export const Delete = \"Store:Shops:Delete\";\n        export const Modify = \"Store:Shops:Modify\";\n        export const View = \"Store:Shops:View\";\n    }\n\n    export namespace DocumentType {\n        export const Delete = \"Store:DocumentType:Delete\";\n        export const Modify = \"Store:DocumentType:Modify\";\n        export const View = \"Store:DocumentType:View\";\n    }\n\n    export namespace Measures {\n        export const Delete = \"Store:Measures:Delete\";\n        export const Modify = \"Store:Measures:Modify\";\n        export const View = \"Store:Measures:View\";\n    }\n\n    export namespace OperationType {\n        export const Delete = \"Store:OperationType:Delete\";\n        export const Modify = \"Store:OperationType:Modify\";\n        export const View = \"Store:OperationType:View\";\n    }\n\n    export namespace Counterparties {\n        export const Delete = \"Store:Counterparties:Delete\";\n        export const Modify = \"Store:Counterparties:Modify\";\n        export const View = \"Store:Counterparties:View\";\n    }\n\n    export namespace Wares {\n        export const Delete = \"Store:Wares:Delete\";\n        export const Modify = \"Store:Wares:Modify\";\n        export const View = \"Store:Wares:View\";\n    }\n\n    export namespace Product {\n        export const Delete = \"Store:Product:Delete\";\n        export const Modify = \"Store:Product:Modify\";\n        export const View = \"Store:Product:View\";\n    }\n}\n", "\uFEFFexport class ShippersColumns {\r\n    static columnsKey = 'Store.Shippers';\r\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface ShippersForm {\n    CompanyName: StringEditor;\n    Phone: StringEditor;\n}\n\nexport class ShippersForm extends PrefixedContext {\n    static formKey = 'Store.Shippers';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ShippersForm.init)  {\n            ShippersForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(ShippersForm, [\n                'CompanyName', w0,\n                'Phone', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface ShippersRow {\n    ShipperId?: number;\n    CompanyName?: string;\n    Phone?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class ShippersRow {\n    static readonly idProperty = 'ShipperId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'CompanyName';\n    static readonly localTextPrefix = 'Store.Shippers';\n    static readonly lookupKey = 'Store.Shipper';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<ShippersRow>('Store.Shipper') }\n    static async getLookupAsync() { return getLookupAsync<ShippersRow>('Store.Shipper') }\n\n    static readonly deletePermission = 'Store:General';\n    static readonly insertPermission = 'Store:General';\n    static readonly readPermission = 'Store:General';\n    static readonly updatePermission = 'Store:General';\n\n    static readonly Fields = fieldsProxy<ShippersRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { ShippersRow } from \"./ShippersRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace ShippersService {\n    export const baseUrl = 'Store/Shippers';\n\n    export declare function Create(request: SaveRequest<ShippersRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ShippersRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ShippersRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ShippersRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Shippers/Create\",\n        Update: \"Store/Shippers/Update\",\n        Delete: \"Store/Shippers/Delete\",\n        Retrieve: \"Store/Shippers/Retrieve\",\n        List: \"Store/Shippers/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ShippersService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class ShopsColumns {\r\n    static columnsKey = 'Store.Shops';\r\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface ShopsForm {\n    ShopId: StringEditor;\n    ShopName: StringEditor;\n    ContactName: StringEditor;\n    ContactTitle: StringEditor;\n    Address: StringEditor;\n    City: StringEditor;\n    Region: StringEditor;\n    PostalCode: StringEditor;\n    Country: StringEditor;\n    Phone: StringEditor;\n}\n\nexport class ShopsForm extends PrefixedContext {\n    static formKey = 'Store.Shops';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ShopsForm.init)  {\n            ShopsForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(ShopsForm, [\n                'ShopId', w0,\n                'ShopName', w0,\n                'ContactName', w0,\n                'ContactTitle', w0,\n                'Address', w0,\n                'City', w0,\n                'Region', w0,\n                'PostalCode', w0,\n                'Country', w0,\n                'Phone', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface ShopsRow {\n    Id?: number;\n    ShopId?: string;\n    ShopName?: string;\n    ContactName?: string;\n    ContactTitle?: string;\n    Address?: string;\n    City?: string;\n    Region?: string;\n    PostalCode?: string;\n    Country?: string;\n    Phone?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class ShopsRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'ShopId';\n    static readonly localTextPrefix = 'Store.Shops';\n    static readonly lookupKey = 'Store.Shops';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<ShopsRow>('Store.Shops') }\n    static async getLookupAsync() { return getLookupAsync<ShopsRow>('Store.Shops') }\n\n    static readonly deletePermission = 'Store:Shops:Delete';\n    static readonly insertPermission = 'Store:Shops:Modify';\n    static readonly readPermission = 'Store:Shops:View';\n    static readonly updatePermission = 'Store:Shops:Modify';\n\n    static readonly Fields = fieldsProxy<ShopsRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { ShopsRow } from \"./ShopsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace ShopsService {\n    export const baseUrl = 'Store/Shops';\n\n    export declare function Create(request: SaveRequest<ShopsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ShopsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ShopsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ShopsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Shops/Create\",\n        Update: \"Store/Shops/Update\",\n        Delete: \"Store/Shops/Delete\",\n        Retrieve: \"Store/Shops/Retrieve\",\n        List: \"Store/Shops/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ShopsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class WaresColumns {\r\n    static columnsKey = 'Store.Wares';\r\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { CategoriesForm, CategoriesRow, CategoriesService } from '../../ServerTypes/Store';\r\n\r\n@Decorators.registerClass('Store.Store.CategoriesDialog')\r\n export class CategoriesDialog extends EntityDialog<CategoriesRow, any> {\r\n    protected getFormKey() { return CategoriesForm.formKey; }\r\n    protected getIdProperty() { return CategoriesRow.idProperty; }\r\n    protected getLocalTextPrefix() { return CategoriesRow.localTextPrefix; }\r\n    protected getNameProperty() { return CategoriesRow.nameProperty; }\r\n    protected getService() { return CategoriesService.baseUrl; }\r\n    protected getDeletePermission() { return CategoriesRow.deletePermission; }\r\n    protected getInsertPermission() { return CategoriesRow.insertPermission; }\r\n    protected getUpdatePermission() { return CategoriesRow.updatePermission; }\r\n\r\n    protected form = new CategoriesForm(this.idPrefix);\r\n}", "\uFEFFimport { CategoriesDialog } from \"@/Store/Categories/CategoriesDialog\";\nimport { LookupEditor, StringEditor, IntegerEditor, ImageUploadEditor, BooleanEditor, DecimalEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface WaresForm {\n    CategoryId: LookupEditor;\n    WaresCode: StringEditor;\n    WaresBarcode: StringEditor;\n    WaresLabel: StringEditor;\n    WaresName: StringEditor;\n    MeasureId: IntegerEditor;\n    WaresImage: ImageUploadEditor;\n    Discontinued: BooleanEditor;\n    CounterpartyId: StringEditor;\n    QuantityPerUnit: DecimalEditor;\n    UnitPrice: DecimalEditor;\n    AccountId: IntegerEditor;\n}\n\nexport class WaresForm extends PrefixedContext {\n    static formKey = 'Store.Wares';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!WaresForm.init)  {\n            WaresForm.init = true;\n\n            var w0 = LookupEditor;\n            var w1 = StringEditor;\n            var w2 = IntegerEditor;\n            var w3 = ImageUploadEditor;\n            var w4 = BooleanEditor;\n            var w5 = DecimalEditor;\n\n            initFormType(WaresForm, [\n                'CategoryId', w0,\n                'WaresCode', w1,\n                'WaresBarcode', w1,\n                'WaresLabel', w1,\n                'WaresName', w1,\n                'MeasureId', w2,\n                'WaresImage', w3,\n                'Discontinued', w4,\n                'CounterpartyId', w1,\n                'QuantityPerUnit', w5,\n                'UnitPrice', w5,\n                'AccountId', w2\n            ]);\n        }\n    }\n}\n\n[CategoriesDialog]; // referenced types\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface WaresLangRow {\n    Id?: number;\n    WaresId?: number;\n    LanguageId?: number;\n    WaresName?: string;\n    Description?: string;\n}\n\nexport abstract class WaresLangRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'WaresName';\n    static readonly localTextPrefix = 'Store.WaresLang';\n    static readonly deletePermission = 'Store:General';\n    static readonly insertPermission = 'Store:General';\n    static readonly readPermission = 'Store:General';\n    static readonly updatePermission = 'Store:General';\n\n    static readonly Fields = fieldsProxy<WaresLangRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { WaresLangRow } from \"./WaresLangRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace WaresLangService {\n    export const baseUrl = 'Store/WaresLang';\n\n    export declare function Create(request: SaveRequest<WaresLangRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<WaresLangRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<WaresLangRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<WaresLangRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/WaresLang/Create\",\n        Update: \"Store/WaresLang/Update\",\n        Delete: \"Store/WaresLang/Delete\",\n        Retrieve: \"Store/WaresLang/Retrieve\",\n        List: \"Store/WaresLang/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>WaresLangService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface WaresRow {\n    WaresId?: number;\n    WaresCode?: string;\n    WaresBarcode?: string;\n    WaresLabel?: string;\n    WaresName?: string;\n    WaresImage?: string;\n    CounterpartyId?: string;\n    CategoryId?: number;\n    MeasureId?: number;\n    QuantityPerUnit?: number;\n    UnitPrice?: number;\n    UnitsInStock?: number;\n    UnitsOnOrder?: number;\n    Discontinued?: boolean;\n    AccountId?: number;\n    IsActive?: number;\n    TenantId?: number;\n    CounterpartyCompanyName?: string;\n    CounterpartyContactName?: string;\n    CounterpartyContactTitle?: string;\n    CounterpartyAddress?: string;\n    CounterpartyCity?: string;\n    CounterpartyRegion?: string;\n    CounterpartyPostalCode?: string;\n    CounterpartyCountry?: string;\n    CounterpartyPhone?: string;\n    Type?: number;\n    CategoryCategoryName?: string;\n    CategoryDescription?: string;\n    MeasureName?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class WaresRow {\n    static readonly idProperty = 'WaresId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'WaresName';\n    static readonly localTextPrefix = 'Store.Wares';\n    static readonly lookupKey = 'Store.Wares';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<WaresRow>('Store.Wares') }\n    static async getLookupAsync() { return getLookupAsync<WaresRow>('Store.Wares') }\n\n    static readonly deletePermission = 'Store:Wares:Delete';\n    static readonly insertPermission = 'Store:Wares:Modify';\n    static readonly readPermission = 'Store:Wares:View';\n    static readonly updatePermission = 'Store:Wares:Modify';\n\n    static readonly Fields = fieldsProxy<WaresRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { WaresRow } from \"./WaresRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace WaresService {\n    export const baseUrl = 'Store/Wares';\n\n    export declare function Create(request: SaveRequest<WaresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<WaresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<WaresRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<WaresRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Wares/Create\",\n        Update: \"Store/Wares/Update\",\n        Delete: \"Store/Wares/Delete\",\n        Retrieve: \"Store/Wares/Retrieve\",\n        List: \"Store/Wares/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>WaresService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n"],
  "mappings": "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",
  "names": ["CategoriesColumns", "__name", "import_corelib", "import_corelib", "import_q", "_CategoriesForm", "prefix", "w0", "w1", "CategoriesForm", "__name", "import_q", "CategoriesLangRow", "__name", "import_q", "CategoriesLangService", "x", "r", "s", "o", "import_q", "CategoriesRow", "__async", "__name", "import_q", "CategoriesService", "x", "r", "s", "o", "CategoriesTypeColumns", "__name", "import_corelib", "import_q", "_CategoriesTypeForm", "prefix", "w0", "w1", "CategoriesTypeForm", "__name", "import_q", "CategoriesTypeRow", "__async", "__name", "import_q", "CategoriesTypeService", "x", "r", "s", "o", "import_corelib", "EmployeeListFormatter", "ctx", "idList", "byId", "EmployeesRow", "z", "x", "__name", "__decorateClass", "CounterpartiesColumns", "__name", "import_corelib", "import_corelib", "import_q", "PhoneEditor", "input", "e", "value", "phone", "isMultiple", "valid", "i", "c", "format", "phones", "result", "x", "s", "check", "anyValid", "$t1", "__name", "__decorateClass", "import_corelib", "import_q", "import_corelib", "import_q", "NotesDialog", "value", "__name", "__decorateClass", "NotesEditor", "div", "e", "noteList", "index", "t1", "item", "li", "dlg", "NotesDialog", "text", "old", "value", "prop", "target", "source", "__name", "__decorateClass", "import_q", "_CounterpartiesForm", "prefix", "w0", "w1", "w2", "PhoneEditor", "w3", "NotesEditor", "w4", "w5", "w6", "CounterpartiesForm", "__name", "import_q", "CounterpartiesRow", "__async", "__name", "import_q", "CounterpartiesService", "x", "r", "s", "o", "import_q", "CounterpartyDetailsRow", "__name", "import_q", "CounterpartyRepresentativesRow", "__name", "DocumentTypeColumns", "__name", "import_corelib", "import_q", "_DocumentTypeForm", "prefix", "w0", "DocumentTypeForm", "__name", "import_q", "DocumentTypeRow", "__async", "__name", "import_q", "DocumentTypeService", "x", "r", "s", "o", "import_q", "EmployeesRow", "__async", "__name", "import_corelib", "Gender", "MeasuresColumns", "__name", "import_corelib", "import_q", "_MeasuresForm", "prefix", "w0", "MeasuresForm", "__name", "import_q", "MeasuresRow", "__async", "__name", "import_q", "MeasuresService", "x", "r", "s", "o", "import_q", "NotesRow", "__name", "import_q", "NotesService", "x", "r", "s", "o", "OperationTypeColumns", "__name", "import_corelib", "import_q", "_OperationTypeForm", "prefix", "w0", "w1", "OperationTypeForm", "__name", "import_q", "OperationTypeRow", "__async", "__name", "import_q", "OperationTypeService", "x", "r", "s", "o", "PermissionKeys", "Categories", "CategoriesType", "Shops", "DocumentType", "Measures", "OperationType", "Counterparties", "Wares", "Product", "ShippersColumns", "__name", "import_corelib", "import_q", "_ShippersForm", "prefix", "w0", "ShippersForm", "__name", "import_q", "ShippersRow", "__async", "__name", "import_q", "ShippersService", "x", "r", "s", "o", "ShopsColumns", "__name", "import_corelib", "import_q", "_ShopsForm", "prefix", "w0", "ShopsForm", "__name", "import_q", "ShopsRow", "__async", "__name", "import_q", "ShopsService", "x", "r", "s", "o", "WaresColumns", "__name", "import_corelib", "CategoriesDialog", "CategoriesForm", "CategoriesRow", "CategoriesService", "__name", "__decorateClass", "import_corelib", "import_q", "_WaresForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "WaresForm", "__name", "import_q", "WaresLangRow", "__name", "import_q", "WaresLangService", "x", "r", "s", "o", "import_q", "WaresRow", "__async", "__name", "import_q", "WaresService", "x", "r", "s", "o", "CategoriesTypeDialog", "CategoriesTypeForm", "CategoriesTypeRow", "CategoriesTypeService", "__name", "__decorateClass"]
}
