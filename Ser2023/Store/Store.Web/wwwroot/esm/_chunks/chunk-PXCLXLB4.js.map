{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/Administration/LanguageColumns.ts", "../../../Modules/ServerTypes/Administration/LanguageRow.ts", "../../../Modules/ServerTypes/Administration/LanguageService.ts", "../../../Modules/ServerTypes/Administration/RoleColumns.ts", "../../../Modules/ServerTypes/Administration/RoleRow.ts", "../../../Modules/ServerTypes/Administration/RoleService.ts", "../../../Modules/ServerTypes/Administration/TenantColumns.ts", "../../../Modules/ServerTypes/Administration/TenantRow.ts", "../../../Modules/ServerTypes/Administration/TenantService.ts", "../../../Modules/ServerTypes/Administration/TranslationService.ts", "../../../Modules/ServerTypes/Administration/UserColumns.ts", "../../../Modules/ServerTypes/Administration/UserRow.ts", "../../../Modules/ServerTypes/Administration/UserService.ts", "../../../Modules/ServerTypes/Administration/LanguageForm.ts", "../../../Modules/ServerTypes/Administration/PermissionKeys.ts", "../../../Modules/ServerTypes/Administration/RoleForm.ts", "../../../Modules/ServerTypes/Administration/RolePermissionRow.ts", "../../../Modules/ServerTypes/Administration/RolePermissionService.ts", "../../../Modules/ServerTypes/Administration/TenantForm.ts", "../../../Modules/ServerTypes/Administration/UserForm.ts", "../../../Modules/ServerTypes/Administration/UserPermissionRow.ts", "../../../Modules/ServerTypes/Administration/UserPermissionService.ts", "../../../Modules/ServerTypes/Administration/UserRoleRow.ts", "../../../Modules/ServerTypes/Administration/UserRoleService.ts"],
  "sourcesContent": ["\uFEFFexport class LanguageColumns {\r\n    static columnsKey = 'Administration.Language';\r\n}\r\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface LanguageRow {\r\n    Id?: number;\r\n    LanguageId?: string;\r\n    LanguageName?: string;\r\n}\r\n\r\nexport abstract class LanguageRow {\r\n    static readonly idProperty = 'Id';\r\n    static readonly nameProperty = 'LanguageName';\r\n    static readonly localTextPrefix = 'Administration.Language';\r\n    static readonly lookupKey = 'Administration.Language';\r\n\r\n    /** @deprecated use getLookupAsync instead */\r\n    static getLookup() { return getLookup<LanguageRow>('Administration.Language') }\r\n    static async getLookupAsync() { return getLookupAsync<LanguageRow>('Administration.Language') }\r\n\r\n    static readonly deletePermission = 'Administration:Translation';\r\n    static readonly insertPermission = 'Administration:Translation';\r\n    static readonly readPermission = 'Administration:Translation';\r\n    static readonly updatePermission = 'Administration:Translation';\r\n\r\n    static readonly Fields = fieldsProxy<LanguageRow>();\r\n}\r\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\r\nimport { LanguageRow } from \"./LanguageRow\";\r\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\r\n\r\nexport namespace LanguageService {\r\n    export const baseUrl = 'Administration/Language';\r\n\r\n    export declare function Create(request: SaveRequest<LanguageRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Update(request: SaveRequest<LanguageRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<LanguageRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<LanguageRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Create: \"Administration/Language/Create\",\r\n        Update: \"Administration/Language/Update\",\r\n        Delete: \"Administration/Language/Delete\",\r\n        Retrieve: \"Administration/Language/Retrieve\",\r\n        List: \"Administration/Language/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>LanguageService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}\r\n", "\uFEFFexport class RoleColumns {\r\n    static columnsKey = 'Administration.Role';\r\n}\r\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface RoleRow {\r\n    RoleId?: number;\r\n    RoleName?: string;\r\n    TenantId?: number;\r\n}\r\n\r\nexport abstract class RoleRow {\r\n    static readonly idProperty = 'RoleId';\r\n    static readonly nameProperty = 'RoleName';\r\n    static readonly localTextPrefix = 'Administration.Role';\r\n    static readonly lookupKey = 'Administration.Role';\r\n\r\n    /** @deprecated use getLookupAsync instead */\r\n    static getLookup() { return getLookup<RoleRow>('Administration.Role') }\r\n    static async getLookupAsync() { return getLookupAsync<RoleRow>('Administration.Role') }\r\n\r\n    static readonly deletePermission = 'Administration:Security';\r\n    static readonly insertPermission = 'Administration:Security';\r\n    static readonly readPermission = 'Administration:Security';\r\n    static readonly updatePermission = 'Administration:Security';\r\n\r\n    static readonly Fields = fieldsProxy<RoleRow>();\r\n}\r\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\r\nimport { RoleRow } from \"./RoleRow\";\r\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\r\n\r\nexport namespace RoleService {\r\n    export const baseUrl = 'Administration/Role';\r\n\r\n    export declare function Create(request: SaveRequest<RoleRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Update(request: SaveRequest<RoleRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<RoleRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<RoleRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Create: \"Administration/Role/Create\",\r\n        Update: \"Administration/Role/Update\",\r\n        Delete: \"Administration/Role/Delete\",\r\n        Retrieve: \"Administration/Role/Retrieve\",\r\n        List: \"Administration/Role/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>RoleService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}\r\n", "\uFEFFexport class TenantColumns {\r\n    static columnsKey = 'Administration.Tenant';\r\n}\r\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface TenantRow {\r\n    TenantId?: number;\r\n    TenantName?: string;\r\n}\r\n\r\nexport abstract class TenantRow {\r\n    static readonly idProperty = 'TenantId';\r\n    static readonly nameProperty = 'TenantName';\r\n    static readonly localTextPrefix = 'Administration.Tenant';\r\n    static readonly lookupKey = 'Administration.Tenant';\r\n\r\n    /** @deprecated use getLookupAsync instead */\r\n    static getLookup() { return getLookup<TenantRow>('Administration.Tenant') }\r\n    static async getLookupAsync() { return getLookupAsync<TenantRow>('Administration.Tenant') }\r\n\r\n    static readonly deletePermission = 'Administration:Tenants';\r\n    static readonly insertPermission = 'Administration:Tenants';\r\n    static readonly readPermission = 'Administration:Tenants';\r\n    static readonly updatePermission = 'Administration:Tenants';\r\n\r\n    static readonly Fields = fieldsProxy<TenantRow>();\r\n}\r\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\r\nimport { TenantRow } from \"./TenantRow\";\r\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\r\n\r\nexport namespace TenantService {\r\n    export const baseUrl = 'Administration/Tenant';\r\n\r\n    export declare function Create(request: SaveRequest<TenantRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Update(request: SaveRequest<TenantRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<TenantRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<TenantRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Create: \"Administration/Tenant/Create\",\r\n        Update: \"Administration/Tenant/Update\",\r\n        Delete: \"Administration/Tenant/Delete\",\r\n        Retrieve: \"Administration/Tenant/Retrieve\",\r\n        List: \"Administration/Tenant/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>TenantService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}\r\n", "\uFEFFimport { TranslationListRequest } from \"./TranslationListRequest\";\r\nimport { ListResponse, SaveResponse } from \"@serenity-is/corelib\";\r\nimport { TranslationItem } from \"./TranslationItem\";\r\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\r\nimport { TranslationUpdateRequest } from \"./TranslationUpdateRequest\";\r\n\r\nexport namespace TranslationService {\r\n    export const baseUrl = 'Administration/Translation';\r\n\r\n    export declare function List(request: TranslationListRequest, onSuccess?: (response: ListResponse<TranslationItem>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Update(request: TranslationUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        List: \"Administration/Translation/List\",\r\n        Update: \"Administration/Translation/Update\"\r\n    } as const;\r\n\r\n    [\r\n        'List', \r\n        'Update'\r\n    ].forEach(x => {\r\n        (<any>TranslationService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}\r\n", "\uFEFFexport class UserColumns {\r\n    static columnsKey = 'Administration.User';\r\n}\r\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface UserRow {\r\n    UserId?: number;\r\n    Username?: string;\r\n    Source?: string;\r\n    PasswordHash?: string;\r\n    PasswordSalt?: string;\r\n    DisplayName?: string;\r\n    Email?: string;\r\n    UserImage?: string;\r\n    LastDirectoryUpdate?: string;\r\n    TenantId?: number;\r\n    TenantName?: string;\r\n    IsActive?: number;\r\n    Password?: string;\r\n    PasswordConfirm?: string;\r\n    Roles?: number[];\r\n    InsertUserId?: number;\r\n    InsertDate?: string;\r\n    UpdateUserId?: number;\r\n    UpdateDate?: string;\r\n}\r\n\r\nexport abstract class UserRow {\r\n    static readonly idProperty = 'UserId';\r\n    static readonly isActiveProperty = 'IsActive';\r\n    static readonly nameProperty = 'Username';\r\n    static readonly localTextPrefix = 'Administration.User';\r\n    static readonly lookupKey = 'Administration.User';\r\n\r\n    /** @deprecated use getLookupAsync instead */\r\n    static getLookup() { return getLookup<UserRow>('Administration.User') }\r\n    static async getLookupAsync() { return getLookupAsync<UserRow>('Administration.User') }\r\n\r\n    static readonly deletePermission = 'Administration:Security';\r\n    static readonly insertPermission = 'Administration:Security';\r\n    static readonly readPermission = 'Administration:Security';\r\n    static readonly updatePermission = 'Administration:Security';\r\n\r\n    static readonly Fields = fieldsProxy<UserRow>();\r\n}\r\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListResponse } from \"@serenity-is/corelib\";\r\nimport { UserRow } from \"./UserRow\";\r\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\r\nimport { UserListRequest } from \"./UserListRequest\";\r\n\r\nexport namespace UserService {\r\n    export const baseUrl = 'Administration/User';\r\n\r\n    export declare function Create(request: SaveRequest<UserRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Update(request: SaveRequest<UserRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<UserRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: UserListRequest, onSuccess?: (response: ListResponse<UserRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Create: \"Administration/User/Create\",\r\n        Update: \"Administration/User/Update\",\r\n        Delete: \"Administration/User/Delete\",\r\n        Retrieve: \"Administration/User/Retrieve\",\r\n        List: \"Administration/User/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>UserService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}\r\n", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\r\nimport { initFormType } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface LanguageForm {\r\n    LanguageId: StringEditor;\r\n    LanguageName: StringEditor;\r\n}\r\n\r\nexport class LanguageForm extends PrefixedContext {\r\n    static formKey = 'Administration.Language';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!LanguageForm.init)  {\r\n            LanguageForm.init = true;\r\n\r\n            var w0 = StringEditor;\r\n\r\n            initFormType(LanguageForm, [\r\n                'LanguageId', w0,\r\n                'LanguageName', w0\r\n            ]);\r\n        }\r\n    }\r\n}\r\n", "\uFEFFexport namespace PermissionKeys {\r\n    export const Security = \"Administration:Security\";\r\n    export const Translation = \"Administration:Translation\";\r\n    export const Tenants = \"Administration:Tenants\";\r\n}\r\n", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\r\nimport { initFormType } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface RoleForm {\r\n    RoleName: StringEditor;\r\n}\r\n\r\nexport class RoleForm extends PrefixedContext {\r\n    static formKey = 'Administration.Role';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!RoleForm.init)  {\r\n            RoleForm.init = true;\r\n\r\n            var w0 = StringEditor;\r\n\r\n            initFormType(RoleForm, [\r\n                'RoleName', w0\r\n            ]);\r\n        }\r\n    }\r\n}\r\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface RolePermissionRow {\r\n    RolePermissionId?: number;\r\n    RoleId?: number;\r\n    PermissionKey?: string;\r\n    RoleRoleName?: string;\r\n}\r\n\r\nexport abstract class RolePermissionRow {\r\n    static readonly idProperty = 'RolePermissionId';\r\n    static readonly nameProperty = 'PermissionKey';\r\n    static readonly localTextPrefix = 'Administration.RolePermission';\r\n    static readonly deletePermission = 'Administration:Security';\r\n    static readonly insertPermission = 'Administration:Security';\r\n    static readonly readPermission = 'Administration:Security';\r\n    static readonly updatePermission = 'Administration:Security';\r\n\r\n    static readonly Fields = fieldsProxy<RolePermissionRow>();\r\n}\r\n", "\uFEFFimport { RolePermissionUpdateRequest } from \"./RolePermissionUpdateRequest\";\r\nimport { SaveResponse } from \"@serenity-is/corelib\";\r\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\r\nimport { RolePermissionListRequest } from \"./RolePermissionListRequest\";\r\nimport { RolePermissionListResponse } from \"./RolePermissionListResponse\";\r\n\r\nexport namespace RolePermissionService {\r\n    export const baseUrl = 'Administration/RolePermission';\r\n\r\n    export declare function Update(request: RolePermissionUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: RolePermissionListRequest, onSuccess?: (response: RolePermissionListResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Update: \"Administration/RolePermission/Update\",\r\n        List: \"Administration/RolePermission/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Update', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>RolePermissionService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}\r\n", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\r\nimport { initFormType } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface TenantForm {\r\n    TenantName: StringEditor;\r\n}\r\n\r\nexport class TenantForm extends PrefixedContext {\r\n    static formKey = 'Administration.Tenant';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!TenantForm.init)  {\r\n            TenantForm.init = true;\r\n\r\n            var w0 = StringEditor;\r\n\r\n            initFormType(TenantForm, [\r\n                'TenantName', w0\r\n            ]);\r\n        }\r\n    }\r\n}\r\n", "\uFEFFimport { StringEditor, EmailAddressEditor, LookupEditor, ImageUploadEditor, PasswordEditor, PrefixedContext } from \"@serenity-is/corelib\";\r\nimport { initFormType } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface UserForm {\r\n    Username: StringEditor;\r\n    DisplayName: StringEditor;\r\n    Email: EmailAddressEditor;\r\n    Roles: LookupEditor;\r\n    UserImage: ImageUploadEditor;\r\n    Password: PasswordEditor;\r\n    PasswordConfirm: PasswordEditor;\r\n    Source: StringEditor;\r\n    TenantId: LookupEditor;\r\n}\r\n\r\nexport class UserForm extends PrefixedContext {\r\n    static formKey = 'Administration.User';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!UserForm.init)  {\r\n            UserForm.init = true;\r\n\r\n            var w0 = StringEditor;\r\n            var w1 = EmailAddressEditor;\r\n            var w2 = LookupEditor;\r\n            var w3 = ImageUploadEditor;\r\n            var w4 = PasswordEditor;\r\n\r\n            initFormType(UserForm, [\r\n                'Username', w0,\r\n                'DisplayName', w0,\r\n                'Email', w1,\r\n                'Roles', w2,\r\n                'UserImage', w3,\r\n                'Password', w4,\r\n                'PasswordConfirm', w4,\r\n                'Source', w0,\r\n                'TenantId', w2\r\n            ]);\r\n        }\r\n    }\r\n}\r\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface UserPermissionRow {\r\n    UserPermissionId?: number;\r\n    UserId?: number;\r\n    PermissionKey?: string;\r\n    Granted?: boolean;\r\n    Username?: string;\r\n    User?: string;\r\n}\r\n\r\nexport abstract class UserPermissionRow {\r\n    static readonly idProperty = 'UserPermissionId';\r\n    static readonly nameProperty = 'PermissionKey';\r\n    static readonly localTextPrefix = 'Administration.UserPermission';\r\n    static readonly deletePermission = 'Administration:Security';\r\n    static readonly insertPermission = 'Administration:Security';\r\n    static readonly readPermission = 'Administration:Security';\r\n    static readonly updatePermission = 'Administration:Security';\r\n\r\n    static readonly Fields = fieldsProxy<UserPermissionRow>();\r\n}\r\n", "\uFEFFimport { UserPermissionUpdateRequest } from \"./UserPermissionUpdateRequest\";\r\nimport { SaveResponse, ListResponse } from \"@serenity-is/corelib\";\r\nimport { ServiceOptions, ServiceRequest, serviceRequest } from \"@serenity-is/corelib/q\";\r\nimport { UserPermissionListRequest } from \"./UserPermissionListRequest\";\r\nimport { UserPermissionRow } from \"./UserPermissionRow\";\r\n\r\nexport namespace UserPermissionService {\r\n    export const baseUrl = 'Administration/UserPermission';\r\n\r\n    export declare function Update(request: UserPermissionUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: UserPermissionListRequest, onSuccess?: (response: ListResponse<UserPermissionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function ListRolePermissions(request: UserPermissionListRequest, onSuccess?: (response: ListResponse<string>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function ListPermissionKeys(request: ServiceRequest, onSuccess?: (response: ListResponse<string>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Update: \"Administration/UserPermission/Update\",\r\n        List: \"Administration/UserPermission/List\",\r\n        ListRolePermissions: \"Administration/UserPermission/ListRolePermissions\",\r\n        ListPermissionKeys: \"Administration/UserPermission/ListPermissionKeys\"\r\n    } as const;\r\n\r\n    [\r\n        'Update', \r\n        'List', \r\n        'ListRolePermissions', \r\n        'ListPermissionKeys'\r\n    ].forEach(x => {\r\n        (<any>UserPermissionService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}\r\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\r\n\r\nexport interface UserRoleRow {\r\n    UserRoleId?: number;\r\n    UserId?: number;\r\n    RoleId?: number;\r\n    Username?: string;\r\n    User?: string;\r\n}\r\n\r\nexport abstract class UserRoleRow {\r\n    static readonly idProperty = 'UserRoleId';\r\n    static readonly localTextPrefix = 'Administration.UserRole';\r\n    static readonly deletePermission = 'Administration:Security';\r\n    static readonly insertPermission = 'Administration:Security';\r\n    static readonly readPermission = 'Administration:Security';\r\n    static readonly updatePermission = 'Administration:Security';\r\n\r\n    static readonly Fields = fieldsProxy<UserRoleRow>();\r\n}\r\n", "\uFEFFimport { UserRoleUpdateRequest } from \"./UserRoleUpdateRequest\";\r\nimport { SaveResponse } from \"@serenity-is/corelib\";\r\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\r\nimport { UserRoleListRequest } from \"./UserRoleListRequest\";\r\nimport { UserRoleListResponse } from \"./UserRoleListResponse\";\r\n\r\nexport namespace UserRoleService {\r\n    export const baseUrl = 'Administration/UserRole';\r\n\r\n    export declare function Update(request: UserRoleUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: UserRoleListRequest, onSuccess?: (response: UserRoleListResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Update: \"Administration/UserRole/Update\",\r\n        List: \"Administration/UserRole/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Update', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>UserRoleService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}\r\n"],
  "mappings": "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",
  "names": ["LanguageColumns", "__name", "import_q", "LanguageRow", "__async", "__name", "import_q", "LanguageService", "x", "r", "s", "o", "RoleColumns", "__name", "import_q", "RoleRow", "__async", "__name", "import_q", "RoleService", "x", "r", "s", "o", "TenantColumns", "__name", "import_q", "TenantRow", "__async", "__name", "import_q", "TenantService", "x", "r", "s", "o", "import_q", "TranslationService", "x", "r", "s", "o", "UserColumns", "__name", "import_q", "UserRow", "__async", "__name", "import_q", "UserService", "x", "r", "s", "o", "import_corelib", "import_q", "_LanguageForm", "prefix", "w0", "LanguageForm", "__name", "PermissionKeys", "import_corelib", "import_q", "_RoleForm", "prefix", "w0", "RoleForm", "__name", "import_q", "RolePermissionRow", "__name", "import_q", "RolePermissionService", "x", "r", "s", "o", "import_corelib", "import_q", "_TenantForm", "prefix", "w0", "TenantForm", "__name", "import_corelib", "import_q", "_UserForm", "prefix", "w0", "w1", "w2", "w3", "w4", "UserForm", "__name", "import_q", "UserPermissionRow", "__name", "import_q", "UserPermissionService", "x", "r", "s", "o", "import_q", "UserRoleRow", "__name", "import_q", "UserRoleService", "x", "r", "s", "o"]
}
