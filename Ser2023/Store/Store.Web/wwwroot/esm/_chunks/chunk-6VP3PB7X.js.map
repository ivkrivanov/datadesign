{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/Store/CategoriesColumns.ts", "../../../Modules/Store/CategoriesType/CategoriesTypeDialog.ts", "../../../Modules/ServerTypes/Store/CategoriesForm.ts", "../../../Modules/ServerTypes/Store/CategoriesLangRow.ts", "../../../Modules/ServerTypes/Store/CategoriesLangService.ts", "../../../Modules/ServerTypes/Store/CategoriesRow.ts", "../../../Modules/ServerTypes/Store/CategoriesService.ts", "../../../Modules/ServerTypes/Store/CategoriesTypeColumns.ts", "../../../Modules/ServerTypes/Store/CategoriesTypeForm.ts", "../../../Modules/ServerTypes/Store/CategoriesTypeRow.ts", "../../../Modules/ServerTypes/Store/CategoriesTypeService.ts", "../../../Modules/ServerTypes/Store/DocumentTypeColumns.ts", "../../../Modules/ServerTypes/Store/DocumentTypeForm.ts", "../../../Modules/ServerTypes/Store/DocumentTypeRow.ts", "../../../Modules/ServerTypes/Store/DocumentTypeService.ts", "../../../Modules/ServerTypes/Store/MeasuresColumns.ts", "../../../Modules/ServerTypes/Store/MeasuresForm.ts", "../../../Modules/ServerTypes/Store/MeasuresRow.ts", "../../../Modules/ServerTypes/Store/MeasuresService.ts", "../../../Modules/ServerTypes/Store/OperationTypeColumns.ts", "../../../Modules/ServerTypes/Store/OperationTypeForm.ts", "../../../Modules/ServerTypes/Store/OperationTypeRow.ts", "../../../Modules/ServerTypes/Store/OperationTypeService.ts", "../../../Modules/ServerTypes/Store/PermissionKeys.ts", "../../../Modules/ServerTypes/Store/ShippersColumns.ts", "../../../Modules/ServerTypes/Store/ShippersForm.ts", "../../../Modules/ServerTypes/Store/ShippersRow.ts", "../../../Modules/ServerTypes/Store/ShippersService.ts", "../../../Modules/ServerTypes/Store/ShopsColumns.ts", "../../../Modules/ServerTypes/Store/ShopsForm.ts", "../../../Modules/ServerTypes/Store/ShopsRow.ts", "../../../Modules/ServerTypes/Store/ShopsService.ts"],
  "sourcesContent": ["\uFEFFexport class CategoriesColumns {\r\n    static columnsKey = 'Store.Categories';\r\n}", "\r\nimport { Decorators, EntityDialog } from \"@serenity-is/corelib\";\r\nimport { CategoriesTypeForm, CategoriesTypeRow, CategoriesTypeService } from \"../../ServerTypes/Store\";\r\n\r\n    @Decorators.registerClass('Store.Store.CategoriesTypeDialog')\r\n    export class CategoriesTypeDialog extends EntityDialog<CategoriesTypeRow, any> {\r\n        protected getFormKey() { return CategoriesTypeForm.formKey; }\r\n        protected getIdProperty() { return CategoriesTypeRow.idProperty; }\r\n        protected getLocalTextPrefix() { return CategoriesTypeRow.localTextPrefix; }\r\n        protected getNameProperty() { return CategoriesTypeRow.nameProperty; }\r\n        protected getService() { return CategoriesTypeService.baseUrl; }\r\n        protected getDeletePermission() { return CategoriesTypeRow.deletePermission; }\r\n        protected getInsertPermission() { return CategoriesTypeRow.insertPermission; }\r\n        protected getUpdatePermission() { return CategoriesTypeRow.updatePermission; }\r\n\r\n        protected form = new CategoriesTypeForm(this.idPrefix);\r\n    }\r\n", "\uFEFFimport { CategoriesTypeDialog } from \"@/Store/CategoriesType/CategoriesTypeDialog\";\nimport { LookupEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesForm {\n    CategoryTypeId: LookupEditor;\n    CategoryCode: LookupEditor;\n    CategoryName: StringEditor;\n    Description: StringEditor;\n    Picture: StringEditor;\n}\n\nexport class CategoriesForm extends PrefixedContext {\n    static formKey = 'Store.Categories';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CategoriesForm.init)  {\n            CategoriesForm.init = true;\n\n            var w0 = LookupEditor;\n            var w1 = StringEditor;\n\n            initFormType(CategoriesForm, [\n                'CategoryTypeId', w0,\n                'CategoryCode', w0,\n                'CategoryName', w1,\n                'Description', w1,\n                'Picture', w1\n            ]);\n        }\n    }\n}\n\n[CategoriesTypeDialog]; // referenced types\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesLangRow {\n    Id?: number;\n    CategoryId?: number;\n    LanguageId?: number;\n    CategoryName?: string;\n    Description?: string;\n}\n\nexport abstract class CategoriesLangRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'CategoryName';\n    static readonly localTextPrefix = 'Store.CategoriesLang';\n    static readonly deletePermission = 'Store:General';\n    static readonly insertPermission = 'Store:General';\n    static readonly readPermission = 'Store:General';\n    static readonly updatePermission = 'Store:General';\n\n    static readonly Fields = fieldsProxy<CategoriesLangRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { CategoriesLangRow } from \"./CategoriesLangRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace CategoriesLangService {\n    export const baseUrl = 'Store/CategoriesLang';\n\n    export declare function Create(request: SaveRequest<CategoriesLangRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoriesLangRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoriesLangRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CategoriesLangRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/CategoriesLang/Create\",\n        Update: \"Store/CategoriesLang/Update\",\n        Delete: \"Store/CategoriesLang/Delete\",\n        Retrieve: \"Store/CategoriesLang/Retrieve\",\n        List: \"Store/CategoriesLang/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CategoriesLangService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesRow {\n    CategoryId?: number;\n    CategoryTypeId?: number;\n    CategoryCode?: string;\n    CategoryName?: string;\n    Description?: string;\n    Picture?: number[];\n    IsActive?: number;\n    TenantId?: number;\n    Type?: number;\n    CategoryType?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class CategoriesRow {\n    static readonly idProperty = 'CategoryId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'CategoryName';\n    static readonly localTextPrefix = 'Store.Categories';\n    static readonly lookupKey = 'Store.Categories';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<CategoriesRow>('Store.Categories') }\n    static async getLookupAsync() { return getLookupAsync<CategoriesRow>('Store.Categories') }\n\n    static readonly deletePermission = 'Store:CategoriesType:Delete';\n    static readonly insertPermission = 'Store:CategoriesType:Modify';\n    static readonly readPermission = 'Store:CategoriesType:View';\n    static readonly updatePermission = 'Store:CategoriesType:Modify';\n\n    static readonly Fields = fieldsProxy<CategoriesRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListResponse } from \"@serenity-is/corelib\";\nimport { CategoriesRow } from \"./CategoriesRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { CategoriesListRequest } from \"./CategoriesListRequest\";\n\nexport namespace CategoriesService {\n    export const baseUrl = 'Store/Categories';\n\n    export declare function Create(request: SaveRequest<CategoriesRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoriesRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoriesRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: CategoriesListRequest, onSuccess?: (response: ListResponse<CategoriesRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Categories/Create\",\n        Update: \"Store/Categories/Update\",\n        Delete: \"Store/Categories/Delete\",\n        Retrieve: \"Store/Categories/Retrieve\",\n        List: \"Store/Categories/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CategoriesService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class CategoriesTypeColumns {\n    static columnsKey = 'Store.CategoriesType';\n}\n", "\uFEFFimport { IntegerEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesTypeForm {\n    Type: IntegerEditor;\n    CategoryType: StringEditor;\n}\n\nexport class CategoriesTypeForm extends PrefixedContext {\n    static formKey = 'Store.CategoriesType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CategoriesTypeForm.init)  {\n            CategoriesTypeForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = StringEditor;\n\n            initFormType(CategoriesTypeForm, [\n                'Type', w0,\n                'CategoryType', w1\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriesTypeRow {\n    CategoryTypeId?: number;\n    Type?: number;\n    CategoryType?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class CategoriesTypeRow {\n    static readonly idProperty = 'CategoryTypeId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Type';\n    static readonly localTextPrefix = 'Store.CategoriesType';\n    static readonly lookupKey = 'Store.CategoriesType';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<CategoriesTypeRow>('Store.CategoriesType') }\n    static async getLookupAsync() { return getLookupAsync<CategoriesTypeRow>('Store.CategoriesType') }\n\n    static readonly deletePermission = 'Store:CategoriesType:Delete';\n    static readonly insertPermission = 'Store:CategoriesType:Modify';\n    static readonly readPermission = 'Store:CategoriesType:View';\n    static readonly updatePermission = 'Store:CategoriesType:Modify';\n\n    static readonly Fields = fieldsProxy<CategoriesTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { CategoriesTypeRow } from \"./CategoriesTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace CategoriesTypeService {\n    export const baseUrl = 'Store/CategoriesType';\n\n    export declare function Create(request: SaveRequest<CategoriesTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoriesTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoriesTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CategoriesTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/CategoriesType/Create\",\n        Update: \"Store/CategoriesType/Update\",\n        Delete: \"Store/CategoriesType/Delete\",\n        Retrieve: \"Store/CategoriesType/Retrieve\",\n        List: \"Store/CategoriesType/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CategoriesTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class DocumentTypeColumns {\r\n    static columnsKey = 'Store.DocumentType';\r\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface DocumentTypeForm {\n    DocumentName: StringEditor;\n}\n\nexport class DocumentTypeForm extends PrefixedContext {\n    static formKey = 'Store.DocumentType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!DocumentTypeForm.init)  {\n            DocumentTypeForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(DocumentTypeForm, [\n                'DocumentName', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface DocumentTypeRow {\n    DocumentTypeId?: number;\n    DocumentName?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class DocumentTypeRow {\n    static readonly idProperty = 'DocumentTypeId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'DocumentName';\n    static readonly localTextPrefix = 'Store.DocumentType';\n    static readonly lookupKey = 'Store.DocumentType';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<DocumentTypeRow>('Store.DocumentType') }\n    static async getLookupAsync() { return getLookupAsync<DocumentTypeRow>('Store.DocumentType') }\n\n    static readonly deletePermission = 'Store:DocumentType:Delete';\n    static readonly insertPermission = 'Store:DocumentType:Modify';\n    static readonly readPermission = 'Store:DocumentType:View';\n    static readonly updatePermission = 'Store:DocumentType:Modify';\n\n    static readonly Fields = fieldsProxy<DocumentTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { DocumentTypeRow } from \"./DocumentTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace DocumentTypeService {\n    export const baseUrl = 'Store/DocumentType';\n\n    export declare function Create(request: SaveRequest<DocumentTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<DocumentTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<DocumentTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<DocumentTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/DocumentType/Create\",\n        Update: \"Store/DocumentType/Update\",\n        Delete: \"Store/DocumentType/Delete\",\n        Retrieve: \"Store/DocumentType/Retrieve\",\n        List: \"Store/DocumentType/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>DocumentTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class MeasuresColumns {\r\n    static columnsKey = 'Store.Measures';\r\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface MeasuresForm {\n    MeasureName: StringEditor;\n}\n\nexport class MeasuresForm extends PrefixedContext {\n    static formKey = 'Store.Measures';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MeasuresForm.init)  {\n            MeasuresForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(MeasuresForm, [\n                'MeasureName', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface MeasuresRow {\n    MeasureId?: number;\n    MeasureName?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class MeasuresRow {\n    static readonly idProperty = 'MeasureId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'MeasureName';\n    static readonly localTextPrefix = 'Store.Measures';\n    static readonly lookupKey = 'Store.Measures';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<MeasuresRow>('Store.Measures') }\n    static async getLookupAsync() { return getLookupAsync<MeasuresRow>('Store.Measures') }\n\n    static readonly deletePermission = 'Store:Measures:Delete';\n    static readonly insertPermission = 'Store:Measures:Modify';\n    static readonly readPermission = 'Store:Measures:View';\n    static readonly updatePermission = 'Store:Measures:Modify';\n\n    static readonly Fields = fieldsProxy<MeasuresRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { MeasuresRow } from \"./MeasuresRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace MeasuresService {\n    export const baseUrl = 'Store/Measures';\n\n    export declare function Create(request: SaveRequest<MeasuresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<MeasuresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MeasuresRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MeasuresRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Measures/Create\",\n        Update: \"Store/Measures/Update\",\n        Delete: \"Store/Measures/Delete\",\n        Retrieve: \"Store/Measures/Retrieve\",\n        List: \"Store/Measures/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MeasuresService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class OperationTypeColumns {\r\n    static columnsKey = 'Store.OperationType';\r\n}", "\uFEFFimport { IntegerEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface OperationTypeForm {\n    OpCode: IntegerEditor;\n    Operation: StringEditor;\n}\n\nexport class OperationTypeForm extends PrefixedContext {\n    static formKey = 'Store.OperationType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!OperationTypeForm.init)  {\n            OperationTypeForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = StringEditor;\n\n            initFormType(OperationTypeForm, [\n                'OpCode', w0,\n                'Operation', w1\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface OperationTypeRow {\n    OperationTypeId?: number;\n    OpCode?: number;\n    Operation?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class OperationTypeRow {\n    static readonly idProperty = 'OperationTypeId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Operation';\n    static readonly localTextPrefix = 'Store.OperationType';\n    static readonly lookupKey = 'Store.OperationType';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<OperationTypeRow>('Store.OperationType') }\n    static async getLookupAsync() { return getLookupAsync<OperationTypeRow>('Store.OperationType') }\n\n    static readonly deletePermission = 'Store:OperationType:Delete';\n    static readonly insertPermission = 'Store:OperationType:Modify';\n    static readonly readPermission = 'Store:OperationType:View';\n    static readonly updatePermission = 'Store:OperationType:Modify';\n\n    static readonly Fields = fieldsProxy<OperationTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { OperationTypeRow } from \"./OperationTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace OperationTypeService {\n    export const baseUrl = 'Store/OperationType';\n\n    export declare function Create(request: SaveRequest<OperationTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<OperationTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<OperationTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<OperationTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/OperationType/Create\",\n        Update: \"Store/OperationType/Update\",\n        Delete: \"Store/OperationType/Delete\",\n        Retrieve: \"Store/OperationType/Retrieve\",\n        List: \"Store/OperationType/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>OperationTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport namespace PermissionKeys {\n    export const General = \"Store:General\";\n\n    export namespace Categories {\n        export const Delete = \"Store:Categories:Delete\";\n        export const Modify = \"Store:Categories:Modify\";\n        export const View = \"Store:Categories:View\";\n    }\n\n    export namespace CategoriesType {\n        export const Delete = \"Store:CategoriesType:Delete\";\n        export const Modify = \"Store:CategoriesType:Modify\";\n        export const View = \"Store:CategoriesType:View\";\n    }\n\n    export namespace Shops {\n        export const Delete = \"Store:Shops:Delete\";\n        export const Modify = \"Store:Shops:Modify\";\n        export const View = \"Store:Shops:View\";\n    }\n\n    export namespace DocumentType {\n        export const Delete = \"Store:DocumentType:Delete\";\n        export const Modify = \"Store:DocumentType:Modify\";\n        export const View = \"Store:DocumentType:View\";\n    }\n\n    export namespace Measures {\n        export const Delete = \"Store:Measures:Delete\";\n        export const Modify = \"Store:Measures:Modify\";\n        export const View = \"Store:Measures:View\";\n    }\n\n    export namespace OperationType {\n        export const Delete = \"Store:OperationType:Delete\";\n        export const Modify = \"Store:OperationType:Modify\";\n        export const View = \"Store:OperationType:View\";\n    }\n\n    export namespace Counterparties {\n        export const Delete = \"Store:Counterparty:Delete\";\n        export const Modify = \"Store:Counterparty:Modify\";\n        export const View = \"Store:Counterparty:View\";\n    }\n\n    export namespace Wares {\n        export const Delete = \"Store:Wares:Delete\";\n        export const Modify = \"Store:Wares:Modify\";\n        export const View = \"Store:Wares:View\";\n    }\n\n    export namespace Product {\n        export const Delete = \"Store:Product:Delete\";\n        export const Modify = \"Store:Product:Modify\";\n        export const View = \"Store:Product:View\";\n    }\n}\n", "\uFEFFexport class ShippersColumns {\r\n    static columnsKey = 'Store.Shippers';\r\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface ShippersForm {\n    CompanyName: StringEditor;\n    Phone: StringEditor;\n}\n\nexport class ShippersForm extends PrefixedContext {\n    static formKey = 'Store.Shippers';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ShippersForm.init)  {\n            ShippersForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(ShippersForm, [\n                'CompanyName', w0,\n                'Phone', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface ShippersRow {\n    ShipperId?: number;\n    CompanyName?: string;\n    Phone?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class ShippersRow {\n    static readonly idProperty = 'ShipperId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'CompanyName';\n    static readonly localTextPrefix = 'Store.Shippers';\n    static readonly lookupKey = 'Store.Shipper';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<ShippersRow>('Store.Shipper') }\n    static async getLookupAsync() { return getLookupAsync<ShippersRow>('Store.Shipper') }\n\n    static readonly deletePermission = 'Store:General';\n    static readonly insertPermission = 'Store:General';\n    static readonly readPermission = 'Store:General';\n    static readonly updatePermission = 'Store:General';\n\n    static readonly Fields = fieldsProxy<ShippersRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { ShippersRow } from \"./ShippersRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace ShippersService {\n    export const baseUrl = 'Store/Shippers';\n\n    export declare function Create(request: SaveRequest<ShippersRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ShippersRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ShippersRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ShippersRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Shippers/Create\",\n        Update: \"Store/Shippers/Update\",\n        Delete: \"Store/Shippers/Delete\",\n        Retrieve: \"Store/Shippers/Retrieve\",\n        List: \"Store/Shippers/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ShippersService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class ShopsColumns {\r\n    static columnsKey = 'Store.Shops';\r\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface ShopsForm {\n    ShopId: StringEditor;\n    ShopName: StringEditor;\n    ContactName: StringEditor;\n    ContactTitle: StringEditor;\n    Address: StringEditor;\n    City: StringEditor;\n    Region: StringEditor;\n    PostalCode: StringEditor;\n    Country: StringEditor;\n    Phone: StringEditor;\n}\n\nexport class ShopsForm extends PrefixedContext {\n    static formKey = 'Store.Shops';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ShopsForm.init)  {\n            ShopsForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(ShopsForm, [\n                'ShopId', w0,\n                'ShopName', w0,\n                'ContactName', w0,\n                'ContactTitle', w0,\n                'Address', w0,\n                'City', w0,\n                'Region', w0,\n                'PostalCode', w0,\n                'Country', w0,\n                'Phone', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface ShopsRow {\n    Id?: number;\n    ShopId?: string;\n    ShopName?: string;\n    ContactName?: string;\n    ContactTitle?: string;\n    Address?: string;\n    City?: string;\n    Region?: string;\n    PostalCode?: string;\n    Country?: string;\n    Phone?: string;\n    IsActive?: number;\n    TenantId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class ShopsRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'ShopId';\n    static readonly localTextPrefix = 'Store.Shops';\n    static readonly lookupKey = 'Store.Shops';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<ShopsRow>('Store.Shops') }\n    static async getLookupAsync() { return getLookupAsync<ShopsRow>('Store.Shops') }\n\n    static readonly deletePermission = 'Store:Shops:Delete';\n    static readonly insertPermission = 'Store:Shops:Modify';\n    static readonly readPermission = 'Store:Shops:View';\n    static readonly updatePermission = 'Store:Shops:Modify';\n\n    static readonly Fields = fieldsProxy<ShopsRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { ShopsRow } from \"./ShopsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace ShopsService {\n    export const baseUrl = 'Store/Shops';\n\n    export declare function Create(request: SaveRequest<ShopsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ShopsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ShopsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ShopsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Store/Shops/Create\",\n        Update: \"Store/Shops/Update\",\n        Delete: \"Store/Shops/Delete\",\n        Retrieve: \"Store/Shops/Retrieve\",\n        List: \"Store/Shops/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ShopsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n"],
  "mappings": "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",
  "names": ["CategoriesColumns", "__name", "import_corelib", "import_corelib", "import_q", "_CategoriesForm", "prefix", "w0", "w1", "CategoriesForm", "__name", "import_q", "CategoriesLangRow", "__name", "import_q", "CategoriesLangService", "x", "r", "s", "o", "import_q", "CategoriesRow", "__async", "__name", "import_q", "CategoriesService", "x", "r", "s", "o", "CategoriesTypeColumns", "__name", "import_corelib", "import_q", "_CategoriesTypeForm", "prefix", "w0", "w1", "CategoriesTypeForm", "__name", "import_q", "CategoriesTypeRow", "__async", "__name", "import_q", "CategoriesTypeService", "x", "r", "s", "o", "DocumentTypeColumns", "__name", "import_corelib", "import_q", "_DocumentTypeForm", "prefix", "w0", "DocumentTypeForm", "__name", "import_q", "DocumentTypeRow", "__async", "__name", "import_q", "DocumentTypeService", "x", "r", "s", "o", "MeasuresColumns", "__name", "import_corelib", "import_q", "_MeasuresForm", "prefix", "w0", "MeasuresForm", "__name", "import_q", "MeasuresRow", "__async", "__name", "import_q", "MeasuresService", "x", "r", "s", "o", "OperationTypeColumns", "__name", "import_corelib", "import_q", "_OperationTypeForm", "prefix", "w0", "w1", "OperationTypeForm", "__name", "import_q", "OperationTypeRow", "__async", "__name", "import_q", "OperationTypeService", "x", "r", "s", "o", "PermissionKeys", "Categories", "CategoriesType", "Shops", "DocumentType", "Measures", "OperationType", "Counterparties", "Wares", "Product", "ShippersColumns", "__name", "import_corelib", "import_q", "_ShippersForm", "prefix", "w0", "ShippersForm", "__name", "import_q", "ShippersRow", "__async", "__name", "import_q", "ShippersService", "x", "r", "s", "o", "ShopsColumns", "__name", "import_corelib", "import_q", "_ShopsForm", "prefix", "w0", "ShopsForm", "__name", "import_q", "ShopsRow", "__async", "__name", "import_q", "ShopsService", "x", "r", "s", "o", "CategoriesTypeDialog", "CategoriesTypeForm", "CategoriesTypeRow", "CategoriesTypeService", "__name", "__decorateClass"]
}
