import { Exception } from "../../Q/System";
import { IEditDialog, IReadOnly } from "../../Interfaces";
import { PropertyGrid, PropertyGridOptions } from "../Widgets/PropertyGrid";
import { Toolbar, ToolButton } from "../Widgets/Toolbar";
import { TemplatedDialog } from "./TemplatedDialog";
export declare class EntityDialog<TItem, TOptions> extends TemplatedDialog<TOptions> implements IEditDialog, IReadOnly {
    protected entity: TItem;
    protected entityId: any;
    protected propertyGrid: PropertyGrid;
    protected toolbar: Toolbar;
    protected saveAndCloseButton: JQuery;
    protected applyChangesButton: JQuery;
    protected deleteButton: JQuery;
    protected undeleteButton: JQuery;
    protected cloneButton: JQuery;
    protected editButton: JQuery;
    protected localizationGrid: PropertyGrid;
    protected localizationButton: JQuery;
    protected localizationPendingValue: any;
    protected localizationLastValue: any;
    static defaultLanguageList: () => string[][];
    constructor(opt?: TOptions);
    destroy(): void;
    protected get_entity(): TItem;
    protected set_entity(entity: any): void;
    protected get_entityId(): any;
    protected set_entityId(value: any): void;
    protected getEntityNameFieldValue(): any;
    protected getEntityTitle(): string;
    protected updateTitle(): void;
    protected isCloneMode(): boolean;
    protected isEditMode(): boolean;
    protected isDeleted(): boolean;
    protected isNew(): boolean;
    protected isNewOrDeleted(): boolean;
    protected getDeleteOptions(callback: (response: Serenity.DeleteResponse) => void): Serenity.ServiceOptions<Serenity.DeleteResponse>;
    protected deleteHandler(options: Serenity.ServiceOptions<Serenity.DeleteResponse>, callback: (response: Serenity.DeleteResponse) => void): void;
    protected doDelete(callback: (response: Serenity.DeleteResponse) => void): void;
    protected onDeleteSuccess(response: Serenity.DeleteResponse): void;
    protected attrs<TAttr>(attrType: {
        new (...args: any[]): TAttr;
    }): TAttr[];
    private entityType;
    protected getEntityType(): string;
    private formKey;
    protected getFormKey(): string;
    private localTextDbPrefix;
    protected getLocalTextDbPrefix(): string;
    protected getLocalTextPrefix(): string;
    private entitySingular;
    protected getEntitySingular(): string;
    private nameProperty;
    protected getNameProperty(): string;
    private idProperty;
    protected getIdProperty(): string;
    protected isActiveProperty: string;
    protected getIsActiveProperty(): string;
    protected getIsDeletedProperty(): string;
    protected service: string;
    protected getService(): string;
    load(entityOrId: any, done: () => void, fail: (ex: Exception) => void): void;
    loadNewAndOpenDialog(asPanel?: boolean): void;
    loadEntityAndOpenDialog(entity: TItem, asPanel?: boolean): void;
    protected loadResponse(data: any): void;
    protected loadEntity(entity: TItem): void;
    protected beforeLoadEntity(entity: TItem): void;
    protected afterLoadEntity(): void;
    loadByIdAndOpenDialog(entityId: any, asPanel?: boolean): void;
    protected onLoadingData(data: Serenity.RetrieveResponse<TItem>): void;
    protected getLoadByIdOptions(id: any, callback: (response: Serenity.RetrieveResponse<TItem>) => void): Serenity.ServiceOptions<Serenity.RetrieveResponse<TItem>>;
    protected getLoadByIdRequest(id: any): Serenity.RetrieveRequest;
    protected reloadById(): void;
    loadById(id: any, callback?: (response: Serenity.RetrieveResponse<TItem>) => void, fail?: () => void): void;
    protected loadByIdHandler(options: Serenity.ServiceOptions<Serenity.RetrieveResponse<TItem>>, callback: (response: Serenity.RetrieveResponse<TItem>) => void, fail: () => void): void;
    protected initLocalizationGrid(): void;
    protected initLocalizationGridCommon(pgOptions: PropertyGridOptions): void;
    protected isLocalizationMode(): boolean;
    protected isLocalizationModeAndChanged(): boolean;
    protected localizationButtonClick(): void;
    protected getLanguages(): any[];
    private getLangs;
    protected loadLocalization(): void;
    protected setLocalizationGridCurrentValues(): void;
    protected getLocalizationGridValue(): any;
    protected getPendingLocalizations(): any;
    protected initPropertyGrid(): void;
    protected getPropertyItems(): Serenity.PropertyItem[];
    protected getPropertyGridOptions(): PropertyGridOptions;
    protected validateBeforeSave(): boolean;
    protected getSaveOptions(callback: (response: Serenity.SaveResponse) => void): Serenity.ServiceOptions<Serenity.SaveResponse>;
    protected getSaveEntity(): TItem;
    protected getSaveRequest(): Serenity.SaveRequest<TItem>;
    protected onSaveSuccess(response: Serenity.SaveResponse): void;
    protected save_submitHandler(callback: (response: Serenity.SaveResponse) => void): void;
    protected save(callback?: (response: Serenity.SaveResponse) => void): void | boolean;
    protected saveHandler(options: Serenity.ServiceOptions<Serenity.SaveResponse>, callback: (response: Serenity.SaveResponse) => void): void;
    protected initToolbar(): void;
    protected showSaveSuccessMessage(response: Serenity.SaveResponse): void;
    protected getToolbarButtons(): ToolButton[];
    protected getCloningEntity(): TItem;
    protected updateInterface(): void;
    protected getUndeleteOptions(callback?: (response: Serenity.UndeleteResponse) => void): Serenity.ServiceOptions<Serenity.UndeleteResponse>;
    protected undeleteHandler(options: Serenity.ServiceOptions<Serenity.UndeleteResponse>, callback: (response: Serenity.UndeleteResponse) => void): void;
    protected undelete(callback?: (response: Serenity.UndeleteResponse) => void): void;
    private _readonly;
    get readOnly(): boolean;
    set readOnly(value: boolean);
    get_readOnly(): boolean;
    set_readOnly(value: boolean): void;
    protected getInsertPermission(): string;
    protected getUpdatePermission(): string;
    protected getDeletePermission(): string;
    protected hasDeletePermission(): boolean;
    protected hasInsertPermission(): boolean;
    protected hasUpdatePermission(): boolean;
    protected hasSavePermission(): boolean;
    protected editClicked: boolean;
    protected isViewMode(): boolean;
    protected useViewMode(): boolean;
}
