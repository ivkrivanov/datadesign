/// <reference types="jquery" />
import { IReadOnly } from "../../Interfaces";
import { FilterLine } from "../Filtering/FilterLine";
import { QuickSearchField } from "./QuickSearchInput";
import { Toolbar, ToolButton } from "../Widgets/Toolbar";
import { Widget } from "../Widgets/Widget";
import { FilterStore } from "../Filtering/FilterStore";
import { FilterDisplayBar } from "../Filtering/FilterDisplayBar";
import { QuickFilterBar } from ".//QuickFilterBar";
import { QuickFilter } from "./QuickFilter";
import { DateEditor } from "../Editors/DateEditor";
import { SelectEditor } from "../Editors/SelectEditor";
import { IDataGrid } from "./IDataGrid";
export interface SettingStorage {
    getItem(key: string): string;
    setItem(key: string, value: string): void;
}
export interface PersistedGridColumn {
    id: string;
    width?: number;
    sort?: number;
    visible?: boolean;
}
export interface PersistedGridSettings {
    columns?: PersistedGridColumn[];
    filterItems?: FilterLine[];
    quickFilters?: {
        [key: string]: any;
    };
    quickFilterText?: string;
    quickSearchField?: QuickSearchField;
    quickSearchText?: string;
    includeDeleted?: boolean;
}
export interface GridPersistanceFlags {
    columnWidths?: boolean;
    columnVisibility?: boolean;
    sortColumns?: boolean;
    filterItems?: boolean;
    quickFilters?: boolean;
    quickFilterText?: boolean;
    quickSearch?: boolean;
    includeDeleted?: boolean;
}
export declare class DataGrid<TItem, TOptions> extends Widget<TOptions> implements IDataGrid, IReadOnly {
    protected titleDiv: JQuery;
    protected toolbar: Toolbar;
    protected filterBar: FilterDisplayBar;
    protected quickFiltersDiv: JQuery;
    protected quickFiltersBar: QuickFilterBar;
    protected slickContainer: JQuery;
    protected allColumns: Slick.Column[];
    protected initialSettings: PersistedGridSettings;
    protected restoringSettings: number;
    private idProperty;
    private isActiveProperty;
    private localTextDbPrefix;
    private isDisabled;
    private rows;
    private slickGridOnSort;
    private slickGridOnClick;
    view: Slick.RemoteView<TItem>;
    slickGrid: Slick.Grid;
    openDialogsAsPanel: boolean;
    static defaultRowHeight: number;
    static defaultHeaderHeight: number;
    static defaultPersistanceStorage: SettingStorage;
    private layoutTimer;
    constructor(container: JQuery, options?: TOptions);
    protected useLayoutTimer(): boolean;
    protected attrs<TAttr>(attrType: {
        new (...args: any[]): TAttr;
    }): TAttr[];
    protected layout(): void;
    protected getInitialTitle(): string;
    protected createToolbarExtensions(): void;
    protected ensureQuickFilterBar(): QuickFilterBar;
    protected createQuickFilters(filters?: QuickFilter<Widget<any>, any>[]): void;
    protected getQuickFilters(): QuickFilter<Widget<any>, any>[];
    static propertyItemToQuickFilter(item: Serenity.PropertyItem): any;
    protected findQuickFilter<TWidget>(type: {
        new (...args: any[]): TWidget;
    }, field: string): TWidget;
    protected tryFindQuickFilter<TWidget>(type: {
        new (...args: any[]): TWidget;
    }, field: string): TWidget;
    protected createIncludeDeletedButton(): void;
    protected getQuickSearchFields(): QuickSearchField[];
    protected createQuickSearchInput(): void;
    destroy(): void;
    protected getItemCssClass(item: TItem, index: number): string;
    protected getItemMetadata(item: TItem, index: number): any;
    protected postProcessColumns(columns: Slick.Column[]): Slick.Column[];
    protected initialPopulate(): void;
    protected canFilterColumn(column: Slick.Column): boolean;
    protected initializeFilterBar(): void;
    protected createSlickGrid(): Slick.Grid;
    protected setInitialSortOrder(): void;
    itemAt(row: number): TItem;
    rowCount(): number;
    getItems(): TItem[];
    setItems(value: TItem[]): void;
    protected bindToSlickEvents(): void;
    protected getAddButtonCaption(): string;
    protected getButtons(): ToolButton[];
    protected editItem(entityOrId: any): void;
    protected editItemOfType(itemType: string, entityOrId: any): void;
    protected onClick(e: JQueryEventObject, row: number, cell: number): void;
    protected viewDataChanged(e: any, rows: TItem[]): void;
    protected bindToViewEvents(): void;
    protected onViewProcessData(response: Serenity.ListResponse<TItem>): Serenity.ListResponse<TItem>;
    protected onViewFilter(item: TItem): boolean;
    protected getIncludeColumns(include: {
        [key: string]: boolean;
    }): void;
    protected setCriteriaParameter(): void;
    protected setEquality(field: string, value: any): void;
    protected setIncludeColumnsParameter(): void;
    protected onViewSubmit(): boolean;
    protected markupReady(): void;
    protected createSlickContainer(): JQuery;
    protected createView(): Slick.RemoteView<TItem>;
    protected getDefaultSortBy(): any[];
    protected usePager(): boolean;
    protected enableFiltering(): boolean;
    protected populateWhenVisible(): boolean;
    protected createFilterBar(): void;
    protected getPagerOptions(): Slick.PagerOptions;
    protected createPager(): void;
    protected getViewOptions(): Slick.RemoteViewOptions;
    protected createToolbar(buttons: ToolButton[]): void;
    getTitle(): string;
    setTitle(value: string): void;
    protected getItemType(): string;
    protected itemLink(itemType?: string, idField?: string, text?: (ctx: Slick.FormatterContext) => string, cssClass?: (ctx: Slick.FormatterContext) => string, encode?: boolean): Slick.Format;
    protected getColumnsKey(): string;
    protected getPropertyItems(): Serenity.PropertyItem[];
    protected getColumns(): Slick.Column[];
    protected propertyItemsToSlickColumns(propertyItems: Serenity.PropertyItem[]): Slick.Column[];
    protected getSlickOptions(): Slick.GridOptions;
    protected populateLock(): void;
    protected populateUnlock(): void;
    protected getGridCanLoad(): boolean;
    refresh(): void;
    protected refreshIfNeeded(): void;
    protected internalRefresh(): void;
    setIsDisabled(value: boolean): void;
    private _readonly;
    get readOnly(): boolean;
    set readOnly(value: boolean);
    get_readOnly(): boolean;
    set_readOnly(value: boolean): void;
    protected updateInterface(): void;
    protected getLocalTextDbPrefix(): string;
    protected getLocalTextPrefix(): string;
    protected getIdProperty(): string;
    protected getIsDeletedProperty(): string;
    protected getIsActiveProperty(): string;
    protected updateDisabledState(): void;
    protected resizeCanvas(): void;
    protected subDialogDataChange(): void;
    protected addFilterSeparator(): void;
    protected determineText(getKey: (prefix: string) => string): string;
    protected addQuickFilter<TWidget extends Widget<any>, TOptions>(opt: QuickFilter<TWidget, TOptions>): TWidget;
    protected addDateRangeFilter(field: string, title?: string): DateEditor;
    protected dateRangeQuickFilter(field: string, title?: string): QuickFilter<DateEditor, import("../Editors/DateTimeEditor").DateTimeEditorOptions>;
    protected addDateTimeRangeFilter(field: string, title?: string): import("../Editors/DateTimeEditor").DateTimeEditor;
    protected dateTimeRangeQuickFilter(field: string, title?: string): QuickFilter<import("../Editors/DateTimeEditor").DateTimeEditor, import("../Editors/DateTimeEditor").DateTimeEditorOptions>;
    protected addBooleanFilter(field: string, title?: string, yes?: string, no?: string): SelectEditor;
    protected booleanQuickFilter(field: string, title?: string, yes?: string, no?: string): QuickFilter<SelectEditor, import("../Editors/SelectEditor").SelectEditorOptions>;
    protected invokeSubmitHandlers(): void;
    protected quickFilterChange(e: JQueryEventObject): void;
    protected getPersistanceStorage(): SettingStorage;
    protected getPersistanceKey(): string;
    protected gridPersistanceFlags(): GridPersistanceFlags;
    protected canShowColumn(column: Slick.Column): boolean;
    protected getPersistedSettings(): PersistedGridSettings;
    protected restoreSettings(settings?: PersistedGridSettings, flags?: GridPersistanceFlags): void;
    protected persistSettings(flags?: GridPersistanceFlags): void;
    protected getCurrentSettings(flags?: GridPersistanceFlags): PersistedGridSettings;
    getElement(): JQuery;
    getGrid(): Slick.Grid;
    getView(): Slick.RemoteView<TItem>;
    getFilterStore(): FilterStore;
}
