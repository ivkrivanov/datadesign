var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var LanguageColumns = /** @class */ (function () {
            function LanguageColumns() {
            }
            LanguageColumns.columnsKey = 'Administration.Language';
            return LanguageColumns;
        }());
        Administration.LanguageColumns = LanguageColumns;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var LanguageForm = /** @class */ (function (_super) {
            __extends(LanguageForm, _super);
            function LanguageForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LanguageForm.init) {
                    LanguageForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LanguageForm, [
                        'LanguageId', w0,
                        'LanguageName', w0
                    ]);
                }
                return _this;
            }
            LanguageForm.formKey = 'Administration.Language';
            return LanguageForm;
        }(Serenity.PrefixedContext));
        Administration.LanguageForm = LanguageForm;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var LanguageRow;
        (function (LanguageRow) {
            LanguageRow.idProperty = 'Id';
            LanguageRow.nameProperty = 'LanguageName';
            LanguageRow.localTextPrefix = 'Administration.Language';
            LanguageRow.lookupKey = 'Administration.Language';
            function getLookup() {
                return Q.getLookup('Administration.Language');
            }
            LanguageRow.getLookup = getLookup;
            LanguageRow.deletePermission = 'Administration:Translation';
            LanguageRow.insertPermission = 'Administration:Translation';
            LanguageRow.readPermission = 'Administration:Translation';
            LanguageRow.updatePermission = 'Administration:Translation';
        })(LanguageRow = Administration.LanguageRow || (Administration.LanguageRow = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var LanguageService;
        (function (LanguageService) {
            LanguageService.baseUrl = 'Administration/Language';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LanguageService[x] = function (r, s, o) {
                    return Q.serviceRequest(LanguageService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LanguageService = Administration.LanguageService || (Administration.LanguageService = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var PermissionKeys;
        (function (PermissionKeys) {
            PermissionKeys.Security = "Administration:Security";
            PermissionKeys.Translation = "Administration:Translation";
            PermissionKeys.Tenants = "Administration:Tenants";
        })(PermissionKeys = Administration.PermissionKeys || (Administration.PermissionKeys = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RoleColumns = /** @class */ (function () {
            function RoleColumns() {
            }
            RoleColumns.columnsKey = 'Administration.Role';
            return RoleColumns;
        }());
        Administration.RoleColumns = RoleColumns;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RoleForm = /** @class */ (function (_super) {
            __extends(RoleForm, _super);
            function RoleForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RoleForm.init) {
                    RoleForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(RoleForm, [
                        'RoleName', w0
                    ]);
                }
                return _this;
            }
            RoleForm.formKey = 'Administration.Role';
            return RoleForm;
        }(Serenity.PrefixedContext));
        Administration.RoleForm = RoleForm;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RolePermissionRow;
        (function (RolePermissionRow) {
            RolePermissionRow.idProperty = 'RolePermissionId';
            RolePermissionRow.nameProperty = 'PermissionKey';
            RolePermissionRow.localTextPrefix = 'Administration.RolePermission';
            RolePermissionRow.deletePermission = 'Administration:Security';
            RolePermissionRow.insertPermission = 'Administration:Security';
            RolePermissionRow.readPermission = 'Administration:Security';
            RolePermissionRow.updatePermission = 'Administration:Security';
        })(RolePermissionRow = Administration.RolePermissionRow || (Administration.RolePermissionRow = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RolePermissionService;
        (function (RolePermissionService) {
            RolePermissionService.baseUrl = 'Administration/RolePermission';
            [
                'Update',
                'List'
            ].forEach(function (x) {
                RolePermissionService[x] = function (r, s, o) {
                    return Q.serviceRequest(RolePermissionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RolePermissionService = Administration.RolePermissionService || (Administration.RolePermissionService = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RoleRow;
        (function (RoleRow) {
            RoleRow.idProperty = 'RoleId';
            RoleRow.nameProperty = 'RoleName';
            RoleRow.localTextPrefix = 'Administration.Role';
            RoleRow.lookupKey = 'Administration.Role';
            function getLookup() {
                return Q.getLookup('Administration.Role');
            }
            RoleRow.getLookup = getLookup;
            RoleRow.deletePermission = 'Administration:Security';
            RoleRow.insertPermission = 'Administration:Security';
            RoleRow.readPermission = 'Administration:Security';
            RoleRow.updatePermission = 'Administration:Security';
        })(RoleRow = Administration.RoleRow || (Administration.RoleRow = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RoleService;
        (function (RoleService) {
            RoleService.baseUrl = 'Administration/Role';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RoleService[x] = function (r, s, o) {
                    return Q.serviceRequest(RoleService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RoleService = Administration.RoleService || (Administration.RoleService = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var TenantColumns = /** @class */ (function () {
            function TenantColumns() {
            }
            TenantColumns.columnsKey = 'Administration.Tenant';
            return TenantColumns;
        }());
        Administration.TenantColumns = TenantColumns;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var TenantForm = /** @class */ (function (_super) {
            __extends(TenantForm, _super);
            function TenantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TenantForm.init) {
                    TenantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TenantForm, [
                        'TenantName', w0
                    ]);
                }
                return _this;
            }
            TenantForm.formKey = 'Administration.Tenant';
            return TenantForm;
        }(Serenity.PrefixedContext));
        Administration.TenantForm = TenantForm;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var TenantRow;
        (function (TenantRow) {
            TenantRow.idProperty = 'TenantId';
            TenantRow.nameProperty = 'TenantName';
            TenantRow.localTextPrefix = 'Administration.Tenant';
            TenantRow.lookupKey = 'Administration.Tenant';
            function getLookup() {
                return Q.getLookup('Administration.Tenant');
            }
            TenantRow.getLookup = getLookup;
            TenantRow.deletePermission = 'Administration:Tenants';
            TenantRow.insertPermission = 'Administration:Tenants';
            TenantRow.readPermission = 'Administration:Tenants';
            TenantRow.updatePermission = 'Administration:Tenants';
        })(TenantRow = Administration.TenantRow || (Administration.TenantRow = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var TenantService;
        (function (TenantService) {
            TenantService.baseUrl = 'Administration/Tenant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TenantService[x] = function (r, s, o) {
                    return Q.serviceRequest(TenantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TenantService = Administration.TenantService || (Administration.TenantService = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var TranslationService;
        (function (TranslationService) {
            TranslationService.baseUrl = 'Administration/Translation';
            [
                'List',
                'Update'
            ].forEach(function (x) {
                TranslationService[x] = function (r, s, o) {
                    return Q.serviceRequest(TranslationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TranslationService = Administration.TranslationService || (Administration.TranslationService = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserColumns = /** @class */ (function () {
            function UserColumns() {
            }
            UserColumns.columnsKey = 'Administration.User';
            return UserColumns;
        }());
        Administration.UserColumns = UserColumns;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserForm = /** @class */ (function (_super) {
            __extends(UserForm, _super);
            function UserForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!UserForm.init) {
                    UserForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.EmailEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.PasswordEditor;
                    var w4 = s.LookupEditor;
                    Q.initFormType(UserForm, [
                        'Username', w0,
                        'DisplayName', w0,
                        'Email', w1,
                        'UserImage', w2,
                        'Password', w3,
                        'PasswordConfirm', w3,
                        'Source', w0,
                        'TenantId', w4
                    ]);
                }
                return _this;
            }
            UserForm.formKey = 'Administration.User';
            return UserForm;
        }(Serenity.PrefixedContext));
        Administration.UserForm = UserForm;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserPermissionRow;
        (function (UserPermissionRow) {
            UserPermissionRow.idProperty = 'UserPermissionId';
            UserPermissionRow.nameProperty = 'PermissionKey';
            UserPermissionRow.localTextPrefix = 'Administration.UserPermission';
            UserPermissionRow.deletePermission = 'Administration:Security';
            UserPermissionRow.insertPermission = 'Administration:Security';
            UserPermissionRow.readPermission = 'Administration:Security';
            UserPermissionRow.updatePermission = 'Administration:Security';
        })(UserPermissionRow = Administration.UserPermissionRow || (Administration.UserPermissionRow = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserPermissionService;
        (function (UserPermissionService) {
            UserPermissionService.baseUrl = 'Administration/UserPermission';
            [
                'Update',
                'List',
                'ListRolePermissions',
                'ListPermissionKeys'
            ].forEach(function (x) {
                UserPermissionService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserPermissionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserPermissionService = Administration.UserPermissionService || (Administration.UserPermissionService = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserRoleRow;
        (function (UserRoleRow) {
            UserRoleRow.idProperty = 'UserRoleId';
            UserRoleRow.localTextPrefix = 'Administration.UserRole';
            UserRoleRow.deletePermission = 'Administration:Security';
            UserRoleRow.insertPermission = 'Administration:Security';
            UserRoleRow.readPermission = 'Administration:Security';
            UserRoleRow.updatePermission = 'Administration:Security';
        })(UserRoleRow = Administration.UserRoleRow || (Administration.UserRoleRow = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserRoleService;
        (function (UserRoleService) {
            UserRoleService.baseUrl = 'Administration/UserRole';
            [
                'Update',
                'List'
            ].forEach(function (x) {
                UserRoleService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserRoleService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserRoleService = Administration.UserRoleService || (Administration.UserRoleService = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserRow;
        (function (UserRow) {
            UserRow.idProperty = 'UserId';
            UserRow.isActiveProperty = 'IsActive';
            UserRow.nameProperty = 'Username';
            UserRow.localTextPrefix = 'Administration.User';
            UserRow.lookupKey = 'Administration.User';
            function getLookup() {
                return Q.getLookup('Administration.User');
            }
            UserRow.getLookup = getLookup;
            UserRow.deletePermission = 'Administration:Security';
            UserRow.insertPermission = 'Administration:Security';
            UserRow.readPermission = 'Administration:Security';
            UserRow.updatePermission = 'Administration:Security';
        })(UserRow = Administration.UserRow || (Administration.UserRow = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserService;
        (function (UserService) {
            UserService.baseUrl = 'Administration/User';
            [
                'Create',
                'Update',
                'Delete',
                'Undelete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                UserService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserService = Administration.UserService || (Administration.UserService = {}));
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var ChangePasswordForm = /** @class */ (function (_super) {
            __extends(ChangePasswordForm, _super);
            function ChangePasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ChangePasswordForm.init) {
                    ChangePasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.PasswordEditor;
                    Q.initFormType(ChangePasswordForm, [
                        'OldPassword', w0,
                        'NewPassword', w0,
                        'ConfirmPassword', w0
                    ]);
                }
                return _this;
            }
            ChangePasswordForm.formKey = 'Membership.ChangePassword';
            return ChangePasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ChangePasswordForm = ChangePasswordForm;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var ForgotPasswordForm = /** @class */ (function (_super) {
            __extends(ForgotPasswordForm, _super);
            function ForgotPasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ForgotPasswordForm.init) {
                    ForgotPasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.EmailAddressEditor;
                    Q.initFormType(ForgotPasswordForm, [
                        'Email', w0
                    ]);
                }
                return _this;
            }
            ForgotPasswordForm.formKey = 'Membership.ForgotPassword';
            return ForgotPasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ForgotPasswordForm = ForgotPasswordForm;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var LoginForm = /** @class */ (function (_super) {
            __extends(LoginForm, _super);
            function LoginForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LoginForm.init) {
                    LoginForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.PasswordEditor;
                    Q.initFormType(LoginForm, [
                        'Username', w0,
                        'Password', w1
                    ]);
                }
                return _this;
            }
            LoginForm.formKey = 'Membership.Login';
            return LoginForm;
        }(Serenity.PrefixedContext));
        Membership.LoginForm = LoginForm;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var ResetPasswordForm = /** @class */ (function (_super) {
            __extends(ResetPasswordForm, _super);
            function ResetPasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ResetPasswordForm.init) {
                    ResetPasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.PasswordEditor;
                    Q.initFormType(ResetPasswordForm, [
                        'NewPassword', w0,
                        'ConfirmPassword', w0
                    ]);
                }
                return _this;
            }
            ResetPasswordForm.formKey = 'Membership.ResetPassword';
            return ResetPasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ResetPasswordForm = ResetPasswordForm;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var SignUpForm = /** @class */ (function (_super) {
            __extends(SignUpForm, _super);
            function SignUpForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!SignUpForm.init) {
                    SignUpForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.EmailAddressEditor;
                    var w2 = s.PasswordEditor;
                    Q.initFormType(SignUpForm, [
                        'DisplayName', w0,
                        'Email', w1,
                        'ConfirmEmail', w1,
                        'Password', w2,
                        'ConfirmPassword', w2
                    ]);
                }
                return _this;
            }
            SignUpForm.formKey = 'Membership.SignUp';
            return SignUpForm;
        }(Serenity.PrefixedContext));
        Membership.SignUpForm = SignUpForm;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store_1) {
    var Store;
    (function (Store) {
        var CategoriesColumns = /** @class */ (function () {
            function CategoriesColumns() {
            }
            CategoriesColumns.columnsKey = 'Store.Categories';
            return CategoriesColumns;
        }());
        Store.CategoriesColumns = CategoriesColumns;
    })(Store = Store_1.Store || (Store_1.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_2) {
    var Store;
    (function (Store) {
        var CategoriesExcelImportForm = /** @class */ (function (_super) {
            __extends(CategoriesExcelImportForm, _super);
            function CategoriesExcelImportForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CategoriesExcelImportForm.init) {
                    CategoriesExcelImportForm.init = true;
                    var s = Serenity;
                    var w0 = s.ImageUploadEditor;
                    Q.initFormType(CategoriesExcelImportForm, [
                        'FileName', w0
                    ]);
                }
                return _this;
            }
            CategoriesExcelImportForm.formKey = 'Store.CategoriesExcelImport';
            return CategoriesExcelImportForm;
        }(Serenity.PrefixedContext));
        Store.CategoriesExcelImportForm = CategoriesExcelImportForm;
    })(Store = Store_2.Store || (Store_2.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_3) {
    var Store;
    (function (Store) {
        var CategoriesForm = /** @class */ (function (_super) {
            __extends(CategoriesForm, _super);
            function CategoriesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CategoriesForm.init) {
                    CategoriesForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.StringEditor;
                    Q.initFormType(CategoriesForm, [
                        'CAtegoryId', w0,
                        'CategoryTypeId', w1,
                        'CategoryCode', w2,
                        'CategoryName', w2,
                        'Description', w2
                    ]);
                }
                return _this;
            }
            CategoriesForm.formKey = 'Store.Categories';
            return CategoriesForm;
        }(Serenity.PrefixedContext));
        Store.CategoriesForm = CategoriesForm;
    })(Store = Store_3.Store || (Store_3.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_4) {
    var Store;
    (function (Store) {
        var CategoriesLangRow;
        (function (CategoriesLangRow) {
            CategoriesLangRow.idProperty = 'Id';
            CategoriesLangRow.nameProperty = 'CategoryName';
            CategoriesLangRow.localTextPrefix = 'Store.CategoriesLang';
            CategoriesLangRow.deletePermission = 'Store:General';
            CategoriesLangRow.insertPermission = 'Store:General';
            CategoriesLangRow.readPermission = 'Store:General';
            CategoriesLangRow.updatePermission = 'Store:General';
        })(CategoriesLangRow = Store.CategoriesLangRow || (Store.CategoriesLangRow = {}));
    })(Store = Store_4.Store || (Store_4.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_5) {
    var Store;
    (function (Store) {
        var CategoriesLangService;
        (function (CategoriesLangService) {
            CategoriesLangService.baseUrl = 'Store/CategoriesLang';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CategoriesLangService[x] = function (r, s, o) {
                    return Q.serviceRequest(CategoriesLangService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CategoriesLangService = Store.CategoriesLangService || (Store.CategoriesLangService = {}));
    })(Store = Store_5.Store || (Store_5.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_6) {
    var Store;
    (function (Store) {
        var CategoriesRow;
        (function (CategoriesRow) {
            CategoriesRow.idProperty = 'CategoryId';
            CategoriesRow.isActiveProperty = 'IsActive';
            CategoriesRow.nameProperty = 'CategoryName';
            CategoriesRow.localTextPrefix = 'Store.Categories';
            CategoriesRow.lookupKey = 'Store.Categories';
            function getLookup() {
                return Q.getLookup('Store.Categories');
            }
            CategoriesRow.getLookup = getLookup;
            CategoriesRow.deletePermission = 'Store:Categories:Delete';
            CategoriesRow.insertPermission = 'Store:Categories:Modify';
            CategoriesRow.readPermission = 'Store:Categories:View';
            CategoriesRow.updatePermission = 'Store:Categories:Modify';
        })(CategoriesRow = Store.CategoriesRow || (Store.CategoriesRow = {}));
    })(Store = Store_6.Store || (Store_6.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_7) {
    var Store;
    (function (Store) {
        var CategoriesService;
        (function (CategoriesService) {
            CategoriesService.baseUrl = 'Store/Categories';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'ExcelImport'
            ].forEach(function (x) {
                CategoriesService[x] = function (r, s, o) {
                    return Q.serviceRequest(CategoriesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CategoriesService = Store.CategoriesService || (Store.CategoriesService = {}));
    })(Store = Store_7.Store || (Store_7.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_8) {
    var Store;
    (function (Store) {
        var CategoriesTypeColumns = /** @class */ (function () {
            function CategoriesTypeColumns() {
            }
            CategoriesTypeColumns.columnsKey = 'Store.CategoriesType';
            return CategoriesTypeColumns;
        }());
        Store.CategoriesTypeColumns = CategoriesTypeColumns;
    })(Store = Store_8.Store || (Store_8.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_9) {
    var Store;
    (function (Store) {
        var CategoriesTypeForm = /** @class */ (function (_super) {
            __extends(CategoriesTypeForm, _super);
            function CategoriesTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CategoriesTypeForm.init) {
                    CategoriesTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(CategoriesTypeForm, [
                        'Type', w0,
                        'CategoryType', w1
                    ]);
                }
                return _this;
            }
            CategoriesTypeForm.formKey = 'Store.CategoriesType';
            return CategoriesTypeForm;
        }(Serenity.PrefixedContext));
        Store.CategoriesTypeForm = CategoriesTypeForm;
    })(Store = Store_9.Store || (Store_9.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_10) {
    var Store;
    (function (Store) {
        var CategoriesTypeRow;
        (function (CategoriesTypeRow) {
            CategoriesTypeRow.idProperty = 'CategoryTypeId';
            CategoriesTypeRow.isActiveProperty = 'IsActive';
            CategoriesTypeRow.nameProperty = 'Type';
            CategoriesTypeRow.localTextPrefix = 'Store.CategoriesType';
            CategoriesTypeRow.lookupKey = 'Store.CategoriesType';
            function getLookup() {
                return Q.getLookup('Store.CategoriesType');
            }
            CategoriesTypeRow.getLookup = getLookup;
            CategoriesTypeRow.deletePermission = 'Store:CategoriesType:Delete';
            CategoriesTypeRow.insertPermission = 'Store:CategoriesType:Modify';
            CategoriesTypeRow.readPermission = 'Store:CategoriesType:View';
            CategoriesTypeRow.updatePermission = 'Store:CategoriesType:Modify';
        })(CategoriesTypeRow = Store.CategoriesTypeRow || (Store.CategoriesTypeRow = {}));
    })(Store = Store_10.Store || (Store_10.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_11) {
    var Store;
    (function (Store) {
        var CategoriesTypeService;
        (function (CategoriesTypeService) {
            CategoriesTypeService.baseUrl = 'Store/CategoriesType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CategoriesTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(CategoriesTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CategoriesTypeService = Store.CategoriesTypeService || (Store.CategoriesTypeService = {}));
    })(Store = Store_11.Store || (Store_11.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_12) {
    var Store;
    (function (Store) {
        var CounterpartiesColumns = /** @class */ (function () {
            function CounterpartiesColumns() {
            }
            CounterpartiesColumns.columnsKey = 'Store.Counterparties';
            return CounterpartiesColumns;
        }());
        Store.CounterpartiesColumns = CounterpartiesColumns;
    })(Store = Store_12.Store || (Store_12.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_13) {
    var Store;
    (function (Store) {
        var CounterpartiesForm = /** @class */ (function (_super) {
            __extends(CounterpartiesForm, _super);
            function CounterpartiesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CounterpartiesForm.init) {
                    CounterpartiesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = Store.PhoneEditor;
                    var w3 = Store.NotesEditor;
                    var w4 = s.DateEditor;
                    var w5 = s.EmailEditor;
                    var w6 = s.BooleanEditor;
                    Q.initFormType(CounterpartiesForm, [
                        'CounterpartyId', w0,
                        'CompanyName', w0,
                        'ContactName', w0,
                        'ContactTitle', w0,
                        'Representatives', w1,
                        'Address', w0,
                        'Country', w1,
                        'City', w1,
                        'Region', w0,
                        'PostalCode', w0,
                        'Phone', w2,
                        'NotesList', w3,
                        'LastContactDate', w4,
                        'LastContactedBy', w1,
                        'Email', w5,
                        'SendBulletin', w6
                    ]);
                }
                return _this;
            }
            CounterpartiesForm.formKey = 'Store.Counterparties';
            return CounterpartiesForm;
        }(Serenity.PrefixedContext));
        Store.CounterpartiesForm = CounterpartiesForm;
    })(Store = Store_13.Store || (Store_13.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_14) {
    var Store;
    (function (Store) {
        var CounterpartiesRow;
        (function (CounterpartiesRow) {
            CounterpartiesRow.idProperty = 'Id';
            CounterpartiesRow.isActiveProperty = 'IsActive';
            CounterpartiesRow.nameProperty = 'CompanyName';
            CounterpartiesRow.localTextPrefix = 'Store.Counterparties';
            CounterpartiesRow.lookupKey = 'Store.Counterparties';
            function getLookup() {
                return Q.getLookup('Store.Counterparties');
            }
            CounterpartiesRow.getLookup = getLookup;
            CounterpartiesRow.deletePermission = 'Store:Counterparty:Delete';
            CounterpartiesRow.insertPermission = 'Store:Counterparty:Modify';
            CounterpartiesRow.readPermission = 'Store:Counterparty:View';
            CounterpartiesRow.updatePermission = 'Store:Counterparty:Modify';
        })(CounterpartiesRow = Store.CounterpartiesRow || (Store.CounterpartiesRow = {}));
    })(Store = Store_14.Store || (Store_14.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_15) {
    var Store;
    (function (Store) {
        var CounterpartiesService;
        (function (CounterpartiesService) {
            CounterpartiesService.baseUrl = 'Store/Counterparties';
            [
                'Create',
                'Update',
                'Delete',
                'GetNextNumber',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CounterpartiesService[x] = function (r, s, o) {
                    return Q.serviceRequest(CounterpartiesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CounterpartiesService = Store.CounterpartiesService || (Store.CounterpartiesService = {}));
    })(Store = Store_15.Store || (Store_15.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_16) {
    var Store;
    (function (Store) {
        var CounterpartyDetailsRow;
        (function (CounterpartyDetailsRow) {
            CounterpartyDetailsRow.idProperty = 'Id';
            CounterpartyDetailsRow.nameProperty = 'Email';
            CounterpartyDetailsRow.localTextPrefix = 'Store.CounterpartyDetails';
            CounterpartyDetailsRow.deletePermission = 'Store:Counterparty:Delete';
            CounterpartyDetailsRow.insertPermission = 'Store:Counterparty:Modify';
            CounterpartyDetailsRow.readPermission = 'Store:Counterparty:View';
            CounterpartyDetailsRow.updatePermission = 'Store:Counterparty:Modify';
        })(CounterpartyDetailsRow = Store.CounterpartyDetailsRow || (Store.CounterpartyDetailsRow = {}));
    })(Store = Store_16.Store || (Store_16.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_17) {
    var Store;
    (function (Store) {
        var CounterpartyRepresentativesRow;
        (function (CounterpartyRepresentativesRow) {
            CounterpartyRepresentativesRow.idProperty = 'RepresentativeId';
            CounterpartyRepresentativesRow.localTextPrefix = 'Store.CounterpartyRepresentatives';
            CounterpartyRepresentativesRow.deletePermission = 'Store:Counterparty:Delete';
            CounterpartyRepresentativesRow.insertPermission = 'Store:Counterparty:Modify';
            CounterpartyRepresentativesRow.readPermission = 'Store:Counterparty:View';
            CounterpartyRepresentativesRow.updatePermission = 'Store:Counterparty:Modify';
        })(CounterpartyRepresentativesRow = Store.CounterpartyRepresentativesRow || (Store.CounterpartyRepresentativesRow = {}));
    })(Store = Store_17.Store || (Store_17.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_18) {
    var Store;
    (function (Store) {
        var DocumentTypeColumns = /** @class */ (function () {
            function DocumentTypeColumns() {
            }
            DocumentTypeColumns.columnsKey = 'Store.DocumentType';
            return DocumentTypeColumns;
        }());
        Store.DocumentTypeColumns = DocumentTypeColumns;
    })(Store = Store_18.Store || (Store_18.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_19) {
    var Store;
    (function (Store) {
        var DocumentTypeForm = /** @class */ (function (_super) {
            __extends(DocumentTypeForm, _super);
            function DocumentTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!DocumentTypeForm.init) {
                    DocumentTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(DocumentTypeForm, [
                        'DocumentName', w0
                    ]);
                }
                return _this;
            }
            DocumentTypeForm.formKey = 'Store.DocumentType';
            return DocumentTypeForm;
        }(Serenity.PrefixedContext));
        Store.DocumentTypeForm = DocumentTypeForm;
    })(Store = Store_19.Store || (Store_19.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_20) {
    var Store;
    (function (Store) {
        var DocumentTypeRow;
        (function (DocumentTypeRow) {
            DocumentTypeRow.idProperty = 'DocumentTypeId';
            DocumentTypeRow.isActiveProperty = 'IsActive';
            DocumentTypeRow.nameProperty = 'DocumentName';
            DocumentTypeRow.localTextPrefix = 'Store.DocumentType';
            DocumentTypeRow.lookupKey = 'Store.DocumentType';
            function getLookup() {
                return Q.getLookup('Store.DocumentType');
            }
            DocumentTypeRow.getLookup = getLookup;
            DocumentTypeRow.deletePermission = 'Store:DocumentType:Delete';
            DocumentTypeRow.insertPermission = 'Store:DocumentType:Modify';
            DocumentTypeRow.readPermission = 'Store:DocumentType:View';
            DocumentTypeRow.updatePermission = 'Store:DocumentType:Modify';
        })(DocumentTypeRow = Store.DocumentTypeRow || (Store.DocumentTypeRow = {}));
    })(Store = Store_20.Store || (Store_20.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_21) {
    var Store;
    (function (Store) {
        var DocumentTypeService;
        (function (DocumentTypeService) {
            DocumentTypeService.baseUrl = 'Store/DocumentType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                DocumentTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(DocumentTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(DocumentTypeService = Store.DocumentTypeService || (Store.DocumentTypeService = {}));
    })(Store = Store_21.Store || (Store_21.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_22) {
    var Store;
    (function (Store) {
        var EmployeesRow;
        (function (EmployeesRow) {
            EmployeesRow.idProperty = 'EmployeeId';
            EmployeesRow.isActiveProperty = 'IsActive';
            EmployeesRow.nameProperty = 'LastName';
            EmployeesRow.localTextPrefix = 'Store.Employees';
            EmployeesRow.lookupKey = 'Store.Employees';
            function getLookup() {
                return Q.getLookup('Store.Employees');
            }
            EmployeesRow.getLookup = getLookup;
            EmployeesRow.deletePermission = 'Store:General';
            EmployeesRow.insertPermission = 'Store:General';
            EmployeesRow.readPermission = 'Store:General';
            EmployeesRow.updatePermission = 'Store:General';
        })(EmployeesRow = Store.EmployeesRow || (Store.EmployeesRow = {}));
    })(Store = Store_22.Store || (Store_22.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_23) {
    var Store;
    (function (Store) {
        var EmployeesService;
        (function (EmployeesService) {
            EmployeesService.baseUrl = 'Store/Employees';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                EmployeesService[x] = function (r, s, o) {
                    return Q.serviceRequest(EmployeesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(EmployeesService = Store.EmployeesService || (Store.EmployeesService = {}));
    })(Store = Store_23.Store || (Store_23.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_24) {
    var Store;
    (function (Store) {
        var Gender;
        (function (Gender) {
            Gender[Gender["Male"] = 1] = "Male";
            Gender[Gender["Female"] = 2] = "Female";
        })(Gender = Store.Gender || (Store.Gender = {}));
        Serenity.Decorators.registerEnumType(Gender, 'Store.Store.Gender', 'Store.Store.Entities.Gender');
    })(Store = Store_24.Store || (Store_24.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_25) {
    var Store;
    (function (Store) {
        var MeasuresColumns = /** @class */ (function () {
            function MeasuresColumns() {
            }
            MeasuresColumns.columnsKey = 'Store.Measures';
            return MeasuresColumns;
        }());
        Store.MeasuresColumns = MeasuresColumns;
    })(Store = Store_25.Store || (Store_25.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_26) {
    var Store;
    (function (Store) {
        var MeasuresForm = /** @class */ (function (_super) {
            __extends(MeasuresForm, _super);
            function MeasuresForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MeasuresForm.init) {
                    MeasuresForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(MeasuresForm, [
                        'MeasureName', w0
                    ]);
                }
                return _this;
            }
            MeasuresForm.formKey = 'Store.Measures';
            return MeasuresForm;
        }(Serenity.PrefixedContext));
        Store.MeasuresForm = MeasuresForm;
    })(Store = Store_26.Store || (Store_26.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_27) {
    var Store;
    (function (Store) {
        var MeasuresRow;
        (function (MeasuresRow) {
            MeasuresRow.idProperty = 'MeasureId';
            MeasuresRow.isActiveProperty = 'IsActive';
            MeasuresRow.nameProperty = 'MeasureName';
            MeasuresRow.localTextPrefix = 'Store.Measures';
            MeasuresRow.lookupKey = 'Store.Measures';
            function getLookup() {
                return Q.getLookup('Store.Measures');
            }
            MeasuresRow.getLookup = getLookup;
            MeasuresRow.deletePermission = 'Store:Measures:Delete';
            MeasuresRow.insertPermission = 'Store:Measures:Modify';
            MeasuresRow.readPermission = 'Store:Measures:View';
            MeasuresRow.updatePermission = 'Store:Measures:Modify';
        })(MeasuresRow = Store.MeasuresRow || (Store.MeasuresRow = {}));
    })(Store = Store_27.Store || (Store_27.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_28) {
    var Store;
    (function (Store) {
        var MeasuresService;
        (function (MeasuresService) {
            MeasuresService.baseUrl = 'Store/Measures';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MeasuresService[x] = function (r, s, o) {
                    return Q.serviceRequest(MeasuresService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MeasuresService = Store.MeasuresService || (Store.MeasuresService = {}));
    })(Store = Store_28.Store || (Store_28.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_29) {
    var Store;
    (function (Store) {
        var OperationTypeColumns = /** @class */ (function () {
            function OperationTypeColumns() {
            }
            OperationTypeColumns.columnsKey = 'Store.OperationType';
            return OperationTypeColumns;
        }());
        Store.OperationTypeColumns = OperationTypeColumns;
    })(Store = Store_29.Store || (Store_29.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_30) {
    var Store;
    (function (Store) {
        var OperationTypeForm = /** @class */ (function (_super) {
            __extends(OperationTypeForm, _super);
            function OperationTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!OperationTypeForm.init) {
                    OperationTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(OperationTypeForm, [
                        'OpCode', w0,
                        'Operation', w1
                    ]);
                }
                return _this;
            }
            OperationTypeForm.formKey = 'Store.OperationType';
            return OperationTypeForm;
        }(Serenity.PrefixedContext));
        Store.OperationTypeForm = OperationTypeForm;
    })(Store = Store_30.Store || (Store_30.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_31) {
    var Store;
    (function (Store) {
        var OperationTypeRow;
        (function (OperationTypeRow) {
            OperationTypeRow.idProperty = 'OperationTypeId';
            OperationTypeRow.isActiveProperty = 'IsActive';
            OperationTypeRow.nameProperty = 'Operation';
            OperationTypeRow.localTextPrefix = 'Store.OperationType';
            OperationTypeRow.lookupKey = 'Store.OperationType';
            function getLookup() {
                return Q.getLookup('Store.OperationType');
            }
            OperationTypeRow.getLookup = getLookup;
            OperationTypeRow.deletePermission = 'Store:OperationType:Delete';
            OperationTypeRow.insertPermission = 'Store:OperationType:Modify';
            OperationTypeRow.readPermission = 'Store:OperationType:View';
            OperationTypeRow.updatePermission = 'Store:OperationType:Modify';
        })(OperationTypeRow = Store.OperationTypeRow || (Store.OperationTypeRow = {}));
    })(Store = Store_31.Store || (Store_31.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_32) {
    var Store;
    (function (Store) {
        var OperationTypeService;
        (function (OperationTypeService) {
            OperationTypeService.baseUrl = 'Store/OperationType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                OperationTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(OperationTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(OperationTypeService = Store.OperationTypeService || (Store.OperationTypeService = {}));
    })(Store = Store_32.Store || (Store_32.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_33) {
    var Store;
    (function (Store) {
        var PermissionKeys;
        (function (PermissionKeys) {
            PermissionKeys.General = "Store:General";
            var Categories;
            (function (Categories) {
                Categories.Delete = "Store:Categories:Delete";
                Categories.Modify = "Store:Categories:Modify";
                Categories.View = "Store:Categories:View";
            })(Categories || (Categories = {}));
            var CategoriesType;
            (function (CategoriesType) {
                CategoriesType.Delete = "Store:CategoriesType:Delete";
                CategoriesType.Modify = "Store:CategoriesType:Modify";
                CategoriesType.View = "Store:CategoriesType:View";
            })(CategoriesType || (CategoriesType = {}));
            var Shops;
            (function (Shops) {
                Shops.Delete = "Store:Shops:Delete";
                Shops.Modify = "Store:Shops:Modify";
                Shops.View = "Store:Shops:View";
            })(Shops || (Shops = {}));
            var DocumentType;
            (function (DocumentType) {
                DocumentType.Delete = "Store:DocumentType:Delete";
                DocumentType.Modify = "Store:DocumentType:Modify";
                DocumentType.View = "Store:DocumentType:View";
            })(DocumentType || (DocumentType = {}));
            var Measures;
            (function (Measures) {
                Measures.Delete = "Store:Measures:Delete";
                Measures.Modify = "Store:Measures:Modify";
                Measures.View = "Store:Measures:View";
            })(Measures || (Measures = {}));
            var OperationType;
            (function (OperationType) {
                OperationType.Delete = "Store:OperationType:Delete";
                OperationType.Modify = "Store:OperationType:Modify";
                OperationType.View = "Store:OperationType:View";
            })(OperationType || (OperationType = {}));
            var Counterparties;
            (function (Counterparties) {
                Counterparties.Delete = "Store:Counterparty:Delete";
                Counterparties.Modify = "Store:Counterparty:Modify";
                Counterparties.View = "Store:Counterparty:View";
            })(Counterparties || (Counterparties = {}));
            var Wares;
            (function (Wares) {
                Wares.Delete = "Store:Wares:Delete";
                Wares.Modify = "Store:Wares:Modify";
                Wares.View = "Store:Wares:View";
            })(Wares || (Wares = {}));
            var Product;
            (function (Product) {
                Product.Delete = "Store:Product:Delete";
                Product.Modify = "Store:Product:Modify";
                Product.View = "Store:Product:View";
            })(Product || (Product = {}));
        })(PermissionKeys = Store.PermissionKeys || (Store.PermissionKeys = {}));
    })(Store = Store_33.Store || (Store_33.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_34) {
    var Store;
    (function (Store) {
        var ProductDetailsColumns = /** @class */ (function () {
            function ProductDetailsColumns() {
            }
            ProductDetailsColumns.columnsKey = 'Store.ProductDetails';
            return ProductDetailsColumns;
        }());
        Store.ProductDetailsColumns = ProductDetailsColumns;
    })(Store = Store_34.Store || (Store_34.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_35) {
    var Store;
    (function (Store) {
        var ProductDetailsForm = /** @class */ (function (_super) {
            __extends(ProductDetailsForm, _super);
            function ProductDetailsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProductDetailsForm.init) {
                    ProductDetailsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.DecimalEditor;
                    Q.initFormType(ProductDetailsForm, [
                        'WaresId', w0,
                        'Quantity', w1,
                        'ProductQuantity', w1,
                        'PlanPrice', w1,
                        'Discount', w1
                    ]);
                }
                return _this;
            }
            ProductDetailsForm.formKey = 'Store.ProductDetails';
            return ProductDetailsForm;
        }(Serenity.PrefixedContext));
        Store.ProductDetailsForm = ProductDetailsForm;
    })(Store = Store_35.Store || (Store_35.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_36) {
    var Store;
    (function (Store) {
        var ProductDetailsRow;
        (function (ProductDetailsRow) {
            ProductDetailsRow.idProperty = 'DetailId';
            ProductDetailsRow.isActiveProperty = 'IsActive';
            ProductDetailsRow.localTextPrefix = 'Store.ProductDetails';
            ProductDetailsRow.deletePermission = 'Store:Product:Delete';
            ProductDetailsRow.insertPermission = 'Store:Product:View';
            ProductDetailsRow.readPermission = 'Store:Product:View';
            ProductDetailsRow.updatePermission = 'Store:Product:View';
        })(ProductDetailsRow = Store.ProductDetailsRow || (Store.ProductDetailsRow = {}));
    })(Store = Store_36.Store || (Store_36.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_37) {
    var Store;
    (function (Store) {
        var ProductDetailsService;
        (function (ProductDetailsService) {
            ProductDetailsService.baseUrl = 'Store/ProductDetails';
            [
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProductDetailsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProductDetailsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProductDetailsService = Store.ProductDetailsService || (Store.ProductDetailsService = {}));
    })(Store = Store_37.Store || (Store_37.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_38) {
    var Store;
    (function (Store) {
        var ProductLangRow;
        (function (ProductLangRow) {
            ProductLangRow.idProperty = 'Id';
            ProductLangRow.nameProperty = 'ProductName';
            ProductLangRow.localTextPrefix = 'Store.ProductLang';
            ProductLangRow.deletePermission = 'Store:General';
            ProductLangRow.insertPermission = 'Store:General';
            ProductLangRow.readPermission = 'Store:General';
            ProductLangRow.updatePermission = 'Store:General';
        })(ProductLangRow = Store.ProductLangRow || (Store.ProductLangRow = {}));
    })(Store = Store_38.Store || (Store_38.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_39) {
    var Store;
    (function (Store) {
        var ProductLangService;
        (function (ProductLangService) {
            ProductLangService.baseUrl = 'Store/ProductLang';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProductLangService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProductLangService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProductLangService = Store.ProductLangService || (Store.ProductLangService = {}));
    })(Store = Store_39.Store || (Store_39.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_40) {
    var Store;
    (function (Store) {
        var ProductMovementColumns = /** @class */ (function () {
            function ProductMovementColumns() {
            }
            ProductMovementColumns.columnsKey = 'Store.ProductMovement';
            return ProductMovementColumns;
        }());
        Store.ProductMovementColumns = ProductMovementColumns;
    })(Store = Store_40.Store || (Store_40.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_41) {
    var Store;
    (function (Store) {
        var ProductMovementDetailsColumns = /** @class */ (function () {
            function ProductMovementDetailsColumns() {
            }
            ProductMovementDetailsColumns.columnsKey = 'Store.ProductMovementDetails';
            return ProductMovementDetailsColumns;
        }());
        Store.ProductMovementDetailsColumns = ProductMovementDetailsColumns;
    })(Store = Store_41.Store || (Store_41.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_42) {
    var Store;
    (function (Store) {
        var ProductMovementDetailsForm = /** @class */ (function (_super) {
            __extends(ProductMovementDetailsForm, _super);
            function ProductMovementDetailsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProductMovementDetailsForm.init) {
                    ProductMovementDetailsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.DecimalEditor;
                    Q.initFormType(ProductMovementDetailsForm, [
                        'ProductId', w0,
                        'Quantity', w1,
                        'SinglePrice', w1,
                        'Discount', w1,
                        'RetailValue', w1,
                        'VAT', w1,
                        'TotalValue', w1
                    ]);
                }
                return _this;
            }
            ProductMovementDetailsForm.formKey = 'Store.ProductMovementDetails';
            return ProductMovementDetailsForm;
        }(Serenity.PrefixedContext));
        Store.ProductMovementDetailsForm = ProductMovementDetailsForm;
    })(Store = Store_42.Store || (Store_42.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_43) {
    var Store;
    (function (Store) {
        var ProductMovementDetailsRow;
        (function (ProductMovementDetailsRow) {
            ProductMovementDetailsRow.idProperty = 'DetailId';
            ProductMovementDetailsRow.isActiveProperty = 'IsActive';
            ProductMovementDetailsRow.localTextPrefix = 'Store.ProductMovementDetails';
            ProductMovementDetailsRow.deletePermission = 'Store:Product:Delete';
            ProductMovementDetailsRow.insertPermission = 'Store:Product:Modify';
            ProductMovementDetailsRow.readPermission = 'Store:Product:View';
            ProductMovementDetailsRow.updatePermission = 'Store:Product:Modify';
        })(ProductMovementDetailsRow = Store.ProductMovementDetailsRow || (Store.ProductMovementDetailsRow = {}));
    })(Store = Store_43.Store || (Store_43.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_44) {
    var Store;
    (function (Store) {
        var ProductMovementDetailsService;
        (function (ProductMovementDetailsService) {
            ProductMovementDetailsService.baseUrl = 'Store/ProductMovementDetails';
            [
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProductMovementDetailsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProductMovementDetailsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProductMovementDetailsService = Store.ProductMovementDetailsService || (Store.ProductMovementDetailsService = {}));
    })(Store = Store_44.Store || (Store_44.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_45) {
    var Store;
    (function (Store) {
        var ProductMovementDocRow;
        (function (ProductMovementDocRow) {
            ProductMovementDocRow.idProperty = 'ProductMoveId';
            ProductMovementDocRow.nameProperty = 'DocumentNumber';
            ProductMovementDocRow.localTextPrefix = 'Store.ProductMovementDoc';
            ProductMovementDocRow.deletePermission = 'Store:Product:Delete';
            ProductMovementDocRow.insertPermission = 'Store:Product:Modify';
            ProductMovementDocRow.readPermission = 'Store:Product:View';
            ProductMovementDocRow.updatePermission = 'Store:Product:Modify';
        })(ProductMovementDocRow = Store.ProductMovementDocRow || (Store.ProductMovementDocRow = {}));
    })(Store = Store_45.Store || (Store_45.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_46) {
    var Store;
    (function (Store) {
        var ProductMovementForm = /** @class */ (function (_super) {
            __extends(ProductMovementForm, _super);
            function ProductMovementForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProductMovementForm.init) {
                    ProductMovementForm.init = true;
                    var s = Serenity;
                    var w0 = Store.OperationTypeEditor;
                    var w1 = s.DateEditor;
                    var w2 = Store.ShopsEditor;
                    var w3 = Store.CounterpartiesEditor;
                    var w4 = s.LookupEditor;
                    var w5 = s.StringEditor;
                    var w6 = s.DecimalEditor;
                    var w7 = Store.ProductMovementDetailsEditor;
                    Q.initFormType(ProductMovementForm, [
                        'OperationTypeId', w0,
                        'OrderDate', w1,
                        'ShopId', w2,
                        'CounterpartyId', w3,
                        'EmployeeId', w4,
                        'RequiredDate', w1,
                        'ShipperId', w4,
                        'ShippedDate', w1,
                        'DocumentTypeId', w4,
                        'DocumentNumber', w5,
                        'DocumentDate', w1,
                        'Value', w6,
                        'VAT', w6,
                        'Total', w6,
                        'DetailList', w7
                    ]);
                }
                return _this;
            }
            ProductMovementForm.formKey = 'Store.ProductMovement';
            return ProductMovementForm;
        }(Serenity.PrefixedContext));
        Store.ProductMovementForm = ProductMovementForm;
    })(Store = Store_46.Store || (Store_46.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_47) {
    var Store;
    (function (Store) {
        var ProductMovementOperations;
        (function (ProductMovementOperations) {
            ProductMovementOperations[ProductMovementOperations["IncomeItems"] = 200] = "IncomeItems";
            ProductMovementOperations[ProductMovementOperations["StockDelivery"] = 202] = "StockDelivery";
            ProductMovementOperations[ProductMovementOperations["SurplusGoods"] = 203] = "SurplusGoods";
            ProductMovementOperations[ProductMovementOperations["SaleOfArticles"] = 401] = "SaleOfArticles";
            ProductMovementOperations[ProductMovementOperations["LackOfItems"] = 402] = "LackOfItems";
            ProductMovementOperations[ProductMovementOperations["Scrappingarticles"] = 403] = "Scrappingarticles";
        })(ProductMovementOperations = Store.ProductMovementOperations || (Store.ProductMovementOperations = {}));
        Serenity.Decorators.registerEnumType(ProductMovementOperations, 'Store.Store.ProductMovementOperations', 'Store.ProductMovementOperations');
    })(Store = Store_47.Store || (Store_47.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_48) {
    var Store;
    (function (Store) {
        var ProductMovementRow;
        (function (ProductMovementRow) {
            ProductMovementRow.idProperty = 'ProductMoveId';
            ProductMovementRow.isActiveProperty = 'IsActive';
            ProductMovementRow.nameProperty = 'ShopId';
            ProductMovementRow.localTextPrefix = 'Store.ProductMovement';
            ProductMovementRow.lookupKey = 'Store.ProductMovement';
            function getLookup() {
                return Q.getLookup('Store.ProductMovement');
            }
            ProductMovementRow.getLookup = getLookup;
            ProductMovementRow.deletePermission = 'Store:Product:Delete';
            ProductMovementRow.insertPermission = 'Store:Product:Modify';
            ProductMovementRow.readPermission = 'Store:Product:View';
            ProductMovementRow.updatePermission = 'Store:Product:Modify';
        })(ProductMovementRow = Store.ProductMovementRow || (Store.ProductMovementRow = {}));
    })(Store = Store_48.Store || (Store_48.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_49) {
    var Store;
    (function (Store) {
        var ProductMovementService;
        (function (ProductMovementService) {
            ProductMovementService.baseUrl = 'Store/ProductMovement';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProductMovementService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProductMovementService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProductMovementService = Store.ProductMovementService || (Store.ProductMovementService = {}));
    })(Store = Store_49.Store || (Store_49.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_50) {
    var Store;
    (function (Store) {
        var ProductMovementTotalRow;
        (function (ProductMovementTotalRow) {
            ProductMovementTotalRow.idProperty = 'ProductMoveId';
            ProductMovementTotalRow.localTextPrefix = 'Store.ProductMovementTotal';
            ProductMovementTotalRow.deletePermission = 'Store:Product:Delete';
            ProductMovementTotalRow.insertPermission = 'Store:Product:Modify';
            ProductMovementTotalRow.readPermission = 'Store:Product:View';
            ProductMovementTotalRow.updatePermission = 'Store:Product:Modify';
        })(ProductMovementTotalRow = Store.ProductMovementTotalRow || (Store.ProductMovementTotalRow = {}));
    })(Store = Store_50.Store || (Store_50.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_51) {
    var Store;
    (function (Store) {
        var ProductsColumns = /** @class */ (function () {
            function ProductsColumns() {
            }
            ProductsColumns.columnsKey = 'Store.Products';
            return ProductsColumns;
        }());
        Store.ProductsColumns = ProductsColumns;
    })(Store = Store_51.Store || (Store_51.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_52) {
    var Store;
    (function (Store) {
        var ProductsExcelImportForm = /** @class */ (function (_super) {
            __extends(ProductsExcelImportForm, _super);
            function ProductsExcelImportForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProductsExcelImportForm.init) {
                    ProductsExcelImportForm.init = true;
                    var s = Serenity;
                    var w0 = s.ImageUploadEditor;
                    Q.initFormType(ProductsExcelImportForm, [
                        'FileName', w0
                    ]);
                }
                return _this;
            }
            ProductsExcelImportForm.formKey = 'Store.ProductsExcelImport';
            return ProductsExcelImportForm;
        }(Serenity.PrefixedContext));
        Store.ProductsExcelImportForm = ProductsExcelImportForm;
    })(Store = Store_52.Store || (Store_52.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_53) {
    var Store;
    (function (Store) {
        var ProductsForm = /** @class */ (function (_super) {
            __extends(ProductsForm, _super);
            function ProductsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProductsForm.init) {
                    ProductsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.BooleanEditor;
                    var w4 = Store.CounterpartiesEditor;
                    var w5 = s.DecimalEditor;
                    var w6 = Store.ProductDetailsEditor;
                    var w7 = s.IntegerEditor;
                    Q.initFormType(ProductsForm, [
                        'CategoryId', w0,
                        'ProductCode', w1,
                        'ProductBarcode', w1,
                        'ProductLabel', w1,
                        'ProductName', w1,
                        'MeasureId', w0,
                        'ProductImage', w2,
                        'Discontinued', w3,
                        'CounterpartyId', w4,
                        'UnitPrice', w5,
                        'DetailList', w6,
                        'UnitsInStock', w7,
                        'UnitsOnOrder', w7,
                        'ReorderLevel', w7
                    ]);
                }
                return _this;
            }
            ProductsForm.formKey = 'Store.Products';
            return ProductsForm;
        }(Serenity.PrefixedContext));
        Store.ProductsForm = ProductsForm;
    })(Store = Store_53.Store || (Store_53.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_54) {
    var Store;
    (function (Store) {
        var ProductsLogRow;
        (function (ProductsLogRow) {
            ProductsLogRow.idProperty = 'ProductLogId';
            ProductsLogRow.localTextPrefix = 'Store.ProductsLog';
            ProductsLogRow.deletePermission = null;
            ProductsLogRow.insertPermission = null;
            ProductsLogRow.readPermission = '';
            ProductsLogRow.updatePermission = null;
        })(ProductsLogRow = Store.ProductsLogRow || (Store.ProductsLogRow = {}));
    })(Store = Store_54.Store || (Store_54.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_55) {
    var Store;
    (function (Store) {
        var ProductsRow;
        (function (ProductsRow) {
            ProductsRow.idProperty = 'ProductId';
            ProductsRow.isActiveProperty = 'IsActive';
            ProductsRow.nameProperty = 'ProductName';
            ProductsRow.localTextPrefix = 'Store.Products';
            ProductsRow.lookupKey = 'Store.Product';
            function getLookup() {
                return Q.getLookup('Store.Product');
            }
            ProductsRow.getLookup = getLookup;
            ProductsRow.deletePermission = 'Store:Product:Delete';
            ProductsRow.insertPermission = 'Store:Product:Modify';
            ProductsRow.readPermission = 'Store:Product:View';
            ProductsRow.updatePermission = 'Store:Product:Modify';
        })(ProductsRow = Store.ProductsRow || (Store.ProductsRow = {}));
    })(Store = Store_55.Store || (Store_55.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_56) {
    var Store;
    (function (Store) {
        var ProductsService;
        (function (ProductsService) {
            ProductsService.baseUrl = 'Store/Products';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'ExcelImport'
            ].forEach(function (x) {
                ProductsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProductsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProductsService = Store.ProductsService || (Store.ProductsService = {}));
    })(Store = Store_56.Store || (Store_56.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_57) {
    var Store;
    (function (Store) {
        var ShippersColumns = /** @class */ (function () {
            function ShippersColumns() {
            }
            ShippersColumns.columnsKey = 'Store.Shippers';
            return ShippersColumns;
        }());
        Store.ShippersColumns = ShippersColumns;
    })(Store = Store_57.Store || (Store_57.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_58) {
    var Store;
    (function (Store) {
        var ShippersForm = /** @class */ (function (_super) {
            __extends(ShippersForm, _super);
            function ShippersForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ShippersForm.init) {
                    ShippersForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(ShippersForm, [
                        'CompanyName', w0,
                        'Phone', w0
                    ]);
                }
                return _this;
            }
            ShippersForm.formKey = 'Store.Shippers';
            return ShippersForm;
        }(Serenity.PrefixedContext));
        Store.ShippersForm = ShippersForm;
    })(Store = Store_58.Store || (Store_58.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_59) {
    var Store;
    (function (Store) {
        var ShippersRow;
        (function (ShippersRow) {
            ShippersRow.idProperty = 'ShipperId';
            ShippersRow.isActiveProperty = 'IsActive';
            ShippersRow.nameProperty = 'CompanyName';
            ShippersRow.localTextPrefix = 'Store.Shippers';
            ShippersRow.lookupKey = 'Store.Shipper';
            function getLookup() {
                return Q.getLookup('Store.Shipper');
            }
            ShippersRow.getLookup = getLookup;
            ShippersRow.deletePermission = 'Store:General';
            ShippersRow.insertPermission = 'Store:General';
            ShippersRow.readPermission = 'Store:General';
            ShippersRow.updatePermission = 'Store:General';
        })(ShippersRow = Store.ShippersRow || (Store.ShippersRow = {}));
    })(Store = Store_59.Store || (Store_59.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_60) {
    var Store;
    (function (Store) {
        var ShippersService;
        (function (ShippersService) {
            ShippersService.baseUrl = 'Store/Shippers';
            [
                'Create',
                'Update',
                'Delete',
                'Undelete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ShippersService[x] = function (r, s, o) {
                    return Q.serviceRequest(ShippersService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ShippersService = Store.ShippersService || (Store.ShippersService = {}));
    })(Store = Store_60.Store || (Store_60.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_61) {
    var Store;
    (function (Store) {
        var ShippingState;
        (function (ShippingState) {
            ShippingState[ShippingState["NotShipped"] = 0] = "NotShipped";
            ShippingState[ShippingState["Shipped"] = 1] = "Shipped";
        })(ShippingState = Store.ShippingState || (Store.ShippingState = {}));
        Serenity.Decorators.registerEnumType(ShippingState, 'Store.Store.ShippingState', 'Store.ShippingState');
    })(Store = Store_61.Store || (Store_61.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_62) {
    var Store;
    (function (Store) {
        var ShopsColumns = /** @class */ (function () {
            function ShopsColumns() {
            }
            ShopsColumns.columnsKey = 'Store.Shops';
            return ShopsColumns;
        }());
        Store.ShopsColumns = ShopsColumns;
    })(Store = Store_62.Store || (Store_62.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_63) {
    var Store;
    (function (Store) {
        var ShopsForm = /** @class */ (function (_super) {
            __extends(ShopsForm, _super);
            function ShopsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ShopsForm.init) {
                    ShopsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = Store.PhoneEditor;
                    Q.initFormType(ShopsForm, [
                        'ShopId', w0,
                        'ShopName', w0,
                        'ContactName', w0,
                        'ContactTitle', w0,
                        'Address', w0,
                        'Country', w0,
                        'City', w0,
                        'Region', w0,
                        'PostalCode', w0,
                        'Phone', w1
                    ]);
                }
                return _this;
            }
            ShopsForm.formKey = 'Store.Shops';
            return ShopsForm;
        }(Serenity.PrefixedContext));
        Store.ShopsForm = ShopsForm;
    })(Store = Store_63.Store || (Store_63.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_64) {
    var Store;
    (function (Store) {
        var ShopsRow;
        (function (ShopsRow) {
            ShopsRow.idProperty = 'Id';
            ShopsRow.isActiveProperty = 'IsActive';
            ShopsRow.nameProperty = 'ShopName';
            ShopsRow.localTextPrefix = 'Store.Shops';
            ShopsRow.lookupKey = 'Store.Shops';
            function getLookup() {
                return Q.getLookup('Store.Shops');
            }
            ShopsRow.getLookup = getLookup;
            ShopsRow.deletePermission = 'Store:Shops:Delete';
            ShopsRow.insertPermission = 'Store:Shops:Modify';
            ShopsRow.readPermission = 'Store:Shops:View';
            ShopsRow.updatePermission = 'Store:Shops:Modify';
        })(ShopsRow = Store.ShopsRow || (Store.ShopsRow = {}));
    })(Store = Store_64.Store || (Store_64.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_65) {
    var Store;
    (function (Store) {
        var ShopsService;
        (function (ShopsService) {
            ShopsService.baseUrl = 'Store/Shops';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ShopsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ShopsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ShopsService = Store.ShopsService || (Store.ShopsService = {}));
    })(Store = Store_65.Store || (Store_65.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_66) {
    var Store;
    (function (Store) {
        var StoreAverageForm = /** @class */ (function (_super) {
            __extends(StoreAverageForm, _super);
            function StoreAverageForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!StoreAverageForm.init) {
                    StoreAverageForm.init = true;
                    var s = Serenity;
                    var w0 = s.ImageUploadEditor;
                    Q.initFormType(StoreAverageForm, [
                        'FileName', w0
                    ]);
                }
                return _this;
            }
            StoreAverageForm.formKey = 'Store.StoreAverage';
            return StoreAverageForm;
        }(Serenity.PrefixedContext));
        Store.StoreAverageForm = StoreAverageForm;
    })(Store = Store_66.Store || (Store_66.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_67) {
    var Store;
    (function (Store) {
        var WarehouseColumns = /** @class */ (function () {
            function WarehouseColumns() {
            }
            WarehouseColumns.columnsKey = 'Store.Warehouse';
            return WarehouseColumns;
        }());
        Store.WarehouseColumns = WarehouseColumns;
    })(Store = Store_67.Store || (Store_67.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_68) {
    var Store;
    (function (Store) {
        var WarehouseForm = /** @class */ (function (_super) {
            __extends(WarehouseForm, _super);
            function WarehouseForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!WarehouseForm.init) {
                    WarehouseForm.init = true;
                    var s = Serenity;
                    var w0 = s.BooleanEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.StringEditor;
                    var w3 = s.DateEditor;
                    var w4 = s.DecimalEditor;
                    Q.initFormType(WarehouseForm, [
                        'WaresMode', w0,
                        'MoveId', w1,
                        'ShopId', w1,
                        'WaresId', w1,
                        'Key', w2,
                        'Date', w3,
                        'OperationId', w1,
                        'IncomeQuantity', w4,
                        'IncomeSinglePrice', w4,
                        'IncomeValue', w4,
                        'ExpenceQuantity', w4,
                        'ExpenceSinglePrice', w4,
                        'ExpenceValue', w4,
                        'RestQuantity', w4,
                        'RestSinglePrice', w4,
                        'RestValue', w4,
                        'ReCost', w4,
                        'Mistake', w0
                    ]);
                }
                return _this;
            }
            WarehouseForm.formKey = 'Store.Warehouse';
            return WarehouseForm;
        }(Serenity.PrefixedContext));
        Store.WarehouseForm = WarehouseForm;
    })(Store = Store_68.Store || (Store_68.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_69) {
    var Store;
    (function (Store) {
        var WarehouseRow;
        (function (WarehouseRow) {
            WarehouseRow.idProperty = 'Position';
            WarehouseRow.isActiveProperty = 'IsActive';
            WarehouseRow.nameProperty = 'Key';
            WarehouseRow.localTextPrefix = 'Store.Warehouse';
            WarehouseRow.deletePermission = 'Store:General';
            WarehouseRow.insertPermission = 'Store:General';
            WarehouseRow.readPermission = 'Store:General';
            WarehouseRow.updatePermission = 'Store:General';
        })(WarehouseRow = Store.WarehouseRow || (Store.WarehouseRow = {}));
    })(Store = Store_69.Store || (Store_69.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_70) {
    var Store;
    (function (Store) {
        var WarehouseService;
        (function (WarehouseService) {
            WarehouseService.baseUrl = 'Store/Warehouse';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Warehouse'
            ].forEach(function (x) {
                WarehouseService[x] = function (r, s, o) {
                    return Q.serviceRequest(WarehouseService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(WarehouseService = Store.WarehouseService || (Store.WarehouseService = {}));
    })(Store = Store_70.Store || (Store_70.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_71) {
    var Store;
    (function (Store) {
        var WaresColumns = /** @class */ (function () {
            function WaresColumns() {
            }
            WaresColumns.columnsKey = 'Store.Wares';
            return WaresColumns;
        }());
        Store.WaresColumns = WaresColumns;
    })(Store = Store_71.Store || (Store_71.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_72) {
    var Store;
    (function (Store) {
        var WaresExcelImportForm = /** @class */ (function (_super) {
            __extends(WaresExcelImportForm, _super);
            function WaresExcelImportForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!WaresExcelImportForm.init) {
                    WaresExcelImportForm.init = true;
                    var s = Serenity;
                    var w0 = s.ImageUploadEditor;
                    Q.initFormType(WaresExcelImportForm, [
                        'FileName', w0
                    ]);
                }
                return _this;
            }
            WaresExcelImportForm.formKey = 'Store.WaresExcelImport';
            return WaresExcelImportForm;
        }(Serenity.PrefixedContext));
        Store.WaresExcelImportForm = WaresExcelImportForm;
    })(Store = Store_72.Store || (Store_72.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_73) {
    var Store;
    (function (Store) {
        var WaresForm = /** @class */ (function (_super) {
            __extends(WaresForm, _super);
            function WaresForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!WaresForm.init) {
                    WaresForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.BooleanEditor;
                    var w4 = Store.CounterpartiesEditor;
                    var w5 = s.DecimalEditor;
                    var w6 = s.IntegerEditor;
                    Q.initFormType(WaresForm, [
                        'CategoryId', w0,
                        'WaresCode', w1,
                        'WaresBarcode', w1,
                        'WaresLabel', w1,
                        'WaresName', w1,
                        'MeasureId', w0,
                        'WaresImage', w2,
                        'Discontinued', w3,
                        'CounterpartyId', w4,
                        'QuantityPerUnit', w5,
                        'UnitPrice', w5,
                        'AccountId', w6
                    ]);
                }
                return _this;
            }
            WaresForm.formKey = 'Store.Wares';
            return WaresForm;
        }(Serenity.PrefixedContext));
        Store.WaresForm = WaresForm;
    })(Store = Store_73.Store || (Store_73.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_74) {
    var Store;
    (function (Store) {
        var WaresLangRow;
        (function (WaresLangRow) {
            WaresLangRow.idProperty = 'Id';
            WaresLangRow.nameProperty = 'WaresName';
            WaresLangRow.localTextPrefix = 'Store.WaresLang';
            WaresLangRow.deletePermission = 'Store:General';
            WaresLangRow.insertPermission = 'Store:General';
            WaresLangRow.readPermission = 'Store:General';
            WaresLangRow.updatePermission = 'Store:General';
        })(WaresLangRow = Store.WaresLangRow || (Store.WaresLangRow = {}));
    })(Store = Store_74.Store || (Store_74.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_75) {
    var Store;
    (function (Store) {
        var WaresLangService;
        (function (WaresLangService) {
            WaresLangService.baseUrl = 'Store/WaresLang';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                WaresLangService[x] = function (r, s, o) {
                    return Q.serviceRequest(WaresLangService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(WaresLangService = Store.WaresLangService || (Store.WaresLangService = {}));
    })(Store = Store_75.Store || (Store_75.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_76) {
    var Store;
    (function (Store) {
        var WaresMovementColumns = /** @class */ (function () {
            function WaresMovementColumns() {
            }
            WaresMovementColumns.columnsKey = 'Store.WaresMovement';
            return WaresMovementColumns;
        }());
        Store.WaresMovementColumns = WaresMovementColumns;
    })(Store = Store_76.Store || (Store_76.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_77) {
    var Store;
    (function (Store) {
        var WaresMovementDetailsColumns = /** @class */ (function () {
            function WaresMovementDetailsColumns() {
            }
            WaresMovementDetailsColumns.columnsKey = 'Store.WaresMovementDetails';
            return WaresMovementDetailsColumns;
        }());
        Store.WaresMovementDetailsColumns = WaresMovementDetailsColumns;
    })(Store = Store_77.Store || (Store_77.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_78) {
    var Store;
    (function (Store) {
        var WaresMovementDetailsForm = /** @class */ (function (_super) {
            __extends(WaresMovementDetailsForm, _super);
            function WaresMovementDetailsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!WaresMovementDetailsForm.init) {
                    WaresMovementDetailsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.DecimalEditor;
                    Q.initFormType(WaresMovementDetailsForm, [
                        'WaresId', w0,
                        'SinglePrice', w1,
                        'Quantity', w1,
                        'Discount', w1
                    ]);
                }
                return _this;
            }
            WaresMovementDetailsForm.formKey = 'Store.WaresMovementDetails';
            return WaresMovementDetailsForm;
        }(Serenity.PrefixedContext));
        Store.WaresMovementDetailsForm = WaresMovementDetailsForm;
    })(Store = Store_78.Store || (Store_78.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_79) {
    var Store;
    (function (Store) {
        var WaresMovementDetailsRow;
        (function (WaresMovementDetailsRow) {
            WaresMovementDetailsRow.idProperty = 'DetailId';
            WaresMovementDetailsRow.isActiveProperty = 'IsActive';
            WaresMovementDetailsRow.localTextPrefix = 'Store.WaresMovementDetails';
            WaresMovementDetailsRow.deletePermission = 'Store:Wares:Delete';
            WaresMovementDetailsRow.insertPermission = 'Store:Wares:Modify';
            WaresMovementDetailsRow.readPermission = 'Store:Wares:View';
            WaresMovementDetailsRow.updatePermission = 'Store:Wares:Modify';
        })(WaresMovementDetailsRow = Store.WaresMovementDetailsRow || (Store.WaresMovementDetailsRow = {}));
    })(Store = Store_79.Store || (Store_79.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_80) {
    var Store;
    (function (Store) {
        var WaresMovementDetailsService;
        (function (WaresMovementDetailsService) {
            WaresMovementDetailsService.baseUrl = 'Store/WaresMovementDetails';
            [
                'Retrieve',
                'List'
            ].forEach(function (x) {
                WaresMovementDetailsService[x] = function (r, s, o) {
                    return Q.serviceRequest(WaresMovementDetailsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(WaresMovementDetailsService = Store.WaresMovementDetailsService || (Store.WaresMovementDetailsService = {}));
    })(Store = Store_80.Store || (Store_80.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_81) {
    var Store;
    (function (Store) {
        var WaresMovementDocRow;
        (function (WaresMovementDocRow) {
            WaresMovementDocRow.idProperty = 'WaresMoveId';
            WaresMovementDocRow.nameProperty = 'DocumentNumber';
            WaresMovementDocRow.localTextPrefix = 'Store.WaresMovementDoc';
            WaresMovementDocRow.deletePermission = 'Store:Wares:Delete';
            WaresMovementDocRow.insertPermission = 'Store:Wares:Modify';
            WaresMovementDocRow.readPermission = 'Store:Wares:View';
            WaresMovementDocRow.updatePermission = 'Store:Wares:Modify';
        })(WaresMovementDocRow = Store.WaresMovementDocRow || (Store.WaresMovementDocRow = {}));
    })(Store = Store_81.Store || (Store_81.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_82) {
    var Store;
    (function (Store) {
        var WaresMovementForm = /** @class */ (function (_super) {
            __extends(WaresMovementForm, _super);
            function WaresMovementForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!WaresMovementForm.init) {
                    WaresMovementForm.init = true;
                    var s = Serenity;
                    var w0 = Store.OperationTypeEditor;
                    var w1 = s.DateEditor;
                    var w2 = Store.ShopsEditor;
                    var w3 = Store.CounterpartiesEditor;
                    var w4 = s.LookupEditor;
                    var w5 = s.StringEditor;
                    var w6 = Store.WaresMovementDetailsEditor;
                    Q.initFormType(WaresMovementForm, [
                        'OperationTypeId', w0,
                        'OrderDate', w1,
                        'ShopId', w2,
                        'CounterpartyId', w3,
                        'EmployeeId', w4,
                        'RequiredDate', w1,
                        'ShipperId', w4,
                        'ShippedDate', w1,
                        'DocumentTypeId', w4,
                        'DocumentNumber', w5,
                        'DocumentDate', w1,
                        'DetailList', w6
                    ]);
                }
                return _this;
            }
            WaresMovementForm.formKey = 'Store.WaresMovement';
            return WaresMovementForm;
        }(Serenity.PrefixedContext));
        Store.WaresMovementForm = WaresMovementForm;
    })(Store = Store_82.Store || (Store_82.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_83) {
    var Store;
    (function (Store) {
        var WaresMovementOperations;
        (function (WaresMovementOperations) {
            WaresMovementOperations[WaresMovementOperations["IncomeItems"] = 100] = "IncomeItems";
            WaresMovementOperations[WaresMovementOperations["InitialBalance"] = 101] = "InitialBalance";
            WaresMovementOperations[WaresMovementOperations["StockDelivery"] = 102] = "StockDelivery";
            WaresMovementOperations[WaresMovementOperations["SurplusGoods"] = 103] = "SurplusGoods";
            WaresMovementOperations[WaresMovementOperations["ExchangeRevenue"] = 105] = "ExchangeRevenue";
            WaresMovementOperations[WaresMovementOperations["UnsubscriptionOfGoods"] = 109] = "UnsubscriptionOfGoods";
            WaresMovementOperations[WaresMovementOperations["SaleOfArticles"] = 301] = "SaleOfArticles";
            WaresMovementOperations[WaresMovementOperations["LackOfItems"] = 302] = "LackOfItems";
            WaresMovementOperations[WaresMovementOperations["Scrappingarticles"] = 303] = "Scrappingarticles";
            WaresMovementOperations[WaresMovementOperations["ExchangeExpense"] = 305] = "ExchangeExpense";
            WaresMovementOperations[WaresMovementOperations["Inventory"] = 500] = "Inventory";
        })(WaresMovementOperations = Store.WaresMovementOperations || (Store.WaresMovementOperations = {}));
        Serenity.Decorators.registerEnumType(WaresMovementOperations, 'Store.Store.WaresMovementOperations', 'Store.WaresMovementOperations');
    })(Store = Store_83.Store || (Store_83.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_84) {
    var Store;
    (function (Store) {
        var WaresMovementRow;
        (function (WaresMovementRow) {
            WaresMovementRow.idProperty = 'WaresMoveId';
            WaresMovementRow.isActiveProperty = 'IsActive';
            WaresMovementRow.nameProperty = 'ShopId';
            WaresMovementRow.localTextPrefix = 'Store.WaresMovement';
            WaresMovementRow.lookupKey = 'Store.WaresMovement';
            function getLookup() {
                return Q.getLookup('Store.WaresMovement');
            }
            WaresMovementRow.getLookup = getLookup;
            WaresMovementRow.deletePermission = 'Store:Wares:Delete';
            WaresMovementRow.insertPermission = 'Store:Wares:Modify';
            WaresMovementRow.readPermission = 'Store:Wares:View';
            WaresMovementRow.updatePermission = 'Store:Wares:Modify';
        })(WaresMovementRow = Store.WaresMovementRow || (Store.WaresMovementRow = {}));
    })(Store = Store_84.Store || (Store_84.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_85) {
    var Store;
    (function (Store) {
        var WaresMovementService;
        (function (WaresMovementService) {
            WaresMovementService.baseUrl = 'Store/WaresMovement';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                WaresMovementService[x] = function (r, s, o) {
                    return Q.serviceRequest(WaresMovementService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(WaresMovementService = Store.WaresMovementService || (Store.WaresMovementService = {}));
    })(Store = Store_85.Store || (Store_85.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_86) {
    var Store;
    (function (Store) {
        var WaresMovementTotalRow;
        (function (WaresMovementTotalRow) {
            WaresMovementTotalRow.idProperty = 'WaresMoveId';
            WaresMovementTotalRow.localTextPrefix = 'Store.WaresMovementTotal';
            WaresMovementTotalRow.deletePermission = 'Store:Wares:Delete';
            WaresMovementTotalRow.insertPermission = 'Store:Wares:Modify';
            WaresMovementTotalRow.readPermission = 'Store:Wares:View';
            WaresMovementTotalRow.updatePermission = 'Store:Wares:Modify';
        })(WaresMovementTotalRow = Store.WaresMovementTotalRow || (Store.WaresMovementTotalRow = {}));
    })(Store = Store_86.Store || (Store_86.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_87) {
    var Store;
    (function (Store) {
        var WaresRow;
        (function (WaresRow) {
            WaresRow.idProperty = 'WaresId';
            WaresRow.isActiveProperty = 'IsActive';
            WaresRow.nameProperty = 'WaresName';
            WaresRow.localTextPrefix = 'Store.Wares';
            WaresRow.lookupKey = 'Store.Wares';
            function getLookup() {
                return Q.getLookup('Store.Wares');
            }
            WaresRow.getLookup = getLookup;
            WaresRow.deletePermission = 'Store:Wares:Delete';
            WaresRow.insertPermission = 'Store:Wares:Modify';
            WaresRow.readPermission = 'Store:Wares:View';
            WaresRow.updatePermission = 'Store:Wares:Modify';
        })(WaresRow = Store.WaresRow || (Store.WaresRow = {}));
    })(Store = Store_87.Store || (Store_87.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_88) {
    var Store;
    (function (Store) {
        var WaresService;
        (function (WaresService) {
            WaresService.baseUrl = 'Store/Wares';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'ExcelImport'
            ].forEach(function (x) {
                WaresService[x] = function (r, s, o) {
                    return Q.serviceRequest(WaresService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(WaresService = Store.WaresService || (Store.WaresService = {}));
    })(Store = Store_88.Store || (Store_88.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_89) {
    var Texts;
    (function (Texts) {
        Store_89.Store['Texts'] = Q.proxyTexts(Texts, '', { Db: { Administration: { Language: { Id: 1, LanguageId: 1, LanguageName: 1 }, Role: { RoleId: 1, RoleName: 1, TenantId: 1 }, RolePermission: { PermissionKey: 1, RoleId: 1, RolePermissionId: 1, RoleRoleName: 1 }, Tenant: { TenantId: 1, TenantName: 1 }, Translation: { CustomText: 1, EntityPlural: 1, Key: 1, OverrideConfirmation: 1, SaveChangesButton: 1, SourceLanguage: 1, SourceText: 1, TargetLanguage: 1, TargetText: 1 }, User: { DisplayName: 1, Email: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, LastDirectoryUpdate: 1, Password: 1, PasswordConfirm: 1, PasswordHash: 1, PasswordSalt: 1, Source: 1, TenantId: 1, TenantName: 1, UpdateDate: 1, UpdateUserId: 1, UserId: 1, UserImage: 1, Username: 1 }, UserPermission: { Granted: 1, PermissionKey: 1, User: 1, UserId: 1, UserPermissionId: 1, Username: 1 }, UserRole: { RoleId: 1, User: 1, UserId: 1, UserRoleId: 1, Username: 1 } }, Store: { Categories: { CategoryCode: 1, CategoryId: 1, CategoryName: 1, CategoryType: 1, CategoryTypeId: 1, Description: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, Picture: 1, TenantId: 1, Type: 1, UpdateDate: 1, UpdateUserId: 1 }, CategoriesLang: { CategoryId: 1, CategoryName: 1, Description: 1, Id: 1, LanguageId: 1 }, CategoriesType: { CategoryType: 1, CategoryTypeId: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, TenantId: 1, Type: 1, UpdateDate: 1, UpdateUserId: 1 }, Counterparties: { Address: 1, City: 1, CompanyName: 1, ContactName: 1, ContactTitle: 1, CounterpartyId: 1, Country: 1, Email: 1, Id: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, LastContactDate: 1, LastContactedBy: 1, NotesList: 1, Phone: 1, PostalCode: 1, Region: 1, Representatives: 1, SendBulletin: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1 }, CounterpartyDetails: { Email: 1, Id: 1, LastContactDate: 1, LastContactedBy: 1, LastContactedByAddress: 1, LastContactedByBirthDate: 1, LastContactedByCity: 1, LastContactedByCountry: 1, LastContactedByExtension: 1, LastContactedByFirstName: 1, LastContactedByHireDate: 1, LastContactedByHomePhone: 1, LastContactedByLastName: 1, LastContactedByNotes: 1, LastContactedByPhoto: 1, LastContactedByPhotoPath: 1, LastContactedByPostalCode: 1, LastContactedByRegion: 1, LastContactedByReportsTo: 1, LastContactedByTitle: 1, LastContactedByTitleOfCourtesy: 1, SendBulletin: 1 }, CounterpartyRepresentatives: { CounterpartyId: 1, EmployeeId: 1, RepresentativeId: 1 }, DocumentType: { DocumentName: 1, DocumentTypeId: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1 }, Employees: { Address: 1, BirthDate: 1, City: 1, Country: 1, EmployeeId: 1, Extension: 1, FirstName: 1, FullName: 1, Gender: 1, HireDate: 1, HomePhone: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, LastName: 1, Notes: 1, Photo: 1, PhotoPath: 1, PostalCode: 1, Region: 1, ReportsTo: 1, ReportsToAddress: 1, ReportsToBirthDate: 1, ReportsToCity: 1, ReportsToCountry: 1, ReportsToExtension: 1, ReportsToFirstName: 1, ReportsToFullName: 1, ReportsToHireDate: 1, ReportsToHomePhone: 1, ReportsToLastName: 1, ReportsToNotes: 1, ReportsToPhoto: 1, ReportsToPhotoPath: 1, ReportsToPostalCode: 1, ReportsToRegion: 1, ReportsToReportsTo: 1, ReportsToTitle: 1, ReportsToTitleOfCourtesy: 1, TenantId: 1, Title: 1, TitleOfCourtesy: 1, UpdateDate: 1, UpdateUserId: 1 }, Measures: { InsertDate: 1, InsertUserId: 1, IsActive: 1, MeasureId: 1, MeasureName: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1 }, Notes: { EntityId: 1, EntityType: 1, InsertDate: 1, InsertUserDisplayName: 1, InsertUserId: 1, NoteId: 1, Text: 1 }, OperationType: { InsertDate: 1, InsertUserId: 1, IsActive: 1, OpCode: 1, Operation: 1, OperationTypeId: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1 }, ProductDetails: { DetailId: 1, Discount: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, LineTotal: 1, PlanPrice: 1, ProductCategoryId: 1, ProductDiscontinued: 1, ProductId: 1, ProductName: 1, ProductQuantity: 1, ProductQuantityPerUnit: 1, ProductReorderLevel: 1, ProductUnitPrice: 1, ProductUnitsInStock: 1, ProductUnitsOnOrder: 1, Quantity: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1, WaresAccountId: 1, WaresBarcode: 1, WaresCategoryId: 1, WaresCode: 1, WaresDiscontinued: 1, WaresId: 1, WaresImage: 1, WaresLabel: 1, WaresMeasureId: 1, WaresName: 1, WaresQuantityPerUnit: 1, WaresUnitPrice: 1 }, ProductLang: { Id: 1, LanguageId: 1, ProductId: 1, ProductName: 1 }, ProductMovement: { CounterpartyCity: 1, CounterpartyCompanyName: 1, CounterpartyContactName: 1, CounterpartyContactTitle: 1, CounterpartyCountry: 1, CounterpartyId: 1, CounterpartyPhone: 1, CounterpartyRegion: 1, DetailList: 1, DocumentDate: 1, DocumentNumber: 1, DocumentTypeId: 1, EmployeeFullName: 1, EmployeeGender: 1, EmployeeId: 1, EmployeeReportsToFullName: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, OperationTypeId: 1, OperationTypeOpCode: 1, OperationTypeOperation: 1, OrderDate: 1, ProductMoveId: 1, RequiredDate: 1, ShippedDate: 1, ShipperCompanyName: 1, ShipperId: 1, ShipperPhone: 1, ShippingState: 1, ShopAddress: 1, ShopCity: 1, ShopContactName: 1, ShopContactTitle: 1, ShopCountry: 1, ShopId: 1, ShopPhone: 1, ShopPostalCode: 1, ShopRegion: 1, ShopShopName: 1, TenantId: 1, Total: 1, UpdateDate: 1, UpdateUserId: 1, VAT: 1, Value: 1 }, ProductMovementDetails: { DetailId: 1, Discount: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, ProductCategoryId: 1, ProductCode: 1, ProductCounterpartyId: 1, ProductDiscontinued: 1, ProductId: 1, ProductMoveCounterpartyId: 1, ProductMoveEmployeeId: 1, ProductMoveId: 1, ProductMoveOperationTypeId: 1, ProductMoveOrderDate: 1, ProductMoveRequiredDate: 1, ProductMoveShippedDate: 1, ProductMoveShipperId: 1, ProductMoveShopId: 1, ProductName: 1, ProductQuantityPerUnit: 1, ProductReorderLevel: 1, ProductUnitPrice: 1, ProductUnitsInStock: 1, ProductUnitsOnOrder: 1, Quantity: 1, RetailValue: 1, SinglePrice: 1, TenantId: 1, TotalValue: 1, UpdateDate: 1, UpdateUserId: 1, VAT: 1 }, ProductMovementDoc: { DocumentDate: 1, DocumentNumber: 1, DocumentTypeDocumentName: 1, DocumentTypeId: 1, ProductMoveId: 1 }, ProductMovementTotal: { ProductMoveId: 1, Total: 1, VAT: 1, Value: 1 }, Products: { CategoryCategoryName: 1, CategoryDescription: 1, CategoryId: 1, CounterpartyCity: 1, CounterpartyCompanyName: 1, CounterpartyContactName: 1, CounterpartyContactTitle: 1, CounterpartyCountry: 1, CounterpartyId: 1, CounterpartyPhone: 1, CounterpartyRegion: 1, DetailList: 1, Discontinued: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, MeasureId: 1, MeasureMeasureName: 1, ProductBarcode: 1, ProductCode: 1, ProductId: 1, ProductImage: 1, ProductLabel: 1, ProductName: 1, QuantityPerUnit: 1, ReorderLevel: 1, TenantId: 1, UnitPrice: 1, UnitsInStock: 1, UnitsOnOrder: 1, UpdateDate: 1, UpdateUserId: 1 }, ProductsLog: { CategoryId: 1, ChangingUserId: 1, CounterpartyId: 1, Discontinued: 1, OperationType: 1, ProductId: 1, ProductImage: 1, ProductLogId: 1, ProductName: 1, QuantityPerUnit: 1, ReorderLevel: 1, UnitPrice: 1, UnitsInStock: 1, UnitsOnOrder: 1, ValidFrom: 1, ValidUntil: 1 }, Shippers: { CompanyName: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, Phone: 1, ShipperId: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1 }, Shops: { Address: 1, City: 1, ContactName: 1, ContactTitle: 1, Country: 1, Id: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, Phone: 1, PostalCode: 1, Region: 1, ShopId: 1, ShopName: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1 }, Warehouse: { AExpenceSinglePrice: 1, AExpenceValue: 1, AIncomeSinglePrice: 1, AIncomeValue: 1, AMistake: 1, AReCost: 1, ARestQuantity: 1, ARestSinglePrice: 1, ARestValue: 1, Date: 1, ExpenceQuantity: 1, ExpenceSinglePrice: 1, ExpenceValue: 1, IncomeQuantity: 1, IncomeSinglePrice: 1, IncomeValue: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, Key: 1, Mistake: 1, MoveId: 1, OperationId: 1, Position: 1, ReCost: 1, RestQuantity: 1, RestSinglePrice: 1, RestValue: 1, ShopId: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1, WaresId: 1, WaresMode: 1 }, Wares: { AccountId: 1, CategoryCategoryName: 1, CategoryDescription: 1, CategoryId: 1, CounterpartyCity: 1, CounterpartyCompanyName: 1, CounterpartyContactName: 1, CounterpartyContactTitle: 1, CounterpartyCountry: 1, CounterpartyId: 1, CounterpartyPhone: 1, CounterpartyRegion: 1, Discontinued: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, MeasureId: 1, MeasureName: 1, QuantityPerUnit: 1, TenantId: 1, Type: 1, UnitPrice: 1, UnitsInStock: 1, UnitsOnOrder: 1, UpdateDate: 1, UpdateUserId: 1, WaresBarcode: 1, WaresCode: 1, WaresId: 1, WaresImage: 1, WaresLabel: 1, WaresName: 1 }, WaresLang: { Description: 1, Id: 1, LanguageId: 1, WaresId: 1, WaresName: 1 }, WaresMovement: { CounterpartyCity: 1, CounterpartyCompanyName: 1, CounterpartyContactName: 1, CounterpartyContactTitle: 1, CounterpartyCountry: 1, CounterpartyId: 1, CounterpartyPhone: 1, CounterpartyRegion: 1, DetailList: 1, DocumentDate: 1, DocumentNumber: 1, DocumentTypeId: 1, EmployeeFullName: 1, EmployeeGender: 1, EmployeeId: 1, EmployeeReportsToFullName: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, OperationTypeId: 1, OperationTypeOpCode: 1, OperationTypeOperation: 1, OrderDate: 1, RequiredDate: 1, ShippedDate: 1, ShipperCompanyName: 1, ShipperId: 1, ShipperPhone: 1, ShippingState: 1, ShopAddress: 1, ShopCity: 1, ShopContactName: 1, ShopContactTitle: 1, ShopCountry: 1, ShopId: 1, ShopPhone: 1, ShopPostalCode: 1, ShopRegion: 1, ShopShopName: 1, TenantId: 1, Total: 1, UpdateDate: 1, UpdateUserId: 1, VAT: 1, Value: 1, WaresMoveId: 1 }, WaresMovementDetails: { DetailId: 1, Discount: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, LineTotal: 1, LineVAT: 1, LineValue: 1, Quantity: 1, SinglePrice: 1, TenantId: 1, UpdateDate: 1, UpdateUserId: 1, WaresCategoryId: 1, WaresCode: 1, WaresCounterpartyId: 1, WaresId: 1, WaresMeasureId: 1, WaresMeasureName: 1, WaresMoveCounterpartyId: 1, WaresMoveEmployeeId: 1, WaresMoveId: 1, WaresMoveOperationTypeId: 1, WaresMoveOrderDate: 1, WaresMoveRequiredDate: 1, WaresMoveShippedDate: 1, WaresMoveShopId: 1, WaresName: 1, WaresQuantityPerUnit: 1, WaresUnitPrice: 1 }, WaresMovementDoc: { DocumentDate: 1, DocumentNumber: 1, DocumentTypeDocumentName: 1, DocumentTypeId: 1, WaresMoveId: 1 }, WaresMovementTotal: { Total: 1, VAT: 1, Value: 1, WaresMoveId: 1 } } }, Forms: { Membership: { ChangePassword: { FormTitle: 1, SubmitButton: 1, Success: 1 }, ForgotPassword: { BackToLogin: 1, FormInfo: 1, FormTitle: 1, SubmitButton: 1, Success: 1 }, Login: { FacebookButton: 1, ForgotPassword: 1, GoogleButton: 1, LoginToYourAccount: 1, OR: 1, RememberMe: 1, SignInButton: 1, SignUpButton: 1 }, ResetPassword: { BackToLogin: 1, EmailSubject: 1, FormTitle: 1, SubmitButton: 1, Success: 1 }, SignUp: { AcceptTerms: 1, ActivateEmailSubject: 1, ActivationCompleteMessage: 1, BackToLogin: 1, ConfirmEmail: 1, ConfirmPassword: 1, DisplayName: 1, Email: 1, FormInfo: 1, FormTitle: 1, Password: 1, SubmitButton: 1, Success: 1 } } }, Navigation: { LogoutLink: 1, SiteTitle: 1 }, Site: { AccessDenied: { ClickToChangeUser: 1, ClickToLogin: 1, LackPermissions: 1, NotLoggedIn: 1, PageTitle: 1 }, BasicProgressDialog: { CancelTitle: 1, PleaseWait: 1 }, BulkServiceAction: { AllHadErrorsFormat: 1, AllSuccessFormat: 1, ConfirmationFormat: 1, ErrorCount: 1, NothingToProcess: 1, SomeHadErrorsFormat: 1, SuccessCount: 1 }, Dashboard: { ContentDescription: 1 }, Layout: { FooterCopyright: 1, FooterInfo: 1, FooterRights: 1, GeneralSettings: 1, Language: 1, Theme: 1, ThemeBlack: 1, ThemeBlackLight: 1, ThemeBlue: 1, ThemeBlueLight: 1, ThemeGreen: 1, ThemeGreenLight: 1, ThemePurple: 1, ThemePurpleLight: 1, ThemeRed: 1, ThemeRedLight: 1, ThemeYellow: 1, ThemeYellowLight: 1 }, RolePermissionDialog: { DialogTitle: 1, EditButton: 1, SaveSuccess: 1 }, UserDialog: { EditPermissionsButton: 1, EditRolesButton: 1 }, UserPermissionDialog: { DialogTitle: 1, Grant: 1, Permission: 1, Revoke: 1, SaveSuccess: 1 }, UserRoleDialog: { DialogTitle: 1, SaveSuccess: 1 }, ValidationError: { Title: 1 } }, Validation: { AuthenticationError: 1, CantFindUserWithEmail: 1, CurrentPasswordMismatch: 1, DeleteForeignKeyError: 1, EmailConfirm: 1, EmailInUse: 1, InvalidActivateToken: 1, InvalidResetToken: 1, MinRequiredPasswordLength: 1, SavePrimaryKeyError: 1 } });
    })(Texts = Store_89.Texts || (Store_89.Texts = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var LanguageDialog = /** @class */ (function (_super) {
            __extends(LanguageDialog, _super);
            function LanguageDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.LanguageForm(_this.idPrefix);
                return _this;
            }
            LanguageDialog.prototype.getFormKey = function () { return Administration.LanguageForm.formKey; };
            LanguageDialog.prototype.getIdProperty = function () { return Administration.LanguageRow.idProperty; };
            LanguageDialog.prototype.getLocalTextPrefix = function () { return Administration.LanguageRow.localTextPrefix; };
            LanguageDialog.prototype.getNameProperty = function () { return Administration.LanguageRow.nameProperty; };
            LanguageDialog.prototype.getService = function () { return Administration.LanguageService.baseUrl; };
            LanguageDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LanguageDialog);
            return LanguageDialog;
        }(Serenity.EntityDialog));
        Administration.LanguageDialog = LanguageDialog;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var LanguageGrid = /** @class */ (function (_super) {
            __extends(LanguageGrid, _super);
            function LanguageGrid(container) {
                return _super.call(this, container) || this;
            }
            LanguageGrid.prototype.getColumnsKey = function () { return "Administration.Language"; };
            LanguageGrid.prototype.getDialogType = function () { return Administration.LanguageDialog; };
            LanguageGrid.prototype.getIdProperty = function () { return Administration.LanguageRow.idProperty; };
            LanguageGrid.prototype.getLocalTextPrefix = function () { return Administration.LanguageRow.localTextPrefix; };
            LanguageGrid.prototype.getService = function () { return Administration.LanguageService.baseUrl; };
            LanguageGrid.prototype.getDefaultSortBy = function () {
                return ["LanguageName" /* LanguageName */];
            };
            LanguageGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LanguageGrid);
            return LanguageGrid;
        }(Serenity.EntityGrid));
        Administration.LanguageGrid = LanguageGrid;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RoleDialog = /** @class */ (function (_super) {
            __extends(RoleDialog, _super);
            function RoleDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.RoleForm(_this.idPrefix);
                return _this;
            }
            RoleDialog.prototype.getFormKey = function () { return Administration.RoleForm.formKey; };
            RoleDialog.prototype.getIdProperty = function () { return Administration.RoleRow.idProperty; };
            RoleDialog.prototype.getLocalTextPrefix = function () { return Administration.RoleRow.localTextPrefix; };
            RoleDialog.prototype.getNameProperty = function () { return Administration.RoleRow.nameProperty; };
            RoleDialog.prototype.getService = function () { return Administration.RoleService.baseUrl; };
            RoleDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: Q.text('Site.RolePermissionDialog.EditButton'),
                    cssClass: 'edit-permissions-button',
                    icon: 'fa-lock text-green',
                    onClick: function () {
                        new Administration.RolePermissionDialog({
                            roleID: _this.entity.RoleId,
                            title: _this.entity.RoleName
                        }).dialogOpen();
                    }
                });
                return buttons;
            };
            RoleDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton("edit-permissions-button").toggleClass("disabled", this.isNewOrDeleted());
            };
            RoleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RoleDialog);
            return RoleDialog;
        }(Serenity.EntityDialog));
        Administration.RoleDialog = RoleDialog;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RoleGrid = /** @class */ (function (_super) {
            __extends(RoleGrid, _super);
            function RoleGrid(container) {
                return _super.call(this, container) || this;
            }
            RoleGrid.prototype.getColumnsKey = function () { return "Administration.Role"; };
            RoleGrid.prototype.getDialogType = function () { return Administration.RoleDialog; };
            RoleGrid.prototype.getIdProperty = function () { return Administration.RoleRow.idProperty; };
            RoleGrid.prototype.getLocalTextPrefix = function () { return Administration.RoleRow.localTextPrefix; };
            RoleGrid.prototype.getService = function () { return Administration.RoleService.baseUrl; };
            RoleGrid.prototype.getDefaultSortBy = function () {
                return ["RoleName" /* RoleName */];
            };
            RoleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RoleGrid);
            return RoleGrid;
        }(Serenity.EntityGrid));
        Administration.RoleGrid = RoleGrid;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RolePermissionDialog = /** @class */ (function (_super) {
            __extends(RolePermissionDialog, _super);
            function RolePermissionDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.PermissionCheckEditor(_this.byId('Permissions'), {
                    showRevoke: false
                });
                Administration.RolePermissionService.List({
                    RoleID: _this.options.roleID,
                    Module: null,
                    Submodule: null
                }, function (response) {
                    _this.permissions.value = response.Entities.map(function (x) { return ({ PermissionKey: x }); });
                });
                _this.permissions.implicitPermissions = Q.getRemoteData('Administration.ImplicitPermissions');
                return _this;
            }
            RolePermissionDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [
                    {
                        text: Q.text('Dialogs.OkButton'),
                        click: function (e) {
                            Administration.RolePermissionService.Update({
                                RoleID: _this.options.roleID,
                                Permissions: _this.permissions.value.map(function (x) { return x.PermissionKey; }),
                                Module: null,
                                Submodule: null
                            }, function (response) {
                                _this.dialogClose();
                                window.setTimeout(function () { return Q.notifySuccess(Q.text('Site.RolePermissionDialog.SaveSuccess')); }, 0);
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                opt.title = Q.format(Q.text('Site.RolePermissionDialog.DialogTitle'), this.options.title);
                return opt;
            };
            RolePermissionDialog.prototype.getTemplate = function () {
                return '<div id="~_Permissions"></div>';
            };
            RolePermissionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RolePermissionDialog);
            return RolePermissionDialog;
        }(Serenity.TemplatedDialog));
        Administration.RolePermissionDialog = RolePermissionDialog;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var TenantDialog = /** @class */ (function (_super) {
            __extends(TenantDialog, _super);
            function TenantDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.TenantForm(_this.idPrefix);
                return _this;
            }
            TenantDialog.prototype.getFormKey = function () { return Administration.TenantForm.formKey; };
            TenantDialog.prototype.getIdProperty = function () { return Administration.TenantRow.idProperty; };
            TenantDialog.prototype.getLocalTextPrefix = function () { return Administration.TenantRow.localTextPrefix; };
            TenantDialog.prototype.getNameProperty = function () { return Administration.TenantRow.nameProperty; };
            TenantDialog.prototype.getService = function () { return Administration.TenantService.baseUrl; };
            TenantDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TenantDialog);
            return TenantDialog;
        }(Serenity.EntityDialog));
        Administration.TenantDialog = TenantDialog;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var TenantGrid = /** @class */ (function (_super) {
            __extends(TenantGrid, _super);
            function TenantGrid(container) {
                return _super.call(this, container) || this;
            }
            TenantGrid.prototype.getColumnsKey = function () { return 'Administration.Tenant'; };
            TenantGrid.prototype.getDialogType = function () { return Administration.TenantDialog; };
            TenantGrid.prototype.getIdProperty = function () { return Administration.TenantRow.idProperty; };
            TenantGrid.prototype.getLocalTextPrefix = function () { return Administration.TenantRow.localTextPrefix; };
            TenantGrid.prototype.getService = function () { return Administration.TenantService.baseUrl; };
            TenantGrid.prototype.getDefaultSortBy = function () {
                return ["TenantName" /* TenantName */];
            };
            TenantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TenantGrid);
            return TenantGrid;
        }(Serenity.EntityGrid));
        Administration.TenantGrid = TenantGrid;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var TranslationGrid = /** @class */ (function (_super) {
            __extends(TranslationGrid, _super);
            function TranslationGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.element.on('keyup.' + _this.uniqueName + ' change.' + _this.uniqueName, 'input.custom-text', function (e) {
                    var value = Q.trimToNull($(e.target).val());
                    if (value === '') {
                        value = null;
                    }
                    _this.view.getItemById($(e.target).data('key')).CustomText = value;
                    _this.hasChanges = true;
                });
                return _this;
            }
            TranslationGrid.prototype.getIdProperty = function () { return "Key"; };
            TranslationGrid.prototype.getLocalTextPrefix = function () { return "Administration.Translation"; };
            TranslationGrid.prototype.getService = function () { return Administration.TranslationService.baseUrl; };
            TranslationGrid.prototype.onClick = function (e, row, cell) {
                var _this = this;
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented()) {
                    return;
                }
                var item = this.itemAt(row);
                var done;
                if ($(e.target).hasClass('source-text')) {
                    e.preventDefault();
                    done = function () {
                        item.CustomText = item.SourceText;
                        _this.view.updateItem(item.Key, item);
                        _this.hasChanges = true;
                    };
                    if (Q.isTrimmedEmpty(item.CustomText) ||
                        (Q.trimToEmpty(item.CustomText) === Q.trimToEmpty(item.SourceText))) {
                        done();
                        return;
                    }
                    Q.confirm(Q.text('Db.Administration.Translation.OverrideConfirmation'), done);
                    return;
                }
                if ($(e.target).hasClass('target-text')) {
                    e.preventDefault();
                    done = function () {
                        item.CustomText = item.TargetText;
                        _this.view.updateItem(item.Key, item);
                        _this.hasChanges = true;
                    };
                    if (Q.isTrimmedEmpty(item.CustomText) ||
                        (Q.trimToEmpty(item.CustomText) === Q.trimToEmpty(item.TargetText))) {
                        done();
                        return;
                    }
                    Q.confirm(Q.text('Db.Administration.Translation.OverrideConfirmation'), done);
                    return;
                }
            };
            TranslationGrid.prototype.getColumns = function () {
                var columns = [];
                columns.push({ field: 'Key', width: 300, sortable: false });
                columns.push({
                    field: 'SourceText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) {
                        return Q.outerHtml($('<a/>')
                            .addClass('source-text')
                            .text(ctx.value || ''));
                    }
                });
                columns.push({
                    field: 'CustomText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) { return Q.outerHtml($('<input/>')
                        .addClass('custom-text')
                        .attr('value', ctx.value)
                        .attr('type', 'text')
                        .attr('data-key', ctx.item.Key)); }
                });
                columns.push({
                    field: 'TargetText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) { return Q.outerHtml($('<a/>')
                        .addClass('target-text')
                        .text(ctx.value || '')); }
                });
                return columns;
            };
            TranslationGrid.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                var opt = {
                    lookupKey: 'Administration.Language'
                };
                this.sourceLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', '--- ' +
                        Q.text('Db.Administration.Translation.SourceLanguage') + ' ---'); },
                    options: opt
                });
                this.sourceLanguage.changeSelect2(function (e) {
                    if (_this.hasChanges) {
                        _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); });
                    }
                    else {
                        _this.refresh();
                    }
                });
                this.targetLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', '--- ' +
                        Q.text('Db.Administration.Translation.TargetLanguage') + ' ---'); },
                    options: opt
                });
                this.targetLanguage.changeSelect2(function (e) {
                    if (_this.hasChanges) {
                        _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); });
                    }
                    else {
                        _this.refresh();
                    }
                });
            };
            TranslationGrid.prototype.saveChanges = function (language) {
                var _this = this;
                var translations = {};
                for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
                    var item = _a[_i];
                    translations[item.Key] = item.CustomText;
                }
                return Promise.resolve(Administration.TranslationService.Update({
                    TargetLanguageID: language,
                    Translations: translations
                })).then(function () {
                    _this.hasChanges = false;
                    language = Q.trimToNull(language) || 'invariant';
                    Q.notifySuccess('User translations in "' + language +
                        '" language are saved to "user.texts.' +
                        language + '.json" ' + 'file under "~/App_Data/texts/"', '');
                });
            };
            TranslationGrid.prototype.onViewSubmit = function () {
                var request = this.view.params;
                request.SourceLanguageID = this.sourceLanguage.value;
                this.targetLanguageKey = this.targetLanguage.value || '';
                request.TargetLanguageID = this.targetLanguageKey;
                this.hasChanges = false;
                return _super.prototype.onViewSubmit.call(this);
            };
            TranslationGrid.prototype.getButtons = function () {
                var _this = this;
                return [{
                        title: Q.text('Db.Administration.Translation.SaveChangesButton'),
                        onClick: function (e) { return _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); }); },
                        cssClass: 'apply-changes-button'
                    }];
            };
            TranslationGrid.prototype.createQuickSearchInput = function () {
                var _this = this;
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, searchText) {
                    _this.searchText = searchText;
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            TranslationGrid.prototype.onViewFilter = function (item) {
                if (!_super.prototype.onViewFilter.call(this, item)) {
                    return false;
                }
                if (!this.searchText) {
                    return true;
                }
                var sd = Select2.util.stripDiacritics;
                var searching = sd(this.searchText).toLowerCase();
                function match(str) {
                    if (!str)
                        return false;
                    return str.toLowerCase().indexOf(searching) >= 0;
                }
                return Q.isEmptyOrNull(searching) || match(item.Key) || match(item.SourceText) ||
                    match(item.TargetText) || match(item.CustomText);
            };
            TranslationGrid.prototype.usePager = function () {
                return false;
            };
            TranslationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TranslationGrid);
            return TranslationGrid;
        }(Serenity.EntityGrid));
        Administration.TranslationGrid = TranslationGrid;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserDialog = /** @class */ (function (_super) {
            __extends(UserDialog, _super);
            function UserDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Administration.UserForm(_this.idPrefix);
                _this.form.Password.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.Password.value.length < 7)
                        return "Password must be at least 7 characters!";
                });
                _this.form.PasswordConfirm.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.Password.value != _this.form.PasswordConfirm.value)
                        return "The passwords entered doesn't match!";
                });
                return _this;
            }
            UserDialog.prototype.getFormKey = function () { return Administration.UserForm.formKey; };
            UserDialog.prototype.getIdProperty = function () { return Administration.UserRow.idProperty; };
            UserDialog.prototype.getIsActiveProperty = function () { return Administration.UserRow.isActiveProperty; };
            UserDialog.prototype.getLocalTextPrefix = function () { return Administration.UserRow.localTextPrefix; };
            UserDialog.prototype.getNameProperty = function () { return Administration.UserRow.nameProperty; };
            UserDialog.prototype.getService = function () { return Administration.UserService.baseUrl; };
            UserDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: Q.text('Site.UserDialog.EditRolesButton'),
                    cssClass: 'edit-roles-button',
                    icon: 'fa-users text-blue',
                    onClick: function () {
                        new Administration.UserRoleDialog({
                            userID: _this.entity.UserId,
                            username: _this.entity.Username
                        }).dialogOpen();
                    }
                });
                buttons.push({
                    title: Q.text('Site.UserDialog.EditPermissionsButton'),
                    cssClass: 'edit-permissions-button',
                    icon: 'fa-lock text-green',
                    onClick: function () {
                        new Administration.UserPermissionDialog({
                            userID: _this.entity.UserId,
                            username: _this.entity.Username
                        }).dialogOpen();
                    }
                });
                return buttons;
            };
            UserDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton('edit-roles-button').toggleClass('disabled', this.isNewOrDeleted());
                this.toolbar.findButton("edit-permissions-button").toggleClass("disabled", this.isNewOrDeleted());
            };
            UserDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                // these fields are only required in new record mode
                this.form.Password.element.toggleClass('required', this.isNew())
                    .closest('.field').find('sup').toggle(this.isNew());
                this.form.PasswordConfirm.element.toggleClass('required', this.isNew())
                    .closest('.field').find('sup').toggle(this.isNew());
            };
            UserDialog.prototype.getPropertyItems = function () {
                var items = _super.prototype.getPropertyItems.call(this);
                if (!Q.Authorization.hasPermission("Administration:Tenants"))
                    items = items.filter(function (x) { return x.name != "TenantId" /* TenantId */; });
                return items;
            };
            UserDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserDialog);
            return UserDialog;
        }(Serenity.EntityDialog));
        Administration.UserDialog = UserDialog;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserGrid = /** @class */ (function (_super) {
            __extends(UserGrid, _super);
            function UserGrid(container) {
                return _super.call(this, container) || this;
            }
            UserGrid.prototype.getColumnsKey = function () { return "Administration.User"; };
            UserGrid.prototype.getDialogType = function () { return Administration.UserDialog; };
            UserGrid.prototype.getIdProperty = function () { return Administration.UserRow.idProperty; };
            UserGrid.prototype.getIsActiveProperty = function () { return Administration.UserRow.isActiveProperty; };
            UserGrid.prototype.getLocalTextPrefix = function () { return Administration.UserRow.localTextPrefix; };
            UserGrid.prototype.getService = function () { return Administration.UserService.baseUrl; };
            UserGrid.prototype.getDefaultSortBy = function () {
                return ["Username" /* Username */];
            };
            UserGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], UserGrid);
            return UserGrid;
        }(Serenity.EntityGrid));
        Administration.UserGrid = UserGrid;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Authorization;
    (function (Authorization) {
        Object.defineProperty(Authorization, 'userDefinition', {
            get: function () {
                return Q.getRemoteData('UserData');
            }
        });
        function hasPermission(permissionKey) {
            return Q.Authorization.hasPermission(permissionKey);
        }
        Authorization.hasPermission = hasPermission;
    })(Authorization = Store.Authorization || (Store.Authorization = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var PermissionCheckEditor = /** @class */ (function (_super) {
            __extends(PermissionCheckEditor, _super);
            function PermissionCheckEditor(container, opt) {
                var _this = _super.call(this, container, opt) || this;
                _this._rolePermissions = {};
                _this._implicitPermissions = {};
                var titleByKey = {};
                var permissionKeys = _this.getSortedGroupAndPermissionKeys(titleByKey);
                var items = permissionKeys.map(function (key) { return ({
                    Key: key,
                    ParentKey: _this.getParentKey(key),
                    Title: titleByKey[key],
                    GrantRevoke: null,
                    IsGroup: key.charAt(key.length - 1) === ':'
                }); });
                _this.byParentKey = Q.toGrouping(items, function (x) { return x.ParentKey; });
                _this.setItems(items);
                return _this;
            }
            PermissionCheckEditor.prototype.getIdProperty = function () { return "Key"; };
            PermissionCheckEditor.prototype.getItemGrantRevokeClass = function (item, grant) {
                if (!item.IsGroup) {
                    return ((item.GrantRevoke === grant) ? ' checked' : '');
                }
                var desc = this.getDescendants(item, true);
                var granted = desc.filter(function (x) { return x.GrantRevoke === grant; });
                if (!granted.length) {
                    return '';
                }
                if (desc.length === granted.length) {
                    return 'checked';
                }
                return 'checked partial';
            };
            PermissionCheckEditor.prototype.roleOrImplicit = function (key) {
                if (this._rolePermissions[key])
                    return true;
                for (var _i = 0, _a = Object.keys(this._rolePermissions); _i < _a.length; _i++) {
                    var k = _a[_i];
                    var d = this._implicitPermissions[k];
                    if (d && d[key])
                        return true;
                }
                for (var _b = 0, _c = Object.keys(this._implicitPermissions); _b < _c.length; _b++) {
                    var i = _c[_b];
                    var item = this.view.getItemById(i);
                    if (item && item.GrantRevoke == true) {
                        var d = this._implicitPermissions[i];
                        if (d && d[key])
                            return true;
                    }
                }
            };
            PermissionCheckEditor.prototype.getItemEffectiveClass = function (item) {
                var _this = this;
                if (item.IsGroup) {
                    var desc = this.getDescendants(item, true);
                    var grantCount = Q.count(desc, function (x) { return x.GrantRevoke === true ||
                        (x.GrantRevoke == null && _this.roleOrImplicit(x.Key)); });
                    if (grantCount === desc.length || desc.length === 0) {
                        return 'allow';
                    }
                    if (grantCount === 0) {
                        return 'deny';
                    }
                    return 'partial';
                }
                var granted = item.GrantRevoke === true ||
                    (item.GrantRevoke == null && this.roleOrImplicit(item.Key));
                return (granted ? ' allow' : ' deny');
            };
            PermissionCheckEditor.prototype.getColumns = function () {
                var _this = this;
                var columns = [{
                        name: Q.text('Site.UserPermissionDialog.Permission'),
                        field: 'Title',
                        format: Serenity.SlickFormatting.treeToggle(function () { return _this.view; }, function (x) { return x.Key; }, function (ctx) {
                            var item = ctx.item;
                            var klass = _this.getItemEffectiveClass(item);
                            return '<span class="effective-permission ' + klass + '">' + Q.htmlEncode(ctx.value) + '</span>';
                        }),
                        width: 495,
                        sortable: false
                    }, {
                        name: Q.text('Site.UserPermissionDialog.Grant'), field: 'Grant',
                        format: function (ctx) {
                            var item1 = ctx.item;
                            var klass1 = _this.getItemGrantRevokeClass(item1, true);
                            return "<span class='check-box grant no-float " + klass1 + "'></span>";
                        },
                        width: 65,
                        sortable: false,
                        headerCssClass: 'align-center',
                        cssClass: 'align-center'
                    }];
                if (this.options.showRevoke) {
                    columns.push({
                        name: Q.text('Site.UserPermissionDialog.Revoke'), field: 'Revoke',
                        format: function (ctx) {
                            var item2 = ctx.item;
                            var klass2 = _this.getItemGrantRevokeClass(item2, false);
                            return '<span class="check-box revoke no-float ' + klass2 + '"></span>';
                        },
                        width: 65,
                        sortable: false,
                        headerCssClass: 'align-center',
                        cssClass: 'align-center'
                    });
                }
                return columns;
            };
            PermissionCheckEditor.prototype.setItems = function (items) {
                Serenity.SlickTreeHelper.setIndents(items, function (x) { return x.Key; }, function (x) { return x.ParentKey; }, false);
                this.view.setItems(items, true);
            };
            PermissionCheckEditor.prototype.onViewSubmit = function () {
                return false;
            };
            PermissionCheckEditor.prototype.onViewFilter = function (item) {
                var _this = this;
                if (!_super.prototype.onViewFilter.call(this, item)) {
                    return false;
                }
                if (!Serenity.SlickTreeHelper.filterById(item, this.view, function (x) { return x.ParentKey; }))
                    return false;
                if (this.searchText) {
                    return this.matchContains(item) || item.IsGroup && Q.any(this.getDescendants(item, false), function (x) { return _this.matchContains(x); });
                }
                return true;
            };
            PermissionCheckEditor.prototype.matchContains = function (item) {
                return Select2.util.stripDiacritics(item.Title || '').toLowerCase().indexOf(this.searchText) >= 0;
            };
            PermissionCheckEditor.prototype.getDescendants = function (item, excludeGroups) {
                var result = [];
                var stack = [item];
                while (stack.length > 0) {
                    var i = stack.pop();
                    var children = this.byParentKey[i.Key];
                    if (!children)
                        continue;
                    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                        var child = children_1[_i];
                        if (!excludeGroups || !child.IsGroup) {
                            result.push(child);
                        }
                        stack.push(child);
                    }
                }
                return result;
            };
            PermissionCheckEditor.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (!e.isDefaultPrevented()) {
                    Serenity.SlickTreeHelper.toggleClick(e, row, cell, this.view, function (x) { return x.Key; });
                }
                if (e.isDefaultPrevented()) {
                    return;
                }
                var target = $(e.target);
                var grant = target.hasClass('grant');
                if (grant || target.hasClass('revoke')) {
                    e.preventDefault();
                    var item = this.itemAt(row);
                    var checkedOrPartial = target.hasClass('checked') || target.hasClass('partial');
                    if (checkedOrPartial) {
                        grant = null;
                    }
                    else {
                        grant = grant !== checkedOrPartial;
                    }
                    if (item.IsGroup) {
                        for (var _i = 0, _a = this.getDescendants(item, true); _i < _a.length; _i++) {
                            var d = _a[_i];
                            d.GrantRevoke = grant;
                        }
                    }
                    else
                        item.GrantRevoke = grant;
                    this.slickGrid.invalidate();
                }
            };
            PermissionCheckEditor.prototype.getParentKey = function (key) {
                if (key.charAt(key.length - 1) === ':') {
                    key = key.substr(0, key.length - 1);
                }
                var idx = key.lastIndexOf(':');
                if (idx >= 0) {
                    return key.substr(0, idx + 1);
                }
                return null;
            };
            PermissionCheckEditor.prototype.getButtons = function () {
                return [];
            };
            PermissionCheckEditor.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, text) {
                    _this.searchText = Select2.util.stripDiacritics(Q.trimToNull(text) || '').toLowerCase();
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            PermissionCheckEditor.prototype.getSortedGroupAndPermissionKeys = function (titleByKey) {
                var keys = Q.getRemoteData('Administration.PermissionKeys');
                var titleWithGroup = {};
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var k = keys_1[_i];
                    var s = k;
                    if (!s) {
                        continue;
                    }
                    if (s.charAt(s.length - 1) == ':') {
                        s = s.substr(0, s.length - 1);
                        if (s.length === 0) {
                            continue;
                        }
                    }
                    if (titleByKey[s]) {
                        continue;
                    }
                    titleByKey[s] = Q.coalesce(Q.tryGetText('Permission.' + s), s);
                    var parts = s.split(':');
                    var group = '';
                    var groupTitle = '';
                    for (var i = 0; i < parts.length - 1; i++) {
                        group = group + parts[i] + ':';
                        var txt = Q.tryGetText('Permission.' + group);
                        if (txt == null) {
                            txt = parts[i];
                        }
                        titleByKey[group] = txt;
                        groupTitle = groupTitle + titleByKey[group] + ':';
                        titleWithGroup[group] = groupTitle;
                    }
                    titleWithGroup[s] = groupTitle + titleByKey[s];
                }
                keys = Object.keys(titleByKey);
                keys = keys.sort(function (x, y) { return Q.turkishLocaleCompare(titleWithGroup[x], titleWithGroup[y]); });
                return keys;
            };
            Object.defineProperty(PermissionCheckEditor.prototype, "value", {
                get: function () {
                    var result = [];
                    for (var _i = 0, _a = this.view.getItems(); _i < _a.length; _i++) {
                        var item = _a[_i];
                        if (item.GrantRevoke != null && item.Key.charAt(item.Key.length - 1) != ':') {
                            result.push({ PermissionKey: item.Key, Granted: item.GrantRevoke });
                        }
                    }
                    return result;
                },
                set: function (value) {
                    for (var _i = 0, _a = this.view.getItems(); _i < _a.length; _i++) {
                        var item = _a[_i];
                        item.GrantRevoke = null;
                    }
                    if (value != null) {
                        for (var _b = 0, value_1 = value; _b < value_1.length; _b++) {
                            var row = value_1[_b];
                            var r = this.view.getItemById(row.PermissionKey);
                            if (r) {
                                r.GrantRevoke = Q.coalesce(row.Granted, true);
                            }
                        }
                    }
                    this.setItems(this.getItems());
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PermissionCheckEditor.prototype, "rolePermissions", {
                get: function () {
                    return Object.keys(this._rolePermissions);
                },
                set: function (value) {
                    this._rolePermissions = {};
                    if (value) {
                        for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
                            var k = value_2[_i];
                            this._rolePermissions[k] = true;
                        }
                    }
                    this.setItems(this.getItems());
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PermissionCheckEditor.prototype, "implicitPermissions", {
                set: function (value) {
                    this._implicitPermissions = {};
                    if (value) {
                        for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
                            var k = _a[_i];
                            this._implicitPermissions[k] = this._implicitPermissions[k] || {};
                            var l = value[k];
                            if (l) {
                                for (var _b = 0, l_1 = l; _b < l_1.length; _b++) {
                                    var s = l_1[_b];
                                    this._implicitPermissions[k][s] = true;
                                }
                            }
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            PermissionCheckEditor = __decorate([
                Serenity.Decorators.registerEditor([Serenity.IGetEditValue, Serenity.ISetEditValue])
            ], PermissionCheckEditor);
            return PermissionCheckEditor;
        }(Serenity.DataGrid));
        Administration.PermissionCheckEditor = PermissionCheckEditor;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserPermissionDialog = /** @class */ (function (_super) {
            __extends(UserPermissionDialog, _super);
            function UserPermissionDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.PermissionCheckEditor(_this.byId('Permissions'), {
                    showRevoke: true
                });
                Administration.UserPermissionService.List({
                    UserID: _this.options.userID,
                    Module: null,
                    Submodule: null
                }, function (response) {
                    _this.permissions.value = response.Entities;
                });
                Administration.UserPermissionService.ListRolePermissions({
                    UserID: _this.options.userID,
                    Module: null,
                    Submodule: null,
                }, function (response) {
                    _this.permissions.rolePermissions = response.Entities;
                });
                _this.permissions.implicitPermissions = Q.getRemoteData('Administration.ImplicitPermissions');
                return _this;
            }
            UserPermissionDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [
                    {
                        text: Q.text('Dialogs.OkButton'),
                        cssClass: 'btn btn-primary',
                        click: function (e) {
                            Administration.UserPermissionService.Update({
                                UserID: _this.options.userID,
                                Permissions: _this.permissions.value,
                                Module: null,
                                Submodule: null
                            }, function (response) {
                                _this.dialogClose();
                                window.setTimeout(function () { return Q.notifySuccess(Q.text('Site.UserPermissionDialog.SaveSuccess')); }, 0);
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                opt.title = Q.format(Q.text('Site.UserPermissionDialog.DialogTitle'), this.options.username);
                return opt;
            };
            UserPermissionDialog.prototype.getTemplate = function () {
                return '<div id="~_Permissions"></div>';
            };
            UserPermissionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserPermissionDialog);
            return UserPermissionDialog;
        }(Serenity.TemplatedDialog));
        Administration.UserPermissionDialog = UserPermissionDialog;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var RoleCheckEditor = /** @class */ (function (_super) {
            __extends(RoleCheckEditor, _super);
            function RoleCheckEditor(div) {
                return _super.call(this, div) || this;
            }
            RoleCheckEditor.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, text) {
                    _this.searchText = Select2.util.stripDiacritics(text || '').toUpperCase();
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            RoleCheckEditor.prototype.getButtons = function () {
                return [];
            };
            RoleCheckEditor.prototype.getTreeItems = function () {
                return Administration.RoleRow.getLookup().items.map(function (role) { return ({
                    id: role.RoleId.toString(),
                    text: role.RoleName
                }); });
            };
            RoleCheckEditor.prototype.onViewFilter = function (item) {
                return _super.prototype.onViewFilter.call(this, item) &&
                    (Q.isEmptyOrNull(this.searchText) ||
                        Select2.util.stripDiacritics(item.text || '')
                            .toUpperCase().indexOf(this.searchText) >= 0);
            };
            RoleCheckEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], RoleCheckEditor);
            return RoleCheckEditor;
        }(Serenity.CheckTreeEditor));
        Administration.RoleCheckEditor = RoleCheckEditor;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Administration;
    (function (Administration) {
        var UserRoleDialog = /** @class */ (function (_super) {
            __extends(UserRoleDialog, _super);
            function UserRoleDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.RoleCheckEditor(_this.byId('Roles'));
                Administration.UserRoleService.List({
                    UserID: _this.options.userID
                }, function (response) {
                    _this.permissions.value = response.Entities.map(function (x) { return x.toString(); });
                });
                return _this;
            }
            UserRoleDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [{
                        text: Q.text('Dialogs.OkButton'),
                        cssClass: 'btn btn-primary',
                        click: function () {
                            Q.serviceRequest('Administration/UserRole/Update', {
                                UserID: _this.options.userID,
                                Roles: _this.permissions.value.map(function (x) { return parseInt(x, 10); })
                            }, function (response) {
                                _this.dialogClose();
                                Q.notifySuccess(Q.text('Site.UserRoleDialog.SaveSuccess'));
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }];
                opt.title = Q.format(Q.text('Site.UserRoleDialog.DialogTitle'), this.options.username);
                return opt;
            };
            UserRoleDialog.prototype.getTemplate = function () {
                return "<div id='~_Roles'></div>";
            };
            UserRoleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserRoleDialog);
            return UserRoleDialog;
        }(Serenity.TemplatedDialog));
        Administration.UserRoleDialog = UserRoleDialog;
    })(Administration = Store.Administration || (Store.Administration = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var LanguageList;
    (function (LanguageList) {
        function getValue() {
            var result = [];
            for (var _i = 0, _a = Store.Administration.LanguageRow.getLookup().items; _i < _a.length; _i++) {
                var k = _a[_i];
                if (k.LanguageId !== 'en') {
                    result.push([k.Id.toString(), k.LanguageName]);
                }
            }
            return result;
        }
        LanguageList.getValue = getValue;
    })(LanguageList = Store.LanguageList || (Store.LanguageList = {}));
})(Store || (Store = {}));
/// <reference path="../Common/Helpers/LanguageList.ts" />
var Store;
(function (Store) {
    var ScriptInitialization;
    (function (ScriptInitialization) {
        Q.Config.responsiveDialogs = true;
        Q.Config.rootNamespaces.push('Store');
        Serenity.EntityDialog.defaultLanguageList = Store.LanguageList.getValue;
        Serenity.HtmlContentEditor.CKEditorBasePath = "~/Serenity.Assets/Scripts/ckeditor/";
        if ($.fn['colorbox']) {
            $.fn['colorbox'].settings.maxWidth = "95%";
            $.fn['colorbox'].settings.maxHeight = "95%";
        }
        window.onerror = Q.ErrorHandling.runtimeErrorHandler;
    })(ScriptInitialization = Store.ScriptInitialization || (Store.ScriptInitialization = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var DialogUtils;
    (function (DialogUtils) {
        function pendingChangesConfirmation(element, hasPendingChanges) {
            element.on('dialogbeforeclose panelbeforeclose', function (e) {
                if (!Serenity.WX.hasOriginalEvent(e) || !hasPendingChanges()) {
                    return;
                }
                e.preventDefault();
                Q.confirm('You have pending changes. Save them?', function () { return element.find('div.save-and-close-button').click(); }, {
                    onNo: function () {
                        if (element.hasClass('ui-dialog-content'))
                            element.dialog('close');
                        else if (element.hasClass('s-Panel'))
                            Serenity.TemplatedDialog.closePanel(element);
                    }
                });
            });
        }
        DialogUtils.pendingChangesConfirmation = pendingChangesConfirmation;
    })(DialogUtils = Store.DialogUtils || (Store.DialogUtils = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Common;
    (function (Common) {
        var ExcelExportHelper;
        (function (ExcelExportHelper) {
            function createToolButton(options) {
                return {
                    hint: Q.coalesce(options.hint, 'Excel'),
                    title: Q.coalesce(options.title, ''),
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        if (!options.onViewSubmit()) {
                            return;
                        }
                        var grid = options.grid;
                        var request = Q.deepClone(grid.getView().params);
                        request.Take = 0;
                        request.Skip = 0;
                        var sortBy = grid.getView().sortBy;
                        if (sortBy) {
                            request.Sort = sortBy;
                        }
                        request.IncludeColumns = [];
                        var columns = grid.getGrid().getColumns();
                        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                            var column = columns_1[_i];
                            request.IncludeColumns.push(column.id || column.field);
                        }
                        Q.postToService({ service: options.service, request: request, target: '_blank' });
                    },
                    separator: options.separator
                };
            }
            ExcelExportHelper.createToolButton = createToolButton;
        })(ExcelExportHelper = Common.ExcelExportHelper || (Common.ExcelExportHelper = {}));
    })(Common = Store.Common || (Store.Common = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Common;
    (function (Common) {
        var GridEditorBase = /** @class */ (function (_super) {
            __extends(GridEditorBase, _super);
            function GridEditorBase(container) {
                var _this = _super.call(this, container) || this;
                _this.nextId = 1;
                return _this;
            }
            GridEditorBase.prototype.getIdProperty = function () { return "__id"; };
            GridEditorBase.prototype.id = function (entity) {
                return entity[this.getIdProperty()];
            };
            GridEditorBase.prototype.getNextId = function () {
                return "`" + this.nextId++;
            };
            GridEditorBase.prototype.setNewId = function (entity) {
                entity[this.getIdProperty()] = this.getNextId();
            };
            GridEditorBase.prototype.save = function (opt, callback) {
                var _this = this;
                var request = opt.request;
                var row = Q.deepClone(request.Entity);
                var id = this.id(row);
                if (id == null) {
                    row[this.getIdProperty()] = this.getNextId();
                }
                if (!this.validateEntity(row, id)) {
                    return;
                }
                var items = this.view.getItems().slice();
                if (id == null) {
                    items.push(row);
                }
                else {
                    var index = Q.indexOf(items, function (x) { return _this.id(x) === id; });
                    items[index] = Q.deepClone({}, items[index], row);
                }
                this.setEntities(items);
                callback({});
            };
            GridEditorBase.prototype.deleteEntity = function (id) {
                this.view.deleteItem(id);
                return true;
            };
            GridEditorBase.prototype.validateEntity = function (row, id) {
                return true;
            };
            GridEditorBase.prototype.setEntities = function (items) {
                this.view.setItems(items, true);
            };
            GridEditorBase.prototype.getNewEntity = function () {
                return {};
            };
            GridEditorBase.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                var addButton = Q.tryFirst(buttons, function (x) { return x.cssClass == 'add-button'; });
                if (addButton != null) {
                    addButton.onClick = function () {
                        _this.createEntityDialog(_this.getItemType(), function (dlg) {
                            var dialog = dlg;
                            dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                            _this.transferDialogReadOnly(dialog);
                            dialog.loadEntityAndOpenDialog(_this.getNewEntity());
                        });
                    };
                }
                return buttons.filter(function (x) { return x.cssClass != "refresh-button"; });
            };
            GridEditorBase.prototype.editItem = function (entityOrId) {
                var _this = this;
                var id = entityOrId;
                var item = this.view.getItemById(id);
                this.createEntityDialog(this.getItemType(), function (dlg) {
                    var dialog = dlg;
                    dialog.onDelete = function (opt, callback) {
                        if (!_this.deleteEntity(id)) {
                            return;
                        }
                        callback({});
                    };
                    _this.transferDialogReadOnly(dialog);
                    dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                    dialog.loadEntityAndOpenDialog(item);
                });
                ;
            };
            GridEditorBase.prototype.getEditValue = function (property, target) {
                target[property.name] = this.value;
            };
            GridEditorBase.prototype.setEditValue = function (source, property) {
                this.value = source[property.name];
            };
            Object.defineProperty(GridEditorBase.prototype, "value", {
                get: function () {
                    var p = this.getIdProperty();
                    return this.view.getItems().map(function (x) {
                        var y = Q.deepClone(x);
                        var id = y[p];
                        if (id && id.toString().charAt(0) == '`')
                            delete y[p];
                        return y;
                    });
                },
                set: function (value) {
                    var _this = this;
                    var p = this.getIdProperty();
                    this.view.setItems((value || []).map(function (x) {
                        var y = Q.deepClone(x);
                        if (y[p] == null)
                            y[p] = "`" + _this.getNextId();
                        return y;
                    }), true);
                },
                enumerable: true,
                configurable: true
            });
            GridEditorBase.prototype.getGridCanLoad = function () {
                return false;
            };
            GridEditorBase.prototype.usePager = function () {
                return false;
            };
            GridEditorBase.prototype.getInitialTitle = function () {
                return null;
            };
            GridEditorBase.prototype.createQuickSearchInput = function () {
            };
            GridEditorBase.prototype.enableDeleteColumn = function () {
                return false;
            };
            GridEditorBase.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                if (this.enableDeleteColumn()) {
                    columns.unshift({
                        field: 'Delete Row',
                        name: '',
                        format: function (ctx) { return '<a class="inline-action delete-row" title="delete">' +
                            '<i class="fa fa-trash-o text-red"></i></a>'; },
                        width: 24,
                        minWidth: 24,
                        maxWidth: 24
                    });
                }
                return columns;
            };
            GridEditorBase.prototype.onClick = function (e, row, cell) {
                var _this = this;
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented())
                    return;
                var item = this.itemAt(row);
                var target = $(e.target);
                // if user clicks "i" element, e.g. icon
                if (target.parent().hasClass('inline-action'))
                    target = target.parent();
                if (target.hasClass('inline-action')) {
                    e.preventDefault();
                    if (this.enableDeleteColumn()) {
                        if (target.hasClass('delete-row')) {
                            Q.confirm(Q.text('Controls.EntityDialog.DeleteConfirmation'), function () {
                                _this.deleteEntity(item[_this.getIdProperty()]);
                            });
                        }
                    }
                }
            };
            GridEditorBase = __decorate([
                Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue]),
                Serenity.Decorators.editor(),
                Serenity.Decorators.element("<div/>")
            ], GridEditorBase);
            return GridEditorBase;
        }(Serenity.EntityGrid));
        Common.GridEditorBase = GridEditorBase;
    })(Common = Store.Common || (Store.Common = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Common;
    (function (Common) {
        var GridEditorDialog = /** @class */ (function (_super) {
            __extends(GridEditorDialog, _super);
            function GridEditorDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GridEditorDialog.prototype.getIdProperty = function () { return "__id"; };
            GridEditorDialog.prototype.destroy = function () {
                this.onSave = null;
                this.onDelete = null;
                _super.prototype.destroy.call(this);
            };
            GridEditorDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                // apply changes button doesn't work properly with in-memory grids yet
                if (this.applyChangesButton) {
                    this.applyChangesButton.hide();
                }
            };
            GridEditorDialog.prototype.saveHandler = function (options, callback) {
                this.onSave && this.onSave(options, callback);
            };
            GridEditorDialog.prototype.deleteHandler = function (options, callback) {
                this.onDelete && this.onDelete(options, callback);
            };
            GridEditorDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], GridEditorDialog);
            return GridEditorDialog;
        }(Serenity.EntityDialog));
        Common.GridEditorDialog = GridEditorDialog;
    })(Common = Store.Common || (Store.Common = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Common;
    (function (Common) {
        var SidebarSearch = /** @class */ (function (_super) {
            __extends(SidebarSearch, _super);
            function SidebarSearch(input, menuUL) {
                var _this = _super.call(this, input) || this;
                new Serenity.QuickSearchInput(input, {
                    onSearch: function (field, text, success) {
                        _this.updateMatchFlags(text);
                        success(true);
                    }
                });
                _this.menuUL = menuUL;
                return _this;
            }
            SidebarSearch.prototype.updateMatchFlags = function (text) {
                var liList = this.menuUL.find('li').removeClass('non-match');
                text = Q.trimToNull(text);
                if (text == null) {
                    liList.show();
                    liList.removeClass('expanded');
                    return;
                }
                var parts = text.replace(',', ' ').split(' ').filter(function (x) { return !Q.isTrimmedEmpty(x); });
                for (var i = 0; i < parts.length; i++) {
                    parts[i] = Q.trimToNull(Select2.util.stripDiacritics(parts[i]).toUpperCase());
                }
                var items = liList;
                items.each(function (idx, e) {
                    var x = $(e);
                    var title = Select2.util.stripDiacritics(Q.coalesce(x.text(), '').toUpperCase());
                    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                        var p = parts_1[_i];
                        if (p != null && !(title.indexOf(p) !== -1)) {
                            x.addClass('non-match');
                            break;
                        }
                    }
                });
                var matchingItems = items.not('.non-match');
                var visibles = matchingItems.parents('li').add(matchingItems);
                var nonVisibles = liList.not(visibles);
                nonVisibles.hide().addClass('non-match');
                visibles.show();
                liList.addClass('expanded');
            };
            return SidebarSearch;
        }(Serenity.Widget));
        Common.SidebarSearch = SidebarSearch;
    })(Common = Store.Common || (Store.Common = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Common;
    (function (Common) {
        var PdfExportHelper;
        (function (PdfExportHelper) {
            function toAutoTableColumns(srcColumns, columnStyles, columnTitles) {
                return srcColumns.map(function (src) {
                    var col = {
                        dataKey: src.id || src.field,
                        title: src.name || ''
                    };
                    if (columnTitles && columnTitles[col.dataKey] != null)
                        col.title = columnTitles[col.dataKey];
                    var style = {};
                    if ((src.cssClass || '').indexOf("align-right") >= 0)
                        style.halign = 'right';
                    else if ((src.cssClass || '').indexOf("align-center") >= 0)
                        style.halign = 'center';
                    columnStyles[col.dataKey] = style;
                    return col;
                });
            }
            function toAutoTableData(entities, keys, srcColumns) {
                var el = document.createElement('span');
                var row = 0;
                return entities.map(function (item) {
                    var dst = {};
                    for (var cell = 0; cell < srcColumns.length; cell++) {
                        var src = srcColumns[cell];
                        var fld = src.field || '';
                        var key = keys[cell];
                        var txt = void 0;
                        var html = void 0;
                        if (src.formatter) {
                            html = src.formatter(row, cell, item[fld], src, item);
                        }
                        else if (src.format) {
                            html = src.format({ row: row, cell: cell, item: item, value: item[fld] });
                        }
                        else {
                            dst[key] = item[fld];
                            continue;
                        }
                        if (!html || (html.indexOf('<') < 0 && html.indexOf('&') < 0))
                            dst[key] = html;
                        else {
                            el.innerHTML = html;
                            if (el.children.length == 1 &&
                                $(el.children[0]).is(":input")) {
                                dst[key] = $(el.children[0]).val();
                            }
                            else if (el.children.length == 1 &&
                                $(el.children).is('.check-box')) {
                                dst[key] = $(el.children).hasClass("checked") ? "X" : "";
                            }
                            else
                                dst[key] = el.textContent || '';
                        }
                    }
                    row++;
                    return dst;
                });
            }
            function exportToPdf(options) {
                var g = options.grid;
                if (!options.onViewSubmit())
                    return;
                includeAutoTable();
                var request = Q.deepClone(g.view.params);
                request.Take = 0;
                request.Skip = 0;
                var sortBy = g.view.sortBy;
                if (sortBy != null)
                    request.Sort = sortBy;
                var gridColumns = g.slickGrid.getColumns();
                gridColumns = gridColumns.filter(function (x) { return x.id !== "__select__"; });
                request.IncludeColumns = [];
                for (var _i = 0, gridColumns_1 = gridColumns; _i < gridColumns_1.length; _i++) {
                    var column = gridColumns_1[_i];
                    request.IncludeColumns.push(column.id || column.field);
                }
                Q.serviceCall({
                    url: g.view.url,
                    request: request,
                    onSuccess: function (response) {
                        var doc = new jsPDF('l', 'pt');
                        var srcColumns = gridColumns;
                        var columnStyles = {};
                        var columns = toAutoTableColumns(srcColumns, columnStyles, options.columnTitles);
                        var keys = columns.map(function (x) { return x.dataKey; });
                        var entities = response.Entities || [];
                        var data = toAutoTableData(entities, keys, srcColumns);
                        doc.setFontSize(options.titleFontSize || 10);
                        doc.setFontStyle('bold');
                        var reportTitle = options.reportTitle || g.getTitle() || "Report";
                        doc.autoTableText(reportTitle, doc.internal.pageSize.width / 2, options.titleTop || 25, { halign: 'center' });
                        var totalPagesExp = "{{T}}";
                        var pageNumbers = options.pageNumbers == null || options.pageNumbers;
                        var autoOptions = $.extend({
                            margin: { top: 25, left: 25, right: 25, bottom: pageNumbers ? 25 : 30 },
                            startY: 60,
                            styles: {
                                fontSize: 8,
                                overflow: 'linebreak',
                                cellPadding: 2,
                                valign: 'middle'
                            },
                            columnStyles: columnStyles
                        }, options.tableOptions);
                        if (pageNumbers) {
                            var footer = function (data) {
                                var str = data.pageCount;
                                // Total page number plugin only available in jspdf v1.0+
                                if (typeof doc.putTotalPages === 'function') {
                                    str = str + " / " + totalPagesExp;
                                }
                                doc.autoTableText(str, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - autoOptions.margin.bottom, {
                                    halign: 'center'
                                });
                            };
                            autoOptions.afterPageContent = footer;
                        }
                        // Print header of page
                        if (options.printDateTimeHeader == null || options.printDateTimeHeader) {
                            var beforePage = function (data) {
                                doc.setFontStyle('normal');
                                doc.setFontSize(8);
                                // Date and time of the report
                                doc.autoTableText(Q.formatDate(new Date(), "dd-MM-yyyy HH:mm"), doc.internal.pageSize.width - autoOptions.margin.right, 13, {
                                    halign: 'right'
                                });
                            };
                            autoOptions.beforePageContent = beforePage;
                        }
                        doc.autoTable(columns, data, autoOptions);
                        if (typeof doc.putTotalPages === 'function') {
                            doc.putTotalPages(totalPagesExp);
                        }
                        if (!options.output || options.output == "file") {
                            var fileName = options.fileName || options.reportTitle || "{0}_{1}.pdf";
                            fileName = Q.format(fileName, g.getTitle() || "report", Q.formatDate(new Date(), "yyyyMMdd_HHmm"));
                            doc.save(fileName);
                            return;
                        }
                        if (options.autoPrint)
                            doc.autoPrint();
                        var output = options.output;
                        if (output == 'newwindow' || '_blank')
                            output = 'dataurlnewwindow';
                        else if (output == 'window')
                            output = 'datauri';
                        doc.output(output);
                    }
                });
            }
            PdfExportHelper.exportToPdf = exportToPdf;
            function createToolButton(options) {
                return {
                    title: options.title || '',
                    hint: options.hint || 'PDF',
                    cssClass: 'export-pdf-button',
                    onClick: function () { return exportToPdf(options); },
                    separator: options.separator
                };
            }
            PdfExportHelper.createToolButton = createToolButton;
            function includeJsPDF() {
                if (typeof jsPDF !== "undefined")
                    return;
                var script = $("jsPDFScript");
                if (script.length > 0)
                    return;
                $("<script/>")
                    .attr("type", "text/javascript")
                    .attr("id", "jsPDFScript")
                    .attr("src", Q.resolveUrl("~/Scripts/jspdf.min.js"))
                    .appendTo(document.head);
            }
            function includeAutoTable() {
                includeJsPDF();
                if (typeof jsPDF === "undefined" ||
                    typeof jsPDF.API == "undefined" ||
                    typeof jsPDF.API.autoTable !== "undefined")
                    return;
                var script = $("jsPDFAutoTableScript");
                if (script.length > 0)
                    return;
                $("<script/>")
                    .attr("type", "text/javascript")
                    .attr("id", "jsPDFAutoTableScript")
                    .attr("src", Q.resolveUrl("~/Scripts/jspdf.plugin.autotable.min.js"))
                    .appendTo(document.head);
            }
        })(PdfExportHelper = Common.PdfExportHelper || (Common.PdfExportHelper = {}));
    })(Common = Store.Common || (Store.Common = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Common;
    (function (Common) {
        var ReportDialog = /** @class */ (function (_super) {
            __extends(ReportDialog, _super);
            function ReportDialog(options) {
                var _this = _super.call(this, options) || this;
                _this.updateInterface();
                _this.loadReport(_this.options.reportKey);
                return _this;
            }
            ReportDialog.prototype.getDialogButtons = function () {
                return null;
            };
            ReportDialog.prototype.createPropertyGrid = function () {
                this.propertyGrid && this.byId('PropertyGrid').html('').attr('class', '');
                this.propertyGrid = new Serenity.PropertyGrid(this.byId('PropertyGrid'), {
                    idPrefix: this.idPrefix,
                    useCategories: true,
                    items: this.report.Properties
                }).init(null);
            };
            ReportDialog.prototype.loadReport = function (reportKey) {
                var _this = this;
                Q.serviceCall({
                    url: Q.resolveUrl('~/Report/Retrieve'),
                    request: {
                        ReportKey: reportKey
                    },
                    onSuccess: function (response) {
                        _this.report = response;
                        _this.element.dialog().dialog('option', 'title', _this.report.Title);
                        _this.createPropertyGrid();
                        _this.propertyGrid.load(_this.report.InitialSettings || {});
                        _this.updateInterface();
                        _this.dialogOpen();
                    }
                });
            };
            ReportDialog.prototype.updateInterface = function () {
                this.toolbar.findButton('print-preview-button')
                    .toggle(this.report && !this.report.IsDataOnlyReport);
                this.toolbar.findButton('export-pdf-button')
                    .toggle(this.report && !this.report.IsDataOnlyReport);
                this.toolbar.findButton('export-xlsx-button')
                    .toggle(this.report && this.report.IsDataOnlyReport);
            };
            ReportDialog.prototype.executeReport = function (target, ext, download) {
                if (!this.validateForm()) {
                    return;
                }
                var opt = {};
                this.propertyGrid.save(opt);
                Common.ReportHelper.execute({
                    download: download,
                    reportKey: this.report.ReportKey,
                    extension: ext,
                    target: target,
                    params: opt
                });
            };
            ReportDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                return [
                    {
                        title: 'Preview',
                        cssClass: 'print-preview-button',
                        onClick: function () { return _this.executeReport('_blank', null, false); }
                    },
                    {
                        title: 'PDF',
                        cssClass: 'export-pdf-button',
                        onClick: function () { return _this.executeReport('_blank', 'pdf', true); }
                    },
                    {
                        title: 'Excel',
                        cssClass: 'export-xlsx-button',
                        onClick: function () { return _this.executeReport('_blank', 'xlsx', true); }
                    }
                ];
            };
            return ReportDialog;
        }(Serenity.TemplatedDialog));
        Common.ReportDialog = ReportDialog;
    })(Common = Store.Common || (Store.Common = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Common;
    (function (Common) {
        var ReportHelper;
        (function (ReportHelper) {
            function createToolButton(options) {
                return {
                    title: Q.coalesce(options.title, 'Report'),
                    cssClass: Q.coalesce(options.cssClass, 'print-button'),
                    icon: options.icon,
                    onClick: function () {
                        ReportHelper.execute(options);
                    }
                };
            }
            ReportHelper.createToolButton = createToolButton;
            function execute(options) {
                var opt = options.getParams ? options.getParams() : options.params;
                Q.postToUrl({
                    url: '~/Report/' + (options.download ? 'Download' : 'Render'),
                    params: {
                        key: options.reportKey,
                        ext: Q.coalesce(options.extension, 'pdf'),
                        opt: opt ? $.toJSON(opt) : ''
                    },
                    target: Q.coalesce(options.target, '_blank')
                });
            }
            ReportHelper.execute = execute;
        })(ReportHelper = Common.ReportHelper || (Common.ReportHelper = {}));
    })(Common = Store.Common || (Store.Common = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Common;
    (function (Common) {
        var ReportPage = /** @class */ (function (_super) {
            __extends(ReportPage, _super);
            function ReportPage(element) {
                var _this = _super.call(this, element) || this;
                $('.report-link', element).click(function (e) { return _this.reportLinkClick(e); });
                $('div.line', element).click(function (e) { return _this.categoryClick(e); });
                new Serenity.QuickSearchInput($('.s-QuickSearchBar input', element), {
                    onSearch: function (field, text, done) {
                        _this.updateMatchFlags(text);
                        done(true);
                    }
                });
                return _this;
            }
            ReportPage.prototype.updateMatchFlags = function (text) {
                var liList = $('.report-list', this.element).find('li').removeClass('non-match');
                text = Q.trimToNull(text);
                if (!text) {
                    liList.children('ul').hide();
                    liList.show().removeClass('expanded');
                    return;
                }
                text = Select2.util.stripDiacritics(text).toUpperCase();
                var reportItems = liList.filter('.report-item');
                reportItems.each(function (ix, e) {
                    var x = $(e);
                    var title = Select2.util.stripDiacritics(Q.coalesce(x.text(), '').toUpperCase());
                    if (title.indexOf(text) < 0) {
                        x.addClass('non-match');
                    }
                });
                var matchingItems = reportItems.not('.non-match');
                var visibles = matchingItems.parents('li').add(matchingItems);
                var nonVisibles = liList.not(visibles);
                nonVisibles.hide().addClass('non-match');
                visibles.show();
                if (visibles.length <= 100) {
                    liList.children('ul').show();
                    liList.addClass('expanded');
                }
            };
            ReportPage.prototype.categoryClick = function (e) {
                var li = $(e.target).closest('li');
                if (li.hasClass('expanded')) {
                    li.find('ul').hide('fast');
                    li.removeClass('expanded');
                    li.find('li').removeClass('expanded');
                }
                else {
                    li.addClass('expanded');
                    li.children('ul').show('fast');
                    if (li.children('ul').children('li').length === 1 && !li.children('ul').children('li').hasClass('expanded')) {
                        li.children('ul').children('li').children('.line').click();
                    }
                }
            };
            ReportPage.prototype.reportLinkClick = function (e) {
                e.preventDefault();
                new Common.ReportDialog({
                    reportKey: $(e.target).data('key')
                }).dialogOpen();
            };
            return ReportPage;
        }(Serenity.Widget));
        Common.ReportPage = ReportPage;
    })(Common = Store.Common || (Store.Common = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var LoginPanel = /** @class */ (function (_super) {
            __extends(LoginPanel, _super);
            function LoginPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.byId('LoginButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/Login'),
                        request: request,
                        onSuccess: function (response) {
                            _this.redirectToReturnUrl();
                        },
                        onError: function (response) {
                            if (response != null && response.Error != null && response.Error.Code == "RedirectUserTo") {
                                window.location.href = response.Error.Arguments;
                                return;
                            }
                            if (response != null && response.Error != null && !Q.isEmptyOrNull(response.Error.Message)) {
                                Q.notifyError(response.Error.Message);
                                $('#Password').focus();
                                return;
                            }
                            Q.ErrorHandling.showServiceError(response.Error);
                        }
                    });
                });
                return _this;
            }
            LoginPanel.prototype.getFormKey = function () { return Membership.LoginForm.formKey; };
            LoginPanel.prototype.redirectToReturnUrl = function () {
                var q = Q.parseQueryString();
                var returnUrl = q['returnUrl'] || q['ReturnUrl'];
                if (returnUrl) {
                    var hash = window.location.hash;
                    if (hash != null && hash != '#')
                        returnUrl += hash;
                    window.location.href = returnUrl;
                }
                else {
                    window.location.href = Q.resolveUrl('~/');
                }
            };
            LoginPanel.prototype.getTemplate = function () {
                return "\n    <h2 class=\"text-center p-4\">\n        <img src=\"" + Q.resolveUrl("~/Content/site/images/serenity-logo-w-128.png") + "\"\n            class=\"rounded-circle p-1\" style=\"background-color: var(--s-sidebar-band-bg)\"\n            width=\"50\" height=\"50\" /> Store\n    </h2>\n\n    <div class=\"s-Panel p-4\">\n        <h5 class=\"text-center my-4\">" + Q.text("Forms.Membership.Login.LoginToYourAccount") + "</h5>\n        <form id=\"~_Form\" action=\"\">\n            <div id=\"~_PropertyGrid\"></div>\n            <div class=\"px-field\">\n                <a class=\"float-end text-decoration-none\" href=\"" + Q.resolveUrl('~/Account/ForgotPassword') + "\">\n                    " + Q.text("Forms.Membership.Login.ForgotPassword") + "\n                </a>\n            </div>\n            <div class=\"px-field\">\n                <button id=\"~_LoginButton\" type=\"submit\" class=\"btn btn-primary my-3 w-100\">\n                    " + Q.text("Forms.Membership.Login.SignInButton") + "\n                </button>\n            </div>\n        </form>\n    </div>\n\n    <div class=\"text-center mt-2\">\n        <a class=\"text-decoration-none\" href=\"" + Q.resolveUrl('~/Account/SignUp') + "\">" + Q.text("Forms.Membership.Login.SignUpButton") + "</a>\n    </div>   \n";
            };
            LoginPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], LoginPanel);
            return LoginPanel;
        }(Serenity.PropertyPanel));
        Membership.LoginPanel = LoginPanel;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var ChangePasswordPanel = /** @class */ (function (_super) {
            __extends(ChangePasswordPanel, _super);
            function ChangePasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ChangePasswordForm(_this.idPrefix);
                _this.form.NewPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.w('ConfirmPassword', Serenity.PasswordEditor).value.length < 7) {
                        return Q.format(Q.text('Validation.MinRequiredPasswordLength'), 7);
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.NewPassword.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ChangePassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ChangePassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            ChangePasswordPanel.prototype.getFormKey = function () { return Membership.ChangePasswordForm.formKey; };
            ChangePasswordPanel.prototype.getTemplate = function () {
                return "<div class=\"s-Panel\">\n    <h3 class=\"page-title mb-4 text-center\">" + Q.text("Forms.Membership.ChangePassword.FormTitle") + "</h3>\n    <form id=\"~_Form\" action=\"\">\n        <div id=\"~_PropertyGrid\"></div>\n        <div class=\"px-field mt-4\">\n            <button id=\"~_SubmitButton\" type=\"submit\" class=\"btn btn-primary w-100\">\n                " + Q.text("Forms.Membership.ChangePassword.SubmitButton") + "\n            </button>\n        </div>\n    </form>\n</div>";
            };
            ChangePasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ChangePasswordPanel);
            return ChangePasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ChangePasswordPanel = ChangePasswordPanel;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var ForgotPasswordPanel = /** @class */ (function (_super) {
            __extends(ForgotPasswordPanel, _super);
            function ForgotPasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ForgotPasswordForm(_this.idPrefix);
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ForgotPassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ForgotPassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            ForgotPasswordPanel.prototype.getFormKey = function () { return Membership.ForgotPasswordForm.formKey; };
            ForgotPasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ForgotPasswordPanel);
            return ForgotPasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ForgotPasswordPanel = ForgotPasswordPanel;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var ResetPasswordPanel = /** @class */ (function (_super) {
            __extends(ResetPasswordPanel, _super);
            function ResetPasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ResetPasswordForm(_this.idPrefix);
                _this.form.NewPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.NewPassword.value.length < 7) {
                        return Q.format(Q.text('Validation.MinRequiredPasswordLength'), 7);
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.NewPassword.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    request.Token = _this.byId('Token').val();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ResetPassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ResetPassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/Account/Login');
                            });
                        }
                    });
                });
                return _this;
            }
            ResetPasswordPanel.prototype.getFormKey = function () { return Membership.ResetPasswordForm.formKey; };
            ResetPasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ResetPasswordPanel);
            return ResetPasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ResetPasswordPanel = ResetPasswordPanel;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store) {
    var Membership;
    (function (Membership) {
        var SignUpPanel = /** @class */ (function (_super) {
            __extends(SignUpPanel, _super);
            function SignUpPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.SignUpForm(_this.idPrefix);
                _this.form.ConfirmEmail.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmEmail.value !== _this.form.Email.value) {
                        return Q.text('Validation.EmailConfirm');
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.Password.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/SignUp'),
                        request: {
                            DisplayName: _this.form.DisplayName.value,
                            Email: _this.form.Email.value,
                            Password: _this.form.Password.value
                        },
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.SignUp.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            SignUpPanel.prototype.getFormKey = function () { return Membership.SignUpForm.formKey; };
            SignUpPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], SignUpPanel);
            return SignUpPanel;
        }(Serenity.PropertyPanel));
        Membership.SignUpPanel = SignUpPanel;
    })(Membership = Store.Membership || (Store.Membership = {}));
})(Store || (Store = {}));
var Store;
(function (Store_90) {
    var Store;
    (function (Store) {
        var CategoriesDialog = /** @class */ (function (_super) {
            __extends(CategoriesDialog, _super);
            function CategoriesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Store.CategoriesForm(_this.idPrefix);
                return _this;
            }
            CategoriesDialog.prototype.getFormKey = function () { return Store.CategoriesForm.formKey; };
            CategoriesDialog.prototype.getIdProperty = function () { return Store.CategoriesRow.idProperty; };
            CategoriesDialog.prototype.getLocalTextPrefix = function () { return Store.CategoriesRow.localTextPrefix; };
            CategoriesDialog.prototype.getNameProperty = function () { return Store.CategoriesRow.nameProperty; };
            CategoriesDialog.prototype.getService = function () { return Store.CategoriesService.baseUrl; };
            CategoriesDialog.prototype.getDeletePermission = function () { return Store.CategoriesRow.deletePermission; };
            CategoriesDialog.prototype.getInsertPermission = function () { return Store.CategoriesRow.insertPermission; };
            CategoriesDialog.prototype.getUpdatePermission = function () { return Store.CategoriesRow.updatePermission; };
            CategoriesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CategoriesDialog);
            return CategoriesDialog;
        }(Serenity.EntityDialog));
        Store.CategoriesDialog = CategoriesDialog;
    })(Store = Store_90.Store || (Store_90.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_91) {
    var Store;
    (function (Store) {
        var CategoriesExcelImportDialog = /** @class */ (function (_super) {
            __extends(CategoriesExcelImportDialog, _super);
            function CategoriesExcelImportDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.CategoriesExcelImportForm(_this.idPrefix);
                return _this;
            }
            CategoriesExcelImportDialog.prototype.getDialogTitle = function () {
                return "Excel Import";
            };
            CategoriesExcelImportDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Import',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            if (_this.form.FileName.value == null ||
                                Q.isEmptyOrNull(_this.form.FileName.value.Filename)) {
                                Q.notifyError("Please select a file!");
                                return;
                            }
                            Store.CategoriesService.ExcelImport({
                                FileName: _this.form.FileName.value.Filename
                            }, function (response) {
                                Q.notifyInfo('Inserted: ' + (response.Inserted || 0) +
                                    ', Updated: ' + (response.Updated || 0));
                                if (response.ErrorList != null && response.ErrorList.length > 0) {
                                    Q.notifyError(response.ErrorList.join(',\r\n '));
                                }
                                _this.dialogClose();
                            });
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            CategoriesExcelImportDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CategoriesExcelImportDialog);
            return CategoriesExcelImportDialog;
        }(Serenity.PropertyDialog));
        Store.CategoriesExcelImportDialog = CategoriesExcelImportDialog;
    })(Store = Store_91.Store || (Store_91.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_92) {
    var Store;
    (function (Store) {
        var CategoriesGrid = /** @class */ (function (_super) {
            __extends(CategoriesGrid, _super);
            function CategoriesGrid(container) {
                return _super.call(this, container) || this;
                //this.slickContainer.on('change', '.edit:input', (e) => this.inputsChange(e));
            }
            CategoriesGrid.prototype.getColumnsKey = function () { return 'Store.Categories'; };
            CategoriesGrid.prototype.getDialogType = function () { return Store.CategoriesDialog; };
            CategoriesGrid.prototype.getIdProperty = function () { return Store.CategoriesRow.idProperty; };
            CategoriesGrid.prototype.getInsertPermission = function () { return Store.CategoriesRow.insertPermission; };
            CategoriesGrid.prototype.getLocalTextPrefix = function () { return Store.CategoriesRow.localTextPrefix; };
            CategoriesGrid.prototype.getService = function () { return Store.CategoriesService.baseUrl; };
            CategoriesGrid.prototype.getQuickFilters = function () {
                var flt = _super.prototype.getQuickFilters.call(this);
                var q = Q.parseQueryString();
                if (q["cattype"]) {
                    var cattype = Q.tryFirst(flt, function (x) { return x.field == "CategoriesType"; });
                    cattype.init = function (e) {
                        e.element.getWidget(Serenity.LookupEditor).value = q["cattype"];
                    };
                }
                return flt;
            };
            //protected getQuickFilters(): Serenity.QuickSearchField[] {
            //    return [
            //        { name: "CategoriesTypeID", title: "cattype" }];
            //}
            CategoriesGrid.prototype.getDefaultSortBy = function () {
                return ["CategoryName" /* CategoryName */];
            };
            CategoriesGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(Store_92.Common.ExcelExportHelper.createToolButton({
                    title: 'Export To Excel',
                    grid: this,
                    service: Store.CategoriesService.baseUrl + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
                buttons.push({
                    title: 'Import From Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        // open import dialog, let it handle rest
                        var dialog = new Store.CategoriesExcelImportDialog();
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            CategoriesGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable()
            ], CategoriesGrid);
            return CategoriesGrid;
        }(Serenity.EntityGrid));
        Store.CategoriesGrid = CategoriesGrid;
    })(Store = Store_92.Store || (Store_92.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_93) {
    var Store;
    (function (Store) {
        var CategoriesTypeDialog = /** @class */ (function (_super) {
            __extends(CategoriesTypeDialog, _super);
            function CategoriesTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Store.CategoriesTypeForm(_this.idPrefix);
                return _this;
            }
            CategoriesTypeDialog.prototype.getFormKey = function () { return Store.CategoriesTypeForm.formKey; };
            CategoriesTypeDialog.prototype.getIdProperty = function () { return Store.CategoriesTypeRow.idProperty; };
            CategoriesTypeDialog.prototype.getLocalTextPrefix = function () { return Store.CategoriesTypeRow.localTextPrefix; };
            CategoriesTypeDialog.prototype.getNameProperty = function () { return Store.CategoriesTypeRow.nameProperty; };
            CategoriesTypeDialog.prototype.getService = function () { return Store.CategoriesTypeService.baseUrl; };
            CategoriesTypeDialog.prototype.getDeletePermission = function () { return Store.CategoriesTypeRow.deletePermission; };
            CategoriesTypeDialog.prototype.getInsertPermission = function () { return Store.CategoriesTypeRow.insertPermission; };
            CategoriesTypeDialog.prototype.getUpdatePermission = function () { return Store.CategoriesTypeRow.updatePermission; };
            CategoriesTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CategoriesTypeDialog);
            return CategoriesTypeDialog;
        }(Serenity.EntityDialog));
        Store.CategoriesTypeDialog = CategoriesTypeDialog;
    })(Store = Store_93.Store || (Store_93.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_94) {
    var Store;
    (function (Store) {
        var CategoriesTypeGrid = /** @class */ (function (_super) {
            __extends(CategoriesTypeGrid, _super);
            function CategoriesTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            CategoriesTypeGrid.prototype.getColumnsKey = function () { return 'Store.CategoriesType'; };
            CategoriesTypeGrid.prototype.getDialogType = function () { return Store.CategoriesTypeDialog; };
            CategoriesTypeGrid.prototype.getIdProperty = function () { return Store.CategoriesTypeRow.idProperty; };
            CategoriesTypeGrid.prototype.getInsertPermission = function () { return Store.CategoriesTypeRow.insertPermission; };
            CategoriesTypeGrid.prototype.getLocalTextPrefix = function () { return Store.CategoriesTypeRow.localTextPrefix; };
            CategoriesTypeGrid.prototype.getService = function () { return Store.CategoriesTypeService.baseUrl; };
            CategoriesTypeGrid.prototype.getDefaultSortBy = function () {
                return ["Type" /* Type */];
            };
            CategoriesTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CategoriesTypeGrid);
            return CategoriesTypeGrid;
        }(Serenity.EntityGrid));
        Store.CategoriesTypeGrid = CategoriesTypeGrid;
    })(Store = Store_94.Store || (Store_94.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_95) {
    var Store;
    (function (Store) {
        var CounterpartiesDialog = /** @class */ (function (_super) {
            __extends(CounterpartiesDialog, _super);
            function CounterpartiesDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.CounterpartiesForm(_this.idPrefix);
                _this.ProductMoveGrid = new Store.CounterpartiesProductMovementGrid(_this.byId('ProductMovementGrid'));
                _this.WaresMoveGrid = new Store.CounterpartiesWaresMovementGrid(_this.byId('WaresMovementGrid'));
                /// force order dialog to open in Dialog mode instead of Panel mode
                /// which is set as default on OrderDialog with @panelAttribute
                _this.ProductMoveGrid.openDialogsAsPanel = false;
                _this.WaresMoveGrid.openDialogsAsPanel = false;
                _this.byId('NotesList').closest('.field').hide().end().appendTo(_this.byId('TabNotes'));
                Store_95.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            CounterpartiesDialog.prototype.getFormKey = function () { return Store.CounterpartiesForm.formKey; };
            CounterpartiesDialog.prototype.getIdProperty = function () { return Store.CounterpartiesRow.idProperty; };
            CounterpartiesDialog.prototype.getLocalTextPrefix = function () { return Store.CounterpartiesRow.localTextPrefix; };
            CounterpartiesDialog.prototype.getNameProperty = function () { return Store.CounterpartiesRow.nameProperty; };
            CounterpartiesDialog.prototype.getService = function () { return Store.CounterpartiesService.baseUrl; };
            CounterpartiesDialog.prototype.getDeletePermission = function () { return Store.CounterpartiesRow.deletePermission; };
            CounterpartiesDialog.prototype.getInsertPermission = function () { return Store.CounterpartiesRow.insertPermission; };
            CounterpartiesDialog.prototype.getUpdatePermission = function () { return Store.CounterpartiesRow.updatePermission; };
            CounterpartiesDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            CounterpartiesDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            CounterpartiesDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Product Movement', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Wares Movement', this.isNewOrDeleted());
                this.ProductMoveGrid.counterpartyId = entity.CounterpartyId;
                this.WaresMoveGrid.counterpartyId = entity.CounterpartyId;
            };
            CounterpartiesDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                Q.reloadLookup('Store.Counterparties');
            };
            CounterpartiesDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel()
            ], CounterpartiesDialog);
            return CounterpartiesDialog;
        }(Serenity.EntityDialog));
        Store.CounterpartiesDialog = CounterpartiesDialog;
    })(Store = Store_95.Store || (Store_95.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_96) {
    var Store;
    (function (Store) {
        var CounterpartiesEditor = /** @class */ (function (_super) {
            __extends(CounterpartiesEditor, _super);
            function CounterpartiesEditor(hidden) {
                return _super.call(this, hidden) || this;
            }
            CounterpartiesEditor.prototype.getLookupKey = function () {
                return Store.CounterpartiesRow.lookupKey;
            };
            CounterpartiesEditor.prototype.getItemText = function (item, lookup) {
                return _super.prototype.getItemText.call(this, item, lookup) + ' [' + item.CounterpartyId + ']';
            };
            CounterpartiesEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], CounterpartiesEditor);
            return CounterpartiesEditor;
        }(Serenity.LookupEditorBase));
        Store.CounterpartiesEditor = CounterpartiesEditor;
    })(Store = Store_96.Store || (Store_96.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_97) {
    var Store;
    (function (Store) {
        var CounterpartiesGrid = /** @class */ (function (_super) {
            __extends(CounterpartiesGrid, _super);
            function CounterpartiesGrid(container) {
                return _super.call(this, container) || this;
            }
            CounterpartiesGrid.prototype.getColumnsKey = function () { return 'Store.Counterparties'; };
            CounterpartiesGrid.prototype.getDialogType = function () { return Store.CounterpartiesDialog; };
            CounterpartiesGrid.prototype.getIdProperty = function () { return Store.CounterpartiesRow.idProperty; };
            CounterpartiesGrid.prototype.getInsertPermission = function () { return Store.CounterpartiesRow.insertPermission; };
            CounterpartiesGrid.prototype.getLocalTextPrefix = function () { return Store.CounterpartiesRow.localTextPrefix; };
            CounterpartiesGrid.prototype.getService = function () { return Store.CounterpartiesService.baseUrl; };
            CounterpartiesGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(Store_97.Common.ExcelExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    service: 'Store/Counterparties/ListExcel',
                    separator: true
                }));
                buttons.push(Store_97.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); }
                }));
                return buttons;
            };
            CounterpartiesGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable()
            ], CounterpartiesGrid);
            return CounterpartiesGrid;
        }(Serenity.EntityGrid));
        Store.CounterpartiesGrid = CounterpartiesGrid;
    })(Store = Store_97.Store || (Store_97.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_98) {
    var Store;
    (function (Store) {
        var DocumentTypeDialog = /** @class */ (function (_super) {
            __extends(DocumentTypeDialog, _super);
            function DocumentTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Store.DocumentTypeForm(_this.idPrefix);
                return _this;
            }
            DocumentTypeDialog.prototype.getFormKey = function () { return Store.DocumentTypeForm.formKey; };
            DocumentTypeDialog.prototype.getIdProperty = function () { return Store.DocumentTypeRow.idProperty; };
            DocumentTypeDialog.prototype.getLocalTextPrefix = function () { return Store.DocumentTypeRow.localTextPrefix; };
            DocumentTypeDialog.prototype.getNameProperty = function () { return Store.DocumentTypeRow.nameProperty; };
            DocumentTypeDialog.prototype.getService = function () { return Store.DocumentTypeService.baseUrl; };
            DocumentTypeDialog.prototype.getDeletePermission = function () { return Store.DocumentTypeRow.deletePermission; };
            DocumentTypeDialog.prototype.getInsertPermission = function () { return Store.DocumentTypeRow.insertPermission; };
            DocumentTypeDialog.prototype.getUpdatePermission = function () { return Store.DocumentTypeRow.updatePermission; };
            DocumentTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], DocumentTypeDialog);
            return DocumentTypeDialog;
        }(Serenity.EntityDialog));
        Store.DocumentTypeDialog = DocumentTypeDialog;
    })(Store = Store_98.Store || (Store_98.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_99) {
    var Store;
    (function (Store) {
        var DocumentTypeGrid = /** @class */ (function (_super) {
            __extends(DocumentTypeGrid, _super);
            function DocumentTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            DocumentTypeGrid.prototype.getColumnsKey = function () { return 'Store.DocumentType'; };
            DocumentTypeGrid.prototype.getDialogType = function () { return Store.DocumentTypeDialog; };
            DocumentTypeGrid.prototype.getIdProperty = function () { return Store.DocumentTypeRow.idProperty; };
            DocumentTypeGrid.prototype.getInsertPermission = function () { return Store.DocumentTypeRow.insertPermission; };
            DocumentTypeGrid.prototype.getLocalTextPrefix = function () { return Store.DocumentTypeRow.localTextPrefix; };
            DocumentTypeGrid.prototype.getService = function () { return Store.DocumentTypeService.baseUrl; };
            DocumentTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DocumentTypeGrid);
            return DocumentTypeGrid;
        }(Serenity.EntityGrid));
        Store.DocumentTypeGrid = DocumentTypeGrid;
    })(Store = Store_99.Store || (Store_99.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_100) {
    var Store;
    (function (Store) {
        var EmployeesFormatter = /** @class */ (function () {
            function EmployeesFormatter() {
            }
            EmployeesFormatter.prototype.format = function (ctx) {
                var text = Q.htmlEncode(ctx.value);
                if (!this.genderProperty) {
                    return text;
                }
                var gender = ctx.item[this.genderProperty];
                return "<span class='" + ((gender === Store.Gender.Female) ?
                    'employee-symbol female' : 'employee-symbol male') +
                    "'>" + text + '</span>';
            };
            EmployeesFormatter.prototype.initializeColumn = function (column) {
                column.referencedFields = column.referencedFields || [];
                if (this.genderProperty)
                    column.referencedFields.push(this.genderProperty);
            };
            __decorate([
                Serenity.Decorators.option()
            ], EmployeesFormatter.prototype, "genderProperty", void 0);
            EmployeesFormatter = __decorate([
                Serenity.Decorators.registerFormatter([Serenity.ISlickFormatter, Serenity.IInitializeColumn])
            ], EmployeesFormatter);
            return EmployeesFormatter;
        }());
        Store.EmployeesFormatter = EmployeesFormatter;
    })(Store = Store_100.Store || (Store_100.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_101) {
    var Store;
    (function (Store) {
        var EmployeesListFormatter = /** @class */ (function () {
            function EmployeesListFormatter() {
            }
            EmployeesListFormatter.prototype.format = function (ctx) {
                var idList = ctx.value;
                if (!idList || !idList.length)
                    return "";
                var byId = Store.EmployeesRow.getLookup().itemById;
                var z;
                return idList.map(function (x) { return ((z = byId[x]) ? z.FullName : x); }).join(", ");
            };
            EmployeesListFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], EmployeesListFormatter);
            return EmployeesListFormatter;
        }());
        Store.EmployeesListFormatter = EmployeesListFormatter;
        //@Serenity.Decorators.registerFormatter([Serenity.ISlickFormatter, Serenity.IInitializeColumn])
        //export class EmployeeFormatter implements Slick.Formatter {
        //    format(ctx: Slick.FormatterContext) {
        //        var text = Q.htmlEncode(ctx.value);
        //        if (!this.genderProperty) {
        //            return text;
        //        }
        //        var gender = ctx.item[this.genderProperty];
        //        return "<span class='" + ((gender === Gender.Female) ?
        //            'employee-symbol female' : 'employee-symbol male') +
        //            "'>" + text + '</span>';
        //    }
        //    @Serenity.Decorators.option()
        //    public genderProperty: string;
        //    public initializeColumn(column: Slick.Column) {
        //        column.referencedFields = column.referencedFields || [];
        //        if (this.genderProperty)
        //            column.referencedFields.push(this.genderProperty);
        //    }
        //}
    })(Store = Store_101.Store || (Store_101.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_102) {
    var Store;
    (function (Store) {
        var MeasuresDialog = /** @class */ (function (_super) {
            __extends(MeasuresDialog, _super);
            function MeasuresDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Store.MeasuresForm(_this.idPrefix);
                return _this;
            }
            MeasuresDialog.prototype.getFormKey = function () { return Store.MeasuresForm.formKey; };
            MeasuresDialog.prototype.getIdProperty = function () { return Store.MeasuresRow.idProperty; };
            MeasuresDialog.prototype.getLocalTextPrefix = function () { return Store.MeasuresRow.localTextPrefix; };
            MeasuresDialog.prototype.getNameProperty = function () { return Store.MeasuresRow.nameProperty; };
            MeasuresDialog.prototype.getService = function () { return Store.MeasuresService.baseUrl; };
            MeasuresDialog.prototype.getDeletePermission = function () { return Store.MeasuresRow.deletePermission; };
            MeasuresDialog.prototype.getInsertPermission = function () { return Store.MeasuresRow.insertPermission; };
            MeasuresDialog.prototype.getUpdatePermission = function () { return Store.MeasuresRow.updatePermission; };
            MeasuresDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], MeasuresDialog);
            return MeasuresDialog;
        }(Serenity.EntityDialog));
        Store.MeasuresDialog = MeasuresDialog;
    })(Store = Store_102.Store || (Store_102.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_103) {
    var Store;
    (function (Store) {
        var MeasuresGrid = /** @class */ (function (_super) {
            __extends(MeasuresGrid, _super);
            function MeasuresGrid(container) {
                return _super.call(this, container) || this;
            }
            MeasuresGrid.prototype.getColumnsKey = function () { return 'Store.Measures'; };
            MeasuresGrid.prototype.getDialogType = function () { return Store.MeasuresDialog; };
            MeasuresGrid.prototype.getIdProperty = function () { return Store.MeasuresRow.idProperty; };
            MeasuresGrid.prototype.getInsertPermission = function () { return Store.MeasuresRow.insertPermission; };
            MeasuresGrid.prototype.getLocalTextPrefix = function () { return Store.MeasuresRow.localTextPrefix; };
            MeasuresGrid.prototype.getService = function () { return Store.MeasuresService.baseUrl; };
            MeasuresGrid.prototype.getDefaultSortBy = function () {
                return ["MeasureId" /* MeasureId */];
            };
            MeasuresGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MeasuresGrid);
            return MeasuresGrid;
        }(Serenity.EntityGrid));
        Store.MeasuresGrid = MeasuresGrid;
    })(Store = Store_103.Store || (Store_103.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_104) {
    var Store;
    (function (Store) {
        var OperationTypeDialog = /** @class */ (function (_super) {
            __extends(OperationTypeDialog, _super);
            function OperationTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Store.OperationTypeForm(_this.idPrefix);
                return _this;
            }
            OperationTypeDialog.prototype.getFormKey = function () { return Store.OperationTypeForm.formKey; };
            OperationTypeDialog.prototype.getIdProperty = function () { return Store.OperationTypeRow.idProperty; };
            OperationTypeDialog.prototype.getLocalTextPrefix = function () { return Store.OperationTypeRow.localTextPrefix; };
            OperationTypeDialog.prototype.getNameProperty = function () { return Store.OperationTypeRow.nameProperty; };
            OperationTypeDialog.prototype.getService = function () { return Store.OperationTypeService.baseUrl; };
            OperationTypeDialog.prototype.getDeletePermission = function () { return Store.OperationTypeRow.deletePermission; };
            OperationTypeDialog.prototype.getInsertPermission = function () { return Store.OperationTypeRow.insertPermission; };
            OperationTypeDialog.prototype.getUpdatePermission = function () { return Store.OperationTypeRow.updatePermission; };
            OperationTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OperationTypeDialog);
            return OperationTypeDialog;
        }(Serenity.EntityDialog));
        Store.OperationTypeDialog = OperationTypeDialog;
    })(Store = Store_104.Store || (Store_104.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_105) {
    var Store;
    (function (Store) {
        var OperationTypeEditor = /** @class */ (function (_super) {
            __extends(OperationTypeEditor, _super);
            function OperationTypeEditor(hidden) {
                return _super.call(this, hidden) || this;
            }
            OperationTypeEditor.prototype.getLookupKey = function () {
                return Store.OperationTypeRow.lookupKey;
            };
            OperationTypeEditor.prototype.getItemText = function (item, lookup) {
                return '[' + item.OpCode + '] ' + _super.prototype.getItemText.call(this, item, lookup);
            };
            OperationTypeEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], OperationTypeEditor);
            return OperationTypeEditor;
        }(Serenity.LookupEditorBase));
        Store.OperationTypeEditor = OperationTypeEditor;
    })(Store = Store_105.Store || (Store_105.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_106) {
    var Store;
    (function (Store) {
        var OperationTypeGrid = /** @class */ (function (_super) {
            __extends(OperationTypeGrid, _super);
            function OperationTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            OperationTypeGrid.prototype.getColumnsKey = function () { return 'Store.OperationType'; };
            OperationTypeGrid.prototype.getDialogType = function () { return Store.OperationTypeDialog; };
            OperationTypeGrid.prototype.getIdProperty = function () { return Store.OperationTypeRow.idProperty; };
            OperationTypeGrid.prototype.getInsertPermission = function () { return Store.OperationTypeRow.insertPermission; };
            OperationTypeGrid.prototype.getLocalTextPrefix = function () { return Store.OperationTypeRow.localTextPrefix; };
            OperationTypeGrid.prototype.getService = function () { return Store.OperationTypeService.baseUrl; };
            OperationTypeGrid.prototype.getDefaultSortBy = function () {
                return ["OpCode" /* OpCode */];
            };
            OperationTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OperationTypeGrid);
            return OperationTypeGrid;
        }(Serenity.EntityGrid));
        Store.OperationTypeGrid = OperationTypeGrid;
    })(Store = Store_106.Store || (Store_106.Store = {}));
})(Store || (Store = {}));
/// <reference path="../../Common/Helpers/GridEditorDialog.ts" />
var Store;
(function (Store_107) {
    var Store;
    (function (Store) {
        //export class ProductDetailsDialog extends Serenity.EntityDialog<ProductDetailsRow, any> {
        var ProductDetailsDialog = /** @class */ (function (_super) {
            __extends(ProductDetailsDialog, _super);
            function ProductDetailsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.ProductDetailsForm(_this.idPrefix);
                _this.form.WaresId.changeSelect2(function (e) {
                    var itemID = Q.toId(_this.form.WaresId.value);
                    if (itemID != null) {
                        _this.form.PlanPrice.value = Store.WaresRow.getLookup().itemById[itemID].UnitPrice;
                    }
                });
                _this.form.Discount.addValidationRule(_this.uniqueName, function (e) {
                    var price = _this.form.PlanPrice.value;
                    var quantity = _this.form.Quantity.value;
                    var quanprod = _this.form.ProductQuantity.value;
                    var discount = _this.form.Discount.value;
                    if (price != null && quantity != null && quanprod != null && discount != null &&
                        discount > 0 && discount >= price * quantity / quanprod) {
                        return "Discount can't be higher than total price!";
                    }
                });
                return _this;
            }
            ProductDetailsDialog.prototype.getFormKey = function () { return Store.ProductDetailsForm.formKey; };
            ProductDetailsDialog.prototype.getIdProperty = function () { return Store.ProductDetailsRow.idProperty; };
            ProductDetailsDialog.prototype.getLocalTextPrefix = function () { return Store.ProductDetailsRow.localTextPrefix; };
            ProductDetailsDialog.prototype.getService = function () { return Store.ProductDetailsService.baseUrl; };
            ProductDetailsDialog.prototype.getDeletePermission = function () { return Store.ProductDetailsRow.deletePermission; };
            ProductDetailsDialog.prototype.getInsertPermission = function () { return Store.ProductDetailsRow.insertPermission; };
            ProductDetailsDialog.prototype.getUpdatePermission = function () { return Store.ProductDetailsRow.updatePermission; };
            ProductDetailsDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                //this.toolbar.findButton('apply-changes-button').hide();
                //this.toolbar.findButton('save-and-close-button').hide();
            };
            ProductDetailsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductDetailsDialog);
            return ProductDetailsDialog;
        }(Store_107.Common.GridEditorDialog));
        Store.ProductDetailsDialog = ProductDetailsDialog;
    })(Store = Store_107.Store || (Store_107.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_108) {
    var Store;
    (function (Store) {
        var ProductDetailEditor = /** @class */ (function (_super) {
            __extends(ProductDetailEditor, _super);
            function ProductDetailEditor(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProductDetailEditor.prototype.getLookupKey = function () {
                return Store.WaresRow.lookupKey;
            };
            ProductDetailEditor.prototype.getItemText = function (item, lookup) {
                return _super.prototype.getItemText.call(this, item, lookup) +
                    ' (' +
                    '$' + Q.formatNumber(item.UnitPrice, '#, ##0.0000') +
                    //', ' + (item.UnitsInStock > 0 ? (item.UnitsInStock + ' in stock') : 'out of stock') +
                    //', ' + (item.SupplierCompanyName || 'Unknown') +
                    ')';
            };
            ProductDetailEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], ProductDetailEditor);
            return ProductDetailEditor;
        }(Serenity.LookupEditorBase));
        Store.ProductDetailEditor = ProductDetailEditor;
    })(Store = Store_108.Store || (Store_108.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_109) {
    var Store;
    (function (Store) {
        var ProductDetailsGrid = /** @class */ (function (_super) {
            __extends(ProductDetailsGrid, _super);
            function ProductDetailsGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.pendingChanges = {};
                _this.slickContainer.on('change', '.edit:input', function (e) { return _this.inputsChange(e); });
                return _this;
            }
            ProductDetailsGrid.prototype.getColumnsKey = function () { return 'Store.ProductDetails'; };
            ProductDetailsGrid.prototype.getDialogType = function () { return Store.ProductDetailsDialog; };
            ProductDetailsGrid.prototype.getIdProperty = function () { return Store.ProductDetailsRow.idProperty; };
            ProductDetailsGrid.prototype.getInsertPermission = function () { return Store.ProductDetailsRow.insertPermission; };
            ProductDetailsGrid.prototype.getLocalTextPrefix = function () { return Store.ProductDetailsRow.localTextPrefix; };
            ProductDetailsGrid.prototype.getService = function () { return Store.ProductDetailsService.baseUrl; };
            ProductDetailsGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push({
                    title: 'Save Changes',
                    cssClass: 'apply-changes-button disabled',
                    onClick: function (e) { return _this.saveClick(); },
                    separator: true
                });
                return buttons;
            };
            ProductDetailsGrid.prototype.numericInputFormatter = function (ctx) {
                var klass = 'edit numeric';
                var item = ctx.item;
                var pending = this.pendingChanges[item.WaresId];
                if (pending && pending[ctx.column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, ctx.column.field);
                return "<input type='text' class='" + klass +
                    "' data-field='" + ctx.column.field +
                    "' value='" + Q.formatNumber(value, '0.####') + "'/>";
            };
            ProductDetailsGrid.prototype.moneyInputFormatter = function (ctx) {
                var klass = 'edit numeric';
                var item = ctx.item;
                var pending = this.pendingChanges[item.WaresId];
                if (pending && pending[ctx.column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, ctx.column.field);
                return "<input type='text' style='text - align:right' class='" + klass +
                    "' data-field='" + ctx.column.field +
                    "' value='" + Q.formatNumber(value, '0.0000') + "'/>";
            };
            ProductDetailsGrid.prototype.stringInputFormatter = function (ctx) {
                var klass = 'edit string';
                var item = ctx.item;
                var pending = this.pendingChanges[item.WaresId];
                var column = ctx.column;
                if (pending && pending[column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, column.field);
                return "<input type='text' class='" + klass +
                    "' data-field='" + column.field +
                    "' value='" + Q.attrEncode(value) +
                    "' maxlength='" + column.sourceItem.maxLength + "'/>";
            };
            ProductDetailsGrid.prototype.selectFormatter = function (ctx, idField, lookup) {
                var klass = 'edit';
                var item = ctx.item;
                var pending = this.pendingChanges[item.WaresId];
                var column = ctx.column;
                if (pending && pending[idField] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, idField);
                var markup = "<select class='" + klass +
                    "' data-field='" + idField +
                    "' style='width: 100%; max-width: 100%'>";
                for (var _i = 0, _a = lookup.items; _i < _a.length; _i++) {
                    var c = _a[_i];
                    var id = c[lookup.idField];
                    markup += "<option value='" + Q.attrEncode(id) + "'";
                    if (id == value) {
                        markup += " selected";
                    }
                    markup += ">" + Q.htmlEncode(c[lookup.textField]) + "</option>";
                }
                return markup + "</select>";
            };
            ProductDetailsGrid.prototype.getEffectiveValue = function (item, field) {
                var pending = this.pendingChanges[item.WaresID];
                if (pending && pending[field] !== undefined) {
                    return pending[field];
                }
                return item[field];
            };
            ProductDetailsGrid.prototype.inputsChange = function (e) {
                var cell = this.slickGrid.getCellFromEvent(e);
                var item = this.itemAt(cell.row);
                var input = $(e.target);
                var field = input.data('field');
                var text = Q.coalesce(Q.trimToNull(input.val()), '0');
                var pending = this.pendingChanges[item.WaresId];
                var effective = this.getEffectiveValue(item, field);
                var oldText;
                if (input.hasClass("numeric"))
                    oldText = Q.formatNumber(effective, '0.####');
                else
                    oldText = effective;
                var value;
                if (field === 'UnitPrice') {
                    value = Q.parseDecimal(text);
                    if (value == null || isNaN(value)) {
                        Q.notifyError(Q.text('Validation.Decimal'), '', null);
                        input.val(oldText);
                        input.focus();
                        return;
                    }
                }
                else if (input.hasClass("numeric")) {
                    var i = Q.parseInteger(text);
                    if (isNaN(i) || i > 32767 || i < 0) {
                        Q.notifyError(Q.text('Validation.Integer'), '', null);
                        input.val(oldText);
                        input.focus();
                        return;
                    }
                    value = i;
                }
                else
                    value = text;
                if (!pending) {
                    this.pendingChanges[item.ProductId] = pending = {};
                }
                pending[field] = value;
                item[field] = value;
                this.view.refresh();
                if (input.hasClass("numeric"))
                    value = Q.formatNumber(value, '0.####');
                input.val(value).addClass('dirty');
                this.setSaveButtonState();
            };
            ProductDetailsGrid.prototype.setSaveButtonState = function () {
                this.toolbar.findButton('apply-changes-button').toggleClass('disabled', Object.keys(this.pendingChanges).length === 0);
            };
            ProductDetailsGrid.prototype.saveClick = function () {
                if (Object.keys(this.pendingChanges).length === 0) {
                    return;
                }
                // this calls save service for all modified rows, one by one
                // you could write a batch update service
                var keys = Object.keys(this.pendingChanges);
                var current = -1;
                var self = this;
                (function saveNext() {
                    if (++current >= keys.length) {
                        self.refresh();
                        return;
                    }
                    var key = keys[current];
                    var entity = Q.deepClone(self.pendingChanges[key]);
                    entity.ProductID = key;
                    Q.serviceRequest('Store/Product/Update', {
                        EntityId: key,
                        Entity: entity
                    }, function (response) {
                        delete self.pendingChanges[key];
                        saveNext();
                    });
                })();
            };
            ProductDetailsGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                this.view.setSummaryOptions({
                    aggregators: [new Slick.Aggregators.Sum("LineTotal" /* LineTotal */)]
                });
                return grid;
            };
            ProductDetailsGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                var num = function (ctx) { return _this.numericInputFormatter(ctx); };
                var str = function (ctx) { return _this.stringInputFormatter(ctx); };
                var mon = function (ctx) { return _this.moneyInputFormatter(ctx); };
                Q.first(columns, function (x) { return x.field === "PlanPrice" /* PlanPrice */; }).format = mon;
                Q.first(columns, function (x) { return x.field == "PlanPrice" /* PlanPrice */; }).cssClass += " col-unit-price";
                Q.first(columns, function (x) { return x.field === "Quantity" /* Quantity */; }).format = num;
                Q.first(columns, function (x) { return x.field === "ProductQuantity" /* ProductQuantity */; }).format = num;
                Q.first(columns, function (x) { return x.field === "LineTotal" /* LineTotal */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.sum ? ('Sum: ' + Q.coalesce(totals.sum[col.field], '')) : '');
                };
                return columns;
            };
            ProductDetailsGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.showFooterRow = true;
                return opt;
            };
            ProductDetailsGrid.prototype.usePager = function () {
                return false;
            };
            ProductDetailsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductDetailsGrid);
            return ProductDetailsGrid;
        }(Serenity.EntityGrid));
        Store.ProductDetailsGrid = ProductDetailsGrid;
    })(Store = Store_109.Store || (Store_109.Store = {}));
})(Store || (Store = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var Store;
(function (Store_110) {
    var Store;
    (function (Store) {
        var ProductDetailsEditor = /** @class */ (function (_super) {
            __extends(ProductDetailsEditor, _super);
            function ProductDetailsEditor(container) {
                return _super.call(this, container) || this;
            }
            ProductDetailsEditor.prototype.getColumnsKey = function () { return "Store.ProductDetails"; };
            ProductDetailsEditor.prototype.getDialogType = function () { return Store.ProductDetailsDialog; };
            ProductDetailsEditor.prototype.getLocalTextPrefix = function () { return Store.ProductDetailsRow.localTextPrefix; };
            ProductDetailsEditor.prototype.validateEntity = function (row, id) {
                row.WaresId = Q.toId(row.WaresId);
                var sameItem = Q.tryFirst(this.view.getItems(), function (x) { return x.WaresId === row.WaresId; });
                if (sameItem && this.id(sameItem) != id) {
                    Q.alert('This article is already in order details!');
                    return false;
                }
                row.WaresName = Store.WaresRow.getLookup().itemById[row.WaresId].WaresName;
                row.WaresCode = Store.WaresRow.getLookup().itemById[row.WaresId].WaresCode;
                row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) / (row.ProductQuantity || 0) - (row.Discount || 0);
                return true;
            };
            ProductDetailsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductDetailsEditor);
            return ProductDetailsEditor;
        }(Store_110.Common.GridEditorBase));
        Store.ProductDetailsEditor = ProductDetailsEditor;
    })(Store = Store_110.Store || (Store_110.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_111) {
    var Store;
    (function (Store) {
        var ProductMovementDialog = /** @class */ (function (_super) {
            __extends(ProductMovementDialog, _super);
            function ProductMovementDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.ProductMovementForm(_this.idPrefix);
                return _this;
            }
            ProductMovementDialog.prototype.getFormKey = function () { return Store.ProductMovementForm.formKey; };
            ProductMovementDialog.prototype.getIdProperty = function () { return Store.ProductMovementRow.idProperty; };
            ProductMovementDialog.prototype.getLocalTextPrefix = function () { return Store.ProductMovementRow.localTextPrefix; };
            ProductMovementDialog.prototype.getNameProperty = function () { return Store.ProductMovementRow.nameProperty; };
            ProductMovementDialog.prototype.getService = function () { return Store.ProductMovementService.baseUrl; };
            ProductMovementDialog.prototype.getDeletePermission = function () { return Store.ProductMovementRow.deletePermission; };
            ProductMovementDialog.prototype.getInsertPermission = function () { return Store.ProductMovementRow.insertPermission; };
            ProductMovementDialog.prototype.getUpdatePermission = function () { return Store.ProductMovementRow.updatePermission; };
            ProductMovementDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push(Store_111.Common.ReportHelper.createToolButton({
                    title: 'Invoice',
                    cssClass: 'export-pdf-button',
                    reportKey: 'Store.ProductMovementDetails',
                    getParams: function () { return ({
                        ProductMoveId: _this.get_entityId()
                    }); }
                }));
                return buttons;
            };
            ProductMovementDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton('export-pdf-button').toggle(this.isEditMode());
            };
            ProductMovementDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel()
            ], ProductMovementDialog);
            return ProductMovementDialog;
        }(Serenity.EntityDialog));
        Store.ProductMovementDialog = ProductMovementDialog;
    })(Store = Store_111.Store || (Store_111.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_112) {
    var Store;
    (function (Store) {
        var ProductMovementGrid = /** @class */ (function (_super) {
            __extends(ProductMovementGrid, _super);
            function ProductMovementGrid(container) {
                return _super.call(this, container) || this;
            }
            ProductMovementGrid.prototype.getColumnsKey = function () { return 'Store.ProductMovement'; };
            ProductMovementGrid.prototype.getDialogType = function () { return Store.ProductMovementDialog; };
            ProductMovementGrid.prototype.getIdProperty = function () { return Store.ProductMovementRow.idProperty; };
            ProductMovementGrid.prototype.getInsertPermission = function () { return Store.ProductMovementRow.insertPermission; };
            ProductMovementGrid.prototype.getLocalTextPrefix = function () { return Store.ProductMovementRow.localTextPrefix; };
            ProductMovementGrid.prototype.getService = function () { return Store.ProductMovementService.baseUrl; };
            ProductMovementGrid.prototype.getQuickFilters = function () {
                var _this = this;
                var filters = _super.prototype.getQuickFilters.call(this);
                filters.push({
                    type: Serenity.LookupEditor,
                    options: {
                        lookupKey: Store.ProductsRow.lookupKey
                    },
                    field: 'ProductId',
                    title: 'Contains Product in Details',
                    handler: function (p) {
                        _this.view.params.ProductId = Q.toId(p.value);
                    },
                    cssClass: 'hidden-xs'
                });
                return filters;
            };
            ProductMovementGrid.prototype.createQuickFilters = function () {
                _super.prototype.createQuickFilters.call(this);
                this.shippingStateFilter = this.findQuickFilter(Serenity.EnumEditor, "ShippingState" /* ShippingState */);
            };
            ProductMovementGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(Store_112.Common.ExcelExportHelper.createToolButton({
                    grid: this,
                    service: Store.ProductMovementService.baseUrl + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
                buttons.push(Store_112.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); }
                }));
                buttons.push({
                    title: 'Warehouse',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        var dialog = new Store.StoreAverageDialog();
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            ProductMovementGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(1, 0, {
                    field: 'Print Invoice',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action print-invoice" title="invoice">' +
                        '<i class="fa fa-file-pdf-o text-red"></i></a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                return columns;
            };
            ProductMovementGrid.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented())
                    return;
                var item = this.itemAt(row);
                var target = $(e.target);
                if (target.parent().hasClass('inline-action'))
                    target = target.parent();
                if (target.hasClass('inline-action')) {
                    e.preventDefault();
                    if (target.hasClass('print-invoice')) {
                        Store_112.Common.ReportHelper.execute({
                            reportKey: 'Store.ProductMovementDetails',
                            params: {
                                ProductMoveId: item.ProductMoveId
                            }
                        });
                    }
                }
            };
            ProductMovementGrid.prototype.set_shippingState = function (value) {
                this.shippingStateFilter.value = value == null ? '' : value.toString();
            };
            ProductMovementGrid.prototype.addButtonClick = function () {
                var eq = this.view.params.EqualityFilter;
                this.editItem({
                    CounterpartyId: eq ? eq.CounterpartyId : null
                });
            };
            ProductMovementGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable()
            ], ProductMovementGrid);
            return ProductMovementGrid;
        }(Serenity.EntityGrid));
        Store.ProductMovementGrid = ProductMovementGrid;
    })(Store = Store_112.Store || (Store_112.Store = {}));
})(Store || (Store = {}));
/// <reference path="../../Common/Helpers/GridEditorDialog.ts" />
var Store;
(function (Store_113) {
    var Store;
    (function (Store) {
        var ProductMovementDetailsDialog = /** @class */ (function (_super) {
            __extends(ProductMovementDetailsDialog, _super);
            function ProductMovementDetailsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.ProductMovementDetailsForm(_this.idPrefix);
                _this.form.ProductId.changeSelect2(function (e) {
                    var productID = Q.toId(_this.form.ProductId.value);
                    if (productID != null) {
                        _this.form.SinglePrice.value = Store.ProductsRow.getLookup().itemById[productID].UnitPrice;
                    }
                });
                _this.form.Discount.addValidationRule(_this.uniqueName, function (e) {
                    var price = _this.form.SinglePrice.value;
                    var quantity = _this.form.Quantity.value;
                    var discount = _this.form.Discount.value;
                    if (price != null && quantity != null && discount != null &&
                        discount > 0 && discount >= price * quantity) {
                        return "Discount can't be higher than total price!";
                    }
                });
                return _this;
            }
            ProductMovementDetailsDialog.prototype.getFormKey = function () { return Store.ProductMovementDetailsForm.formKey; };
            ProductMovementDetailsDialog.prototype.getIdProperty = function () { return Store.ProductMovementDetailsRow.idProperty; };
            ProductMovementDetailsDialog.prototype.getLocalTextPrefix = function () { return Store.ProductMovementDetailsRow.localTextPrefix; };
            ProductMovementDetailsDialog.prototype.getService = function () { return Store.ProductMovementDetailsService.baseUrl; };
            ProductMovementDetailsDialog.prototype.getDeletePermission = function () { return Store.ProductMovementDetailsRow.deletePermission; };
            ProductMovementDetailsDialog.prototype.getInsertPermission = function () { return Store.ProductMovementDetailsRow.insertPermission; };
            ProductMovementDetailsDialog.prototype.getUpdatePermission = function () { return Store.ProductMovementDetailsRow.updatePermission; };
            ProductMovementDetailsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductMovementDetailsDialog);
            return ProductMovementDetailsDialog;
        }(Store_113.Common.GridEditorDialog));
        Store.ProductMovementDetailsDialog = ProductMovementDetailsDialog;
    })(Store = Store_113.Store || (Store_113.Store = {}));
})(Store || (Store = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var Store;
(function (Store_114) {
    var Store;
    (function (Store) {
        var ProductMovementDetailsEditor = /** @class */ (function (_super) {
            __extends(ProductMovementDetailsEditor, _super);
            function ProductMovementDetailsEditor(container) {
                return _super.call(this, container) || this;
            }
            ProductMovementDetailsEditor.prototype.getColumnsKey = function () { return "Store.ProductMovementDetails"; };
            ProductMovementDetailsEditor.prototype.getDialogType = function () { return Store.ProductMovementDetailsDialog; };
            ProductMovementDetailsEditor.prototype.getLocalTextPrefix = function () { return Store.ProductMovementDetailsRow.localTextPrefix; };
            ProductMovementDetailsEditor.prototype.validateEntity = function (row, id) {
                row.ProductID = Q.toId(row.ProductID);
                var sameProduct = Q.tryFirst(this.view.getItems(), function (x) { return x.ProductId === row.ProductID; });
                if (sameProduct && this.id(sameProduct) !== id) {
                    Q.alert('This product is already in order details!');
                    return false;
                }
                row.ProductName = Store.ProductsRow.getLookup().itemById[row.ProductID].ProductName;
                row.TotalValue = (row.Quantity || 0) * (row.SinglePrice || 0) - (row.Discount || 0);
                //switch (row.ProductMoveOperationTypeOpCode) {
                //    case 302: {
                //        row.LineTotal = (row.Quantity || 0) * (row.IncomePrice || 0) - (row.Discount || 0);
                //        break;
                //    }
                //    case 401: {
                //        row.LineTotal = (row.Quantity || 0) * (row.SalePrice || 0) - (row.Discount || 0);
                //        break;
                //    }
                //    default: {
                //        row.LineTotal = (row.Quantity || 0) * (row.SinglePrice || 0) - (row.Discount || 0);
                //        break;
                //    }
                //}
                return true;
            };
            ProductMovementDetailsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductMovementDetailsEditor);
            return ProductMovementDetailsEditor;
        }(Store_114.Common.GridEditorBase));
        Store.ProductMovementDetailsEditor = ProductMovementDetailsEditor;
    })(Store = Store_114.Store || (Store_114.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_115) {
    var Store;
    (function (Store) {
        var ProductMovementDetailsGrid = /** @class */ (function (_super) {
            __extends(ProductMovementDetailsGrid, _super);
            function ProductMovementDetailsGrid(container) {
                return _super.call(this, container) || this;
            }
            ProductMovementDetailsGrid.prototype.getColumnsKey = function () { return 'Store.ProductMovementDetails'; };
            ProductMovementDetailsGrid.prototype.getDialogType = function () { return Store.ProductMovementDetailsDialog; };
            ProductMovementDetailsGrid.prototype.getIdProperty = function () { return Store.ProductMovementDetailsRow.idProperty; };
            ProductMovementDetailsGrid.prototype.getInsertPermission = function () { return Store.ProductMovementDetailsRow.insertPermission; };
            ProductMovementDetailsGrid.prototype.getLocalTextPrefix = function () { return Store.ProductMovementDetailsRow.localTextPrefix; };
            ProductMovementDetailsGrid.prototype.getService = function () { return Store.ProductMovementDetailsService.baseUrl; };
            ProductMovementDetailsGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                // need to register this plugin for grouping or you'll have errors
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                this.view.setSummaryOptions({
                    aggregators: [
                        new Slick.Aggregators.Sum("RetailValue" /* RetailValue */),
                        new Slick.Aggregators.Sum("VAT" /* VAT */),
                        new Slick.Aggregators.Sum("TotalValue" /* TotalValue */)
                    ]
                });
                return grid;
            };
            ProductMovementDetailsGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                Q.first(columns, function (x) { return x.field === "RetailValue" /* RetailValue */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.sum ? ('sum: ' + Q.coalesce(totals.sum[col.field], '')) : '');
                };
                Q.first(columns, function (x) { return x.field === "VAT" /* VAT */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.sum ? ('sum: ' + Q.coalesce(totals.sum[col.field], '')) : '');
                };
                Q.first(columns, function (x) { return x.field === "TotalValue" /* TotalValue */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.sum ? ('sum: ' + Q.coalesce(totals.sum[col.field], '')) : '');
                };
                return columns;
            };
            ProductMovementDetailsGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.showFooterRow = true;
                return opt;
            };
            ProductMovementDetailsGrid.prototype.usePager = function () {
                return false;
            };
            ProductMovementDetailsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductMovementDetailsGrid);
            return ProductMovementDetailsGrid;
        }(Serenity.EntityGrid));
        Store.ProductMovementDetailsGrid = ProductMovementDetailsGrid;
    })(Store = Store_115.Store || (Store_115.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_116) {
    var Store;
    (function (Store) {
        var ProductsDialog = /** @class */ (function (_super) {
            __extends(ProductsDialog, _super);
            function ProductsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.ProductsForm(_this.idPrefix);
                return _this;
            }
            ProductsDialog.prototype.getFormKey = function () { return Store.ProductsForm.formKey; };
            ProductsDialog.prototype.getIdProperty = function () { return Store.ProductsRow.idProperty; };
            ProductsDialog.prototype.getLocalTextPrefix = function () { return Store.ProductsRow.localTextPrefix; };
            ProductsDialog.prototype.getNameProperty = function () { return Store.ProductsRow.nameProperty; };
            ProductsDialog.prototype.getService = function () { return Store.ProductsService.baseUrl; };
            ProductsDialog.prototype.getDeletePermission = function () { return Store.ProductsRow.deletePermission; };
            ProductsDialog.prototype.getInsertPermission = function () { return Store.ProductsRow.insertPermission; };
            ProductsDialog.prototype.getUpdatePermission = function () { return Store.ProductsRow.updatePermission; };
            ProductsDialog.prototype.UpdateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.ProductCode, true);
            };
            ProductsDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel()
            ], ProductsDialog);
            return ProductsDialog;
        }(Serenity.EntityDialog));
        Store.ProductsDialog = ProductsDialog;
    })(Store = Store_116.Store || (Store_116.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_117) {
    var Store;
    (function (Store) {
        var ProductEditor = /** @class */ (function (_super) {
            __extends(ProductEditor, _super);
            function ProductEditor(hidden) {
                return _super.call(this, hidden) || this;
            }
            ProductEditor.prototype.getLookupKey = function () {
                return Store.CategoriesRow.lookupKey;
            };
            ProductEditor.prototype.getItems = function (lookup) {
                return _super.prototype.getItems.call(this, lookup).filter(function (x) {
                    return x.Type === 200;
                });
            };
            ProductEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], ProductEditor);
            return ProductEditor;
        }(Serenity.LookupEditorBase));
        Store.ProductEditor = ProductEditor;
    })(Store = Store_117.Store || (Store_117.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_118) {
    var Store;
    (function (Store) {
        var ProductExcelImportDialog = /** @class */ (function (_super) {
            __extends(ProductExcelImportDialog, _super);
            function ProductExcelImportDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.ProductsExcelImportForm(_this.idPrefix);
                return _this;
            }
            ProductExcelImportDialog.prototype.getDialogTitle = function () {
                return "Excel Import";
            };
            ProductExcelImportDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Import',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            if (_this.form.FileName.value == null ||
                                Q.isEmptyOrNull(_this.form.FileName.value.Filename)) {
                                Q.notifyError("Please select a file!");
                                return;
                            }
                            Store.ProductsService.ExcelImport({
                                FileName: _this.form.FileName.value.Filename
                            }, function (response) {
                                Q.notifyInfo('Inserted: ' + (response.Inserted || 0) +
                                    ', Updated: ' + (response.Updated || 0));
                                if (response.ErrorList != null && response.ErrorList.length > 0) {
                                    Q.notifyError(response.ErrorList.join(',\r\n '));
                                }
                                _this.dialogClose();
                            });
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            ProductExcelImportDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductExcelImportDialog);
            return ProductExcelImportDialog;
        }(Serenity.PropertyDialog));
        Store.ProductExcelImportDialog = ProductExcelImportDialog;
    })(Store = Store_118.Store || (Store_118.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_119) {
    var Store;
    (function (Store) {
        var ProductsGrid = /** @class */ (function (_super) {
            __extends(ProductsGrid, _super);
            function ProductsGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.pendingChanges = {};
                _this.slickContainer.on('change', '.edit:input', function (e) { return _this.inputsChange(e); });
                return _this;
            }
            ProductsGrid.prototype.getColumnsKey = function () { return 'Store.Products'; };
            ProductsGrid.prototype.getDialogType = function () { return Store.ProductsDialog; };
            ProductsGrid.prototype.getIdProperty = function () { return Store.ProductsRow.idProperty; };
            ProductsGrid.prototype.getInsertPermission = function () { return Store.ProductsRow.insertPermission; };
            ProductsGrid.prototype.getLocalTextPrefix = function () { return Store.ProductsRow.localTextPrefix; };
            ProductsGrid.prototype.getService = function () { return Store.ProductsService.baseUrl; };
            ProductsGrid.prototype.getQuickFilters = function () {
                var _this = this;
                var flt = _super.prototype.getQuickFilters.call(this);
                var q = Q.parseQueryString();
                if (q["cat"]) {
                    var category = Q.tryFirst(flt, function (x) { return x.field == "CategoryID"; });
                    category.init = function (e) {
                        e.element.getWidget(Serenity.LookupEditor).value = q["cat"];
                    };
                }
                flt.push({
                    type: Serenity.LookupEditor,
                    options: {
                        lookupKey: Store.WaresRow.lookupKey
                    },
                    field: 'WaresID',
                    title: 'Contains Wares in Details',
                    handler: function (w) {
                        _this.view.params.WaresId = Q.toId(w.value);
                    },
                    cssClass: 'hidden-xs'
                });
                return flt;
            };
            ProductsGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(Store_119.Common.ExcelExportHelper.createToolButton({
                    title: 'Export To Excel',
                    grid: this,
                    service: Store.ProductsService.baseUrl + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
                buttons.push({
                    title: 'Import From Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        // open import dialog, let it handle rest
                        var dialog = new Store.ProductExcelImportDialog();
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                buttons.push(Store_119.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    reportTitle: 'Product List',
                    columnTitles: {
                        'Discontinued': 'Dis.',
                    },
                    tableOptions: {
                        columnStyles: {
                            ProductID: {
                                columnWidth: 25,
                                halign: 'right'
                            },
                            Discountinued: {
                                columnWidth: 25
                            }
                        }
                    }
                }));
                buttons.push({
                    title: 'Save Changes',
                    cssClass: 'apply-changes-button disabled',
                    onClick: function (e) { return _this.saveClick(); },
                    separator: true
                });
                return buttons;
            };
            ProductsGrid.prototype.onViewProcessData = function (response) {
                this.pendingChanges = {};
                this.setSaveButtonState();
                return _super.prototype.onViewProcessData.call(this, response);
            };
            // PLEASE NOTE! Inline editing in grids is not something Serenity supports nor recommends.
            // SlickGrid has some set of limitations, UI is very hard to use on some devices like mobile, 
            // custom widgets and validations are not possible, and as a bonus the code can become a mess.
            // 
            // This was just a sample how-to after much requests, and is not supported. 
            // This is all we can offer, please don't ask us to Guide you...
            /**
             * It would be nice if we could use autonumeric, Serenity editors etc. here, to control input validation,
             * but it's not supported by SlickGrid as we are only allowed to return a string, and should attach
             * no event handlers to rendered cell contents
             */
            ProductsGrid.prototype.numericInputFormatter = function (ctx) {
                var klass = 'edit numeric';
                var item = ctx.item;
                var pending = this.pendingChanges[item.ProductId];
                if (pending && pending[ctx.column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, ctx.column.field);
                return "<input type='text' class='" + klass +
                    "' data-field='" + ctx.column.field +
                    "' value='" + Q.formatNumber(value, '0.####') + "'/>";
            };
            ProductsGrid.prototype.moneyInputFormatter = function (ctx) {
                var klass = 'edit numeric';
                var item = ctx.item;
                var pending = this.pendingChanges[item.ProductId];
                if (pending && pending[ctx.column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, ctx.column.field);
                return "<input type='text' style='text - align:right' class='" + klass +
                    "' data-field='" + ctx.column.field +
                    "' value='" + Q.formatNumber(value, '0.0000') + "'/>";
            };
            ProductsGrid.prototype.stringInputFormatter = function (ctx) {
                var klass = 'edit string';
                var item = ctx.item;
                var pending = this.pendingChanges[item.ProductId];
                var column = ctx.column;
                if (pending && pending[column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, column.field);
                return "<input type='text' class='" + klass +
                    "' data-field='" + column.field +
                    "' value='" + Q.attrEncode(value) +
                    "' maxlength='" + column.sourceItem.maxLength + "'/>";
            };
            /**
             * Sorry but you cannot use LookupEditor, e.g. Select2 here, only possible is a SELECT element
             */
            ProductsGrid.prototype.selectFormatter = function (ctx, idField, lookup) {
                var klass = 'edit';
                var item = ctx.item;
                var pending = this.pendingChanges[item.ProductId];
                var column = ctx.column;
                if (pending && pending[idField] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, idField);
                var markup = "<select class='" + klass +
                    "' data-field='" + idField +
                    "' style='width: 100%; max-width: 100%'>";
                for (var _i = 0, _a = lookup.items; _i < _a.length; _i++) {
                    var c = _a[_i];
                    var id = c[lookup.idField];
                    markup += "<option value='" + Q.attrEncode(id) + "'";
                    if (id == value) {
                        markup += " selected";
                    }
                    markup += ">" + Q.htmlEncode(c[lookup.textField]) + "</option>";
                }
                return markup + "</select>";
            };
            ProductsGrid.prototype.getEffectiveValue = function (item, field) {
                var pending = this.pendingChanges[item.ProductID];
                if (pending && pending[field] !== undefined) {
                    return pending[field];
                }
                return item[field];
            };
            ProductsGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                var num = function (ctx) { return _this.numericInputFormatter(ctx); };
                var str = function (ctx) { return _this.stringInputFormatter(ctx); };
                var mon = function (ctx) { return _this.moneyInputFormatter(ctx); };
                Q.first(columns, function (x) { return x.field === 'QuantityPerUnit'; }).format = str;
                var category = Q.first(columns, function (x) { return x.field === "CategoryCategoryName" /* CategoryCategoryName */; });
                category.referencedFields = ["CategoryId" /* CategoryId */];
                category.format = function (ctx) { return _this.selectFormatter(ctx, "CategoryId" /* CategoryId */, Store.CategoriesRow.getLookup()); };
                //var supplier = Q.first(columns, x => x.field === fld.SupplierCompanyName);
                //supplier.referencedFields = [fld.SupplierID];
                //supplier.format = ctx => this.selectFormatter(ctx, fld.SupplierID, SupplierRow.getLookup());
                Q.first(columns, function (x) { return x.field === "UnitPrice" /* UnitPrice */; }).format = mon;
                Q.first(columns, function (x) { return x.field == "UnitPrice" /* UnitPrice */; }).cssClass += " col-unit-price";
                Q.first(columns, function (x) { return x.field === "UnitsInStock" /* UnitsInStock */; }).format = num;
                Q.first(columns, function (x) { return x.field === "UnitsOnOrder" /* UnitsOnOrder */; }).format = num;
                Q.first(columns, function (x) { return x.field === "ReorderLevel" /* ReorderLevel */; }).format = num;
                return columns;
            };
            ProductsGrid.prototype.inputsChange = function (e) {
                var cell = this.slickGrid.getCellFromEvent(e);
                var item = this.itemAt(cell.row);
                var input = $(e.target);
                var field = input.data('field');
                var text = Q.coalesce(Q.trimToNull(input.val()), '0');
                var pending = this.pendingChanges[item.ProductId];
                var effective = this.getEffectiveValue(item, field);
                var oldText;
                if (input.hasClass("numeric"))
                    oldText = Q.formatNumber(effective, '0.####');
                else
                    oldText = effective;
                var value;
                if (field === 'UnitPrice') {
                    value = Q.parseDecimal(text);
                    if (value == null || isNaN(value)) {
                        Q.notifyError(Q.text('Validation.Decimal'), '', null);
                        input.val(oldText);
                        input.focus();
                        return;
                    }
                }
                else if (input.hasClass("numeric")) {
                    var i = Q.parseInteger(text);
                    if (isNaN(i) || i > 32767 || i < 0) {
                        Q.notifyError(Q.text('Validation.Integer'), '', null);
                        input.val(oldText);
                        input.focus();
                        return;
                    }
                    value = i;
                }
                else
                    value = text;
                if (!pending) {
                    this.pendingChanges[item.ProductId] = pending = {};
                }
                pending[field] = value;
                item[field] = value;
                this.view.refresh();
                if (input.hasClass("numeric"))
                    value = Q.formatNumber(value, '0.####');
                input.val(value).addClass('dirty');
                this.setSaveButtonState();
            };
            ProductsGrid.prototype.setSaveButtonState = function () {
                this.toolbar.findButton('apply-changes-button').toggleClass('disabled', Object.keys(this.pendingChanges).length === 0);
            };
            ProductsGrid.prototype.saveClick = function () {
                if (Object.keys(this.pendingChanges).length === 0) {
                    return;
                }
                // this calls save service for all modified rows, one by one
                // you could write a batch update service
                var keys = Object.keys(this.pendingChanges);
                var current = -1;
                var self = this;
                (function saveNext() {
                    if (++current >= keys.length) {
                        self.refresh();
                        return;
                    }
                    var key = keys[current];
                    var entity = Q.deepClone(self.pendingChanges[key]);
                    entity.ProductID = key;
                    Q.serviceRequest('Store/Product/Update', {
                        EntityId: key,
                        Entity: entity
                    }, function (response) {
                        delete self.pendingChanges[key];
                        saveNext();
                    });
                })();
            };
            ProductsGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable(),
                Serenity.Decorators.panel()
            ], ProductsGrid);
            return ProductsGrid;
        }(Serenity.EntityGrid));
        Store.ProductsGrid = ProductsGrid;
    })(Store = Store_119.Store || (Store_119.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_120) {
    var Store;
    (function (Store) {
        var PhoneEditor = /** @class */ (function (_super) {
            __extends(PhoneEditor, _super);
            function PhoneEditor(input) {
                var _this = _super.call(this, input) || this;
                _this.addValidationRule(_this.uniqueName, function (e) {
                    var value = Q.trimToNull(_this.get_value());
                    if (value == null) {
                        return null;
                    }
                    return PhoneEditor_1.validate(value, _this.multiple);
                });
                input.bind('change', function (e) {
                    if (!Serenity.WX.hasOriginalEvent(e)) {
                        return;
                    }
                    _this.formatValue();
                });
                input.bind('blur', function (e) {
                    if (_this.element.hasClass('valid')) {
                        _this.formatValue();
                    }
                });
                return _this;
            }
            PhoneEditor_1 = PhoneEditor;
            PhoneEditor.prototype.formatValue = function () {
                this.element.val(this.getFormattedValue());
            };
            PhoneEditor.prototype.getFormattedValue = function () {
                var value = this.element.val();
                if (this.multiple) {
                    return PhoneEditor_1.formatMulti(value, PhoneEditor_1.formatPhone);
                }
                return PhoneEditor_1.formatPhone(value);
            };
            PhoneEditor.prototype.get_value = function () {
                return this.getFormattedValue();
            };
            PhoneEditor.prototype.set_value = function (value) {
                this.element.val(value);
            };
            PhoneEditor.validate = function (phone, isMultiple) {
                var valid = (isMultiple ? PhoneEditor_1.isValidMulti(phone, PhoneEditor_1.isValidPhone) : PhoneEditor_1.isValidPhone(phone));
                if (valid) {
                    return null;
                }
                return Q.text((isMultiple ? 'Validation.StorePhoneMultiple' : 'Validation.StorePhone'));
            };
            PhoneEditor.isValidPhone = function (phone) {
                if (Q.isEmptyOrNull(phone)) {
                    return false;
                }
                phone = Q.replaceAll(Q.replaceAll(phone, ' ', ''), '-', '');
                if (phone.length < 10) {
                    return false;
                }
                if (Q.startsWith(phone, '0')) {
                    phone = phone.substring(1);
                }
                if (Q.startsWith(phone, '(') && phone.charAt(4) === ')') {
                    phone = phone.substr(1, 3) + phone.substring(5);
                }
                if (phone.length !== 12) {
                    return false;
                }
                if (Q.startsWith(phone, '0')) {
                    return false;
                }
                for (var i = 0; i < phone.length; i++) {
                    var c = phone.charAt(i);
                    if (c < '0' || c > '9') {
                        return false;
                    }
                }
                return true;
            };
            PhoneEditor.formatPhone = function (phone) {
                if (!PhoneEditor_1.isValidPhone(phone)) {
                    return phone;
                }
                phone = Q.replaceAll(Q.replaceAll(Q.replaceAll(Q.replaceAll(phone, ' ', ''), '-', ''), '(', ''), ')', '');
                if (Q.startsWith(phone, '0')) {
                    phone = phone.substring(1);
                }
                phone = '(' + phone.substr(0, 3) + ') ' + phone.substr(3, 3) + '-' + phone.substr(6, 2) + phone.substr(8, 2) + phone.substr(10, 2);
                return phone;
            };
            PhoneEditor.formatMulti = function (phone, format) {
                var phones = Q.replaceAll(phone, String.fromCharCode(59), String.fromCharCode(44)).split(String.fromCharCode(44));
                var result = '';
                for (var _i = 0, phones_1 = phones; _i < phones_1.length; _i++) {
                    var x = phones_1[_i];
                    var s = Q.trimToNull(x);
                    if (s == null) {
                        continue;
                    }
                    if (result.length > 0) {
                        result += ', ';
                    }
                    result += format(s);
                }
                return result;
            };
            PhoneEditor.isValidMulti = function (phone, check) {
                if (Q.isEmptyOrNull(phone)) {
                    return false;
                }
                var phones = Q.replaceAll(phone, String.fromCharCode(59), String.fromCharCode(44)).split(String.fromCharCode(44));
                var anyValid = false;
                for (var $t1 = 0; $t1 < phones.length; $t1++) {
                    var x = phones[$t1];
                    var s = Q.trimToNull(x);
                    if (s == null) {
                        continue;
                    }
                    if (!check(s)) {
                        return false;
                    }
                    anyValid = true;
                }
                if (!anyValid) {
                    return false;
                }
                return true;
            };
            var PhoneEditor_1;
            __decorate([
                Serenity.Decorators.option()
            ], PhoneEditor.prototype, "multiple", void 0);
            PhoneEditor = PhoneEditor_1 = __decorate([
                Serenity.Decorators.registerEditor()
            ], PhoneEditor);
            return PhoneEditor;
        }(Serenity.StringEditor));
        Store.PhoneEditor = PhoneEditor;
    })(Store = Store_120.Store || (Store_120.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_121) {
    var Store;
    (function (Store) {
        var ShippersDialog = /** @class */ (function (_super) {
            __extends(ShippersDialog, _super);
            function ShippersDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Store.ShippersForm(_this.idPrefix);
                return _this;
            }
            ShippersDialog.prototype.getFormKey = function () { return Store.ShippersForm.formKey; };
            ShippersDialog.prototype.getIdProperty = function () { return Store.ShippersRow.idProperty; };
            ShippersDialog.prototype.getLocalTextPrefix = function () { return Store.ShippersRow.localTextPrefix; };
            ShippersDialog.prototype.getNameProperty = function () { return Store.ShippersRow.nameProperty; };
            ShippersDialog.prototype.getService = function () { return Store.ShippersService.baseUrl; };
            ShippersDialog.prototype.getDeletePermission = function () { return Store.ShippersRow.deletePermission; };
            ShippersDialog.prototype.getInsertPermission = function () { return Store.ShippersRow.insertPermission; };
            ShippersDialog.prototype.getUpdatePermission = function () { return Store.ShippersRow.updatePermission; };
            ShippersDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ShippersDialog);
            return ShippersDialog;
        }(Serenity.EntityDialog));
        Store.ShippersDialog = ShippersDialog;
    })(Store = Store_121.Store || (Store_121.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_122) {
    var Store;
    (function (Store) {
        var ShippersFormatter = /** @class */ (function () {
            function ShippersFormatter() {
            }
            ShippersFormatter.prototype.format = function (ctx) {
                return "<span class='shipper-symbol shipper-" +
                    Q.replaceAll((ctx.value || '').toString(), ' ', '') +
                    "'>" + Q.htmlEncode(ctx.value) + '</span>';
            };
            ShippersFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], ShippersFormatter);
            return ShippersFormatter;
        }());
        Store.ShippersFormatter = ShippersFormatter;
    })(Store = Store_122.Store || (Store_122.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_123) {
    var Store;
    (function (Store) {
        var ShippersGrid = /** @class */ (function (_super) {
            __extends(ShippersGrid, _super);
            function ShippersGrid(container) {
                return _super.call(this, container) || this;
            }
            ShippersGrid.prototype.getColumnsKey = function () { return 'Store.Shippers'; };
            ShippersGrid.prototype.getDialogType = function () { return Store.ShippersDialog; };
            ShippersGrid.prototype.getIdProperty = function () { return Store.ShippersRow.idProperty; };
            ShippersGrid.prototype.getInsertPermission = function () { return Store.ShippersRow.insertPermission; };
            ShippersGrid.prototype.getLocalTextPrefix = function () { return Store.ShippersRow.localTextPrefix; };
            ShippersGrid.prototype.getService = function () { return Store.ShippersService.baseUrl; };
            ShippersGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ShippersGrid);
            return ShippersGrid;
        }(Serenity.EntityGrid));
        Store.ShippersGrid = ShippersGrid;
    })(Store = Store_123.Store || (Store_123.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_124) {
    var Store;
    (function (Store) {
        var ShopsDialog = /** @class */ (function (_super) {
            __extends(ShopsDialog, _super);
            function ShopsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Store.ShopsForm(_this.idPrefix);
                return _this;
            }
            ShopsDialog.prototype.getFormKey = function () { return Store.ShopsForm.formKey; };
            ShopsDialog.prototype.getIdProperty = function () { return Store.ShopsRow.idProperty; };
            ShopsDialog.prototype.getLocalTextPrefix = function () { return Store.ShopsRow.localTextPrefix; };
            ShopsDialog.prototype.getNameProperty = function () { return Store.ShopsRow.nameProperty; };
            ShopsDialog.prototype.getService = function () { return Store.ShopsService.baseUrl; };
            ShopsDialog.prototype.getDeletePermission = function () { return Store.ShopsRow.deletePermission; };
            ShopsDialog.prototype.getInsertPermission = function () { return Store.ShopsRow.insertPermission; };
            ShopsDialog.prototype.getUpdatePermission = function () { return Store.ShopsRow.updatePermission; };
            ShopsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ShopsDialog);
            return ShopsDialog;
        }(Serenity.EntityDialog));
        Store.ShopsDialog = ShopsDialog;
    })(Store = Store_124.Store || (Store_124.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_125) {
    var Store;
    (function (Store) {
        var ShopsEditor = /** @class */ (function (_super) {
            __extends(ShopsEditor, _super);
            function ShopsEditor(hidden) {
                return _super.call(this, hidden) || this;
            }
            ShopsEditor.prototype.getLookupKey = function () {
                return Store.ShopsRow.lookupKey;
            };
            ShopsEditor.prototype.getItemText = function (item, lookup) {
                return _super.prototype.getItemText.call(this, item, lookup);
            };
            ShopsEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], ShopsEditor);
            return ShopsEditor;
        }(Serenity.LookupEditorBase));
        Store.ShopsEditor = ShopsEditor;
    })(Store = Store_125.Store || (Store_125.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_126) {
    var Store;
    (function (Store) {
        var ShopsGrid = /** @class */ (function (_super) {
            __extends(ShopsGrid, _super);
            function ShopsGrid(container) {
                return _super.call(this, container) || this;
            }
            ShopsGrid.prototype.getColumnsKey = function () { return 'Store.Shops'; };
            ShopsGrid.prototype.getDialogType = function () { return Store.ShopsDialog; };
            ShopsGrid.prototype.getIdProperty = function () { return Store.ShopsRow.idProperty; };
            ShopsGrid.prototype.getInsertPermission = function () { return Store.ShopsRow.insertPermission; };
            ShopsGrid.prototype.getLocalTextPrefix = function () { return Store.ShopsRow.localTextPrefix; };
            ShopsGrid.prototype.getService = function () { return Store.ShopsService.baseUrl; };
            ShopsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ShopsGrid);
            return ShopsGrid;
        }(Serenity.EntityGrid));
        Store.ShopsGrid = ShopsGrid;
    })(Store = Store_126.Store || (Store_126.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_127) {
    var Store;
    (function (Store) {
        var WarehouseDialog = /** @class */ (function (_super) {
            __extends(WarehouseDialog, _super);
            function WarehouseDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Store.WarehouseForm(_this.idPrefix);
                return _this;
            }
            WarehouseDialog.prototype.getFormKey = function () { return Store.WarehouseForm.formKey; };
            WarehouseDialog.prototype.getIdProperty = function () { return Store.WarehouseRow.idProperty; };
            WarehouseDialog.prototype.getLocalTextPrefix = function () { return Store.WarehouseRow.localTextPrefix; };
            WarehouseDialog.prototype.getNameProperty = function () { return Store.WarehouseRow.nameProperty; };
            WarehouseDialog.prototype.getService = function () { return Store.WarehouseService.baseUrl; };
            WarehouseDialog.prototype.getDeletePermission = function () { return Store.WarehouseRow.deletePermission; };
            WarehouseDialog.prototype.getInsertPermission = function () { return Store.WarehouseRow.insertPermission; };
            WarehouseDialog.prototype.getUpdatePermission = function () { return Store.WarehouseRow.updatePermission; };
            WarehouseDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], WarehouseDialog);
            return WarehouseDialog;
        }(Serenity.EntityDialog));
        Store.WarehouseDialog = WarehouseDialog;
    })(Store = Store_127.Store || (Store_127.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_128) {
    var Store;
    (function (Store) {
        var WarehouseGrid = /** @class */ (function (_super) {
            __extends(WarehouseGrid, _super);
            function WarehouseGrid(container) {
                return _super.call(this, container) || this;
            }
            WarehouseGrid.prototype.getColumnsKey = function () { return 'Store.Warehouse'; };
            WarehouseGrid.prototype.getDialogType = function () { return Store.WarehouseDialog; };
            WarehouseGrid.prototype.getIdProperty = function () { return Store.WarehouseRow.idProperty; };
            WarehouseGrid.prototype.getInsertPermission = function () { return Store.WarehouseRow.insertPermission; };
            WarehouseGrid.prototype.getLocalTextPrefix = function () { return Store.WarehouseRow.localTextPrefix; };
            WarehouseGrid.prototype.getService = function () { return Store.WarehouseService.baseUrl; };
            WarehouseGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], WarehouseGrid);
            return WarehouseGrid;
        }(Serenity.EntityGrid));
        Store.WarehouseGrid = WarehouseGrid;
    })(Store = Store_128.Store || (Store_128.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_129) {
    var Store;
    (function (Store) {
        var WaresDialog = /** @class */ (function (_super) {
            __extends(WaresDialog, _super);
            function WaresDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.WaresForm(_this.idPrefix);
                return _this;
            }
            WaresDialog.prototype.getFormKey = function () { return Store.WaresForm.formKey; };
            WaresDialog.prototype.getIdProperty = function () { return Store.WaresRow.idProperty; };
            WaresDialog.prototype.getLocalTextPrefix = function () { return Store.WaresRow.localTextPrefix; };
            WaresDialog.prototype.getNameProperty = function () { return Store.WaresRow.nameProperty; };
            WaresDialog.prototype.getService = function () { return Store.WaresService.baseUrl; };
            WaresDialog.prototype.getDeletePermission = function () { return Store.WaresRow.deletePermission; };
            WaresDialog.prototype.getInsertPermission = function () { return Store.WaresRow.insertPermission; };
            WaresDialog.prototype.getUpdatePermission = function () { return Store.WaresRow.updatePermission; };
            WaresDialog.prototype.UpdateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.WaresCode, true);
            };
            WaresDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], WaresDialog);
            return WaresDialog;
        }(Serenity.EntityDialog));
        Store.WaresDialog = WaresDialog;
    })(Store = Store_129.Store || (Store_129.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_130) {
    var Store;
    (function (Store) {
        var WaresExcelImportDialog = /** @class */ (function (_super) {
            __extends(WaresExcelImportDialog, _super);
            function WaresExcelImportDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.WaresExcelImportForm(_this.idPrefix);
                return _this;
            }
            WaresExcelImportDialog.prototype.getDialogTitle = function () {
                return "Excel Import";
            };
            WaresExcelImportDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Import',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            if (_this.form.FileName.value == null ||
                                Q.isEmptyOrNull(_this.form.FileName.value.Filename)) {
                                Q.notifyError("Please select a file!");
                                return;
                            }
                            Store.WaresService.ExcelImport({
                                FileName: _this.form.FileName.value.Filename
                            }, function (response) {
                                Q.notifyInfo('Inserted: ' + (response.Inserted || 0) +
                                    ', Updated: ' + (response.Updated || 0));
                                if (response.ErrorList != null && response.ErrorList.length > 0) {
                                    Q.notifyError(response.ErrorList.join(',\r\n '));
                                }
                                _this.dialogClose();
                            });
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            WaresExcelImportDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], WaresExcelImportDialog);
            return WaresExcelImportDialog;
        }(Serenity.PropertyDialog));
        Store.WaresExcelImportDialog = WaresExcelImportDialog;
    })(Store = Store_130.Store || (Store_130.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_131) {
    var Store;
    (function (Store) {
        var WaresGrid = /** @class */ (function (_super) {
            __extends(WaresGrid, _super);
            function WaresGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.pendingChanges = {};
                _this.slickContainer.on('change', '.edit:input', function (e) { return _this.inputsChange(e); });
                return _this;
            }
            WaresGrid.prototype.getColumnsKey = function () { return 'Store.Wares'; };
            WaresGrid.prototype.getDialogType = function () { return Store.WaresDialog; };
            WaresGrid.prototype.getIdProperty = function () { return Store.WaresRow.idProperty; };
            WaresGrid.prototype.getInsertPermission = function () { return Store.WaresRow.insertPermission; };
            WaresGrid.prototype.getLocalTextPrefix = function () { return Store.WaresRow.localTextPrefix; };
            WaresGrid.prototype.getService = function () { return Store.WaresService.baseUrl; };
            WaresGrid.prototype.getQuickFilters = function () {
                var flt = _super.prototype.getQuickFilters.call(this);
                var q = Q.parseQueryString();
                if (q["cat"]) {
                    var category = Q.tryFirst(flt, function (x) { return x.field == "CategoryId"; });
                    category.init = function (e) {
                        e.element.getWidget(Serenity.LookupEditor).value = q["cat"];
                    };
                }
                return flt;
            };
            WaresGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(Store_131.Common.ExcelExportHelper.createToolButton({
                    title: 'Export To Excel',
                    grid: this,
                    service: Store.WaresService.baseUrl + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
                buttons.push({
                    title: 'Import From Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        // open import dialog, let it handle rest
                        var dialog = new Store.WaresExcelImportDialog();
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                buttons.push(Store_131.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    reportTitle: 'Wares List',
                    columnTitles: {
                        'Discontinued': 'Dis.',
                    },
                    tableOptions: {
                        columnStyles: {
                            WaresID: {
                                columnWidth: 25,
                                halign: 'right'
                            },
                            Discountinued: {
                                columnWidth: 25
                            }
                        }
                    }
                }));
                buttons.push({
                    title: 'Save Changes',
                    cssClass: 'apply-changes-button disabled',
                    onClick: function (e) { return _this.saveClick(); },
                    separator: true
                });
                return buttons;
            };
            WaresGrid.prototype.onViewProcessData = function (response) {
                this.pendingChanges = {};
                this.setSaveButtonState();
                return _super.prototype.onViewProcessData.call(this, response);
            };
            WaresGrid.prototype.numericInputFormatter = function (ctx) {
                var klass = 'edit numeric';
                var item = ctx.item;
                var pending = this.pendingChanges[item.WaresId];
                if (pending && pending[ctx.column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, ctx.column.field);
                return "<input type='text' style='text - align:right' class='" + klass +
                    "' data-field='" + ctx.column.field +
                    "' value='" + Q.formatNumber(value, '0.####') + "'/>";
            };
            WaresGrid.prototype.moneyInputFormatter = function (ctx) {
                var klass = 'edit numeric';
                var item = ctx.item;
                var pending = this.pendingChanges[item.WaresId];
                if (pending && pending[ctx.column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, ctx.column.field);
                return "<input type='text' style='text - align:right' class='" + klass +
                    "' data-field='" + ctx.column.field +
                    "' value='" + Q.formatNumber(value, '0.0000') + "'/>";
            };
            WaresGrid.prototype.stringInputFormatter = function (ctx) {
                var klass = 'edit string';
                var item = ctx.item;
                var pending = this.pendingChanges[item.WaresId];
                var column = ctx.column;
                if (pending && pending[column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, column.field);
                return "<input type='text' class='" + klass +
                    "' data-field='" + column.field +
                    "' value='" + Q.attrEncode(value) +
                    "' maxlength='" + column.sourceItem.maxLength + "'/>";
            };
            WaresGrid.prototype.selectFormatter = function (ctx, idField, lookup) {
                var klass = 'edit';
                var item = ctx.item;
                var pending = this.pendingChanges[item.WaresId];
                var column = ctx.column;
                if (pending && pending[idField] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, idField);
                var markup = "<select class='" + klass +
                    "' data-field='" + idField +
                    "' style='width: 100%; max-width: 100%; text-align:right'>";
                for (var _i = 0, _a = lookup.items; _i < _a.length; _i++) {
                    var c = _a[_i];
                    var id = c[lookup.idField];
                    markup += "<option value='" + Q.attrEncode(id) + "'";
                    if (id == value) {
                        markup += " selected";
                    }
                    markup += ">" + Q.htmlEncode(c[lookup.textField]) + "</option>";
                }
                return markup + "</select>";
            };
            WaresGrid.prototype.getEffectiveValue = function (item, field) {
                var pending = this.pendingChanges[item.WaresID];
                if (pending && pending[field] !== undefined) {
                    return pending[field];
                }
                return item[field];
            };
            WaresGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                var num = function (ctx) { return _this.numericInputFormatter(ctx); };
                var str = function (ctx) { return _this.stringInputFormatter(ctx); };
                var mon = function (ctx) { return _this.moneyInputFormatter(ctx); };
                //Q.first(columns, x => x.field === 'QuantityPerUnit').format = str;
                var warescategory = Q.first(columns, function (x) { return x.field === "CategoryCategoryName" /* CategoryCategoryName */; });
                warescategory.referencedFields = ["CategoryId" /* CategoryId */];
                warescategory.format = function (ctx) { return _this.selectFormatter(ctx, "CategoryId" /* CategoryId */, Store.CategoriesRow.getLookup()); };
                //var supplier = Q.first(columns, x => x.field === fld.SupplierCompanyName);
                //supplier.referencedFields = [fld.SupplierID];
                //supplier.format = ctx => this.selectFormatter(ctx, fld.SupplierID, SupplierRow.getLookup());
                Q.first(columns, function (x) { return x.field === "UnitPrice" /* UnitPrice */; }).format = mon;
                Q.first(columns, function (x) { return x.field == "UnitPrice" /* UnitPrice */; }).cssClass += " col-unit-price";
                Q.first(columns, function (x) { return x.field === "QuantityPerUnit" /* QuantityPerUnit */; }).format = num;
                Q.first(columns, function (x) { return x.field === "MeasureName" /* MeasureName */; }).format = str;
                //Q.first(columns, x => x.field === fld.ReorderLevel).format = num;
                return columns;
            };
            /**
            * This method is called for all rows
            * @param item Data item for current row
            * @param index Index of the row in grid
            */
            WaresGrid.prototype.getItemCssClass = function (item, index) {
                var klass = "";
                if (item.Discontinued == true)
                    klass += " discontinued";
                else if (item.UnitsInStock <= 0)
                    klass += " out-of-stock";
                else if (item.UnitsInStock < 20)
                    klass += " critical-stock";
                else if (item.UnitsInStock > 50)
                    klass += " needs-reorder";
                if (item.UnitPrice >= 50)
                    klass += " high-price";
                else if (item.UnitPrice >= 20)
                    klass += " medium-price";
                else
                    klass += " low-price";
                return Q.trimToNull(klass);
            };
            WaresGrid.prototype.inputsChange = function (e) {
                var cell = this.slickGrid.getCellFromEvent(e);
                var item = this.itemAt(cell.row);
                var input = $(e.target);
                var field = input.data('field');
                var text = Q.coalesce(Q.trimToNull(input.val()), '0');
                var pending = this.pendingChanges[item.WaresId];
                var effective = this.getEffectiveValue(item, field);
                var oldText;
                if (input.hasClass("numeric"))
                    oldText = Q.formatNumber(effective, '0.####');
                else
                    oldText = effective;
                var value;
                if (field === 'UnitPrice') {
                    value = Q.parseDecimal(text);
                    if (value == null || isNaN(value)) {
                        Q.notifyError(Q.text('Validation.Decimal'), '', null);
                        input.val(oldText);
                        input.focus();
                        return;
                    }
                }
                else if (input.hasClass("numeric")) {
                    var i = Q.parseInteger(text);
                    if (isNaN(i) || i > 32767 || i < 0) {
                        Q.notifyError(Q.text('Validation.Integer'), '', null);
                        input.val(oldText);
                        input.focus();
                        return;
                    }
                    value = i;
                }
                else
                    value = text;
                if (!pending) {
                    this.pendingChanges[item.WaresId] = pending = {};
                }
                pending[field] = value;
                item[field] = value;
                this.view.refresh();
                if (input.hasClass("numeric"))
                    value = Q.formatNumber(value, '0.####');
                input.val(value).addClass('dirty');
                this.setSaveButtonState();
            };
            WaresGrid.prototype.setSaveButtonState = function () {
                this.toolbar.findButton('apply-changes-button').toggleClass('disabled', Object.keys(this.pendingChanges).length === 0);
            };
            WaresGrid.prototype.saveClick = function () {
                if (Object.keys(this.pendingChanges).length === 0) {
                    return;
                }
                // this calls save service for all modified rows, one by one
                // you could write a batch update service
                var keys = Object.keys(this.pendingChanges);
                var current = -1;
                var self = this;
                (function saveNext() {
                    if (++current >= keys.length) {
                        self.refresh();
                        return;
                    }
                    var key = keys[current];
                    var entity = Q.deepClone(self.pendingChanges[key]);
                    entity.WaresID = key;
                    Q.serviceRequest('Store/Wares/Update', {
                        EntityId: key,
                        Entity: entity
                    }, function (response) {
                        delete self.pendingChanges[key];
                        saveNext();
                    });
                })();
            };
            WaresGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable()
            ], WaresGrid);
            return WaresGrid;
        }(Serenity.EntityGrid));
        Store.WaresGrid = WaresGrid;
    })(Store = Store_131.Store || (Store_131.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_132) {
    var Store;
    (function (Store) {
        var StoreAverageDialog = /** @class */ (function (_super) {
            __extends(StoreAverageDialog, _super);
            function StoreAverageDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.StoreAverageForm(_this.idPrefix);
                return _this;
            }
            StoreAverageDialog.prototype.getDialogTitle = function () {
                return "Warehouse";
            };
            StoreAverageDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Import',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            //if (this.form.FileName.value == null ||
                            //    Q.isEmptyOrNull(this.form.FileName.value.Filename)) {
                            //    Q.notifyError("Please select a file!");
                            //    return;
                            //}
                            Store.WarehouseService.Warehouse({
                            //FileName: this.form.FileName.value.Filename
                            }, function (response) {
                                Q.notifyInfo('Inserted: ' + (response.Inserted || 0) +
                                    ', Updated: ' + (response.Updated || 0));
                                if (response.ErrorList != null && response.ErrorList.length > 0) {
                                    Q.notifyError(response.ErrorList.join(',\r\n '));
                                }
                                _this.dialogClose();
                            });
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            StoreAverageDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], StoreAverageDialog);
            return StoreAverageDialog;
        }(Serenity.PropertyDialog));
        Store.StoreAverageDialog = StoreAverageDialog;
    })(Store = Store_132.Store || (Store_132.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_133) {
    var Store;
    (function (Store) {
        var WaresMovementDialog = /** @class */ (function (_super) {
            __extends(WaresMovementDialog, _super);
            function WaresMovementDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.WaresMovementForm(_this.idPrefix);
                return _this;
            }
            WaresMovementDialog.prototype.getFormKey = function () { return Store.WaresMovementForm.formKey; };
            WaresMovementDialog.prototype.getIdProperty = function () { return Store.WaresMovementRow.idProperty; };
            WaresMovementDialog.prototype.getLocalTextPrefix = function () { return Store.WaresMovementRow.localTextPrefix; };
            WaresMovementDialog.prototype.getNameProperty = function () { return Store.WaresMovementRow.nameProperty; };
            WaresMovementDialog.prototype.getService = function () { return Store.WaresMovementService.baseUrl; };
            WaresMovementDialog.prototype.getDeletePermission = function () { return Store.WaresMovementRow.deletePermission; };
            WaresMovementDialog.prototype.getInsertPermission = function () { return Store.WaresMovementRow.insertPermission; };
            WaresMovementDialog.prototype.getUpdatePermission = function () { return Store.WaresMovementRow.updatePermission; };
            WaresMovementDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push(Store_133.Common.ReportHelper.createToolButton({
                    title: 'Invoice',
                    cssClass: 'export-pdf-button',
                    reportKey: 'Store.WaresMovementDetails',
                    getParams: function () { return ({
                        WaresMoveID: _this.get_entityId()
                    }); }
                }));
                return buttons;
            };
            WaresMovementDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton('export-pdf-button').toggle(this.isEditMode());
            };
            WaresMovementDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel()
            ], WaresMovementDialog);
            return WaresMovementDialog;
        }(Serenity.EntityDialog));
        Store.WaresMovementDialog = WaresMovementDialog;
    })(Store = Store_133.Store || (Store_133.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_134) {
    var Store;
    (function (Store) {
        var WaresMovementGrid = /** @class */ (function (_super) {
            __extends(WaresMovementGrid, _super);
            function WaresMovementGrid(container) {
                return _super.call(this, container) || this;
            }
            WaresMovementGrid.prototype.getColumnsKey = function () { return 'Store.WaresMovement'; };
            WaresMovementGrid.prototype.getDialogType = function () { return Store.WaresMovementDialog; };
            WaresMovementGrid.prototype.getIdProperty = function () { return Store.WaresMovementRow.idProperty; };
            WaresMovementGrid.prototype.getInsertPermission = function () { return Store.WaresMovementRow.insertPermission; };
            WaresMovementGrid.prototype.getLocalTextPrefix = function () { return Store.WaresMovementRow.localTextPrefix; };
            WaresMovementGrid.prototype.getService = function () { return Store.WaresMovementService.baseUrl; };
            WaresMovementGrid.prototype.getQuickFilters = function () {
                var _this = this;
                var filters = _super.prototype.getQuickFilters.call(this);
                filters.push({
                    type: Serenity.LookupEditor,
                    options: {
                        lookupKey: Store.WaresRow.lookupKey
                    },
                    field: 'WaresId',
                    title: 'Contains Wares in Details',
                    handler: function (w) {
                        _this.view.params.WaresId = Q.toId(w.value);
                    },
                    cssClass: 'hidden-xs'
                });
                return filters;
            };
            WaresMovementGrid.prototype.createQuickFilters = function () {
                _super.prototype.createQuickFilters.call(this);
                //this.findQuickFilter(Serenity.LookupEditor, fld.OperationTypeOperation).values = ["[102]Доставка на стоки"];
                this.shippingStateFilter = this.findQuickFilter(Serenity.EnumEditor, "ShippingState" /* ShippingState */);
            };
            WaresMovementGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(Store_134.Common.ExcelExportHelper.createToolButton({
                    grid: this,
                    service: Store.WaresMovementService.baseUrl + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
                buttons.push(Store_134.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); }
                }));
                buttons.push({
                    title: 'Warehouse',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        var dialog = new Store.StoreAverageDialog();
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            WaresMovementGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(1, 0, {
                    field: 'Print Invoice',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action print-invoice" title="invoice">' +
                        '<i class="fa fa-file-pdf-o text-red"></i></a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                return columns;
            };
            WaresMovementGrid.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented())
                    return;
                var item = this.itemAt(row);
                var target = $(e.target);
                // if user clicks "i" element, e.g. icon
                if (target.parent().hasClass('inline-action'))
                    target = target.parent();
                if (target.hasClass('inline-action')) {
                    e.preventDefault();
                    if (target.hasClass('print-invoice')) {
                        Store_134.Common.ReportHelper.execute({
                            reportKey: 'Store.WaresMovementDetails',
                            params: {
                                WaresMoveID: item.WaresMoveId
                            }
                        });
                    }
                }
            };
            WaresMovementGrid.prototype.set_shippingState = function (value) {
                this.shippingStateFilter.value = value == null ? '' : value.toString();
            };
            //public set_OpCode(value: any): void {
            //    this.OpCodeQuickFilter.value = value == ["[102]Доставка на стоки"].toString();
            WaresMovementGrid.prototype.addButtonClick = function () {
                var eq = this.view.params.EqualityFilter;
                this.editItem({
                    CounterpartyId: eq ? eq.CounterpartyId : null
                });
            };
            WaresMovementGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable()
            ], WaresMovementGrid);
            return WaresMovementGrid;
        }(Serenity.EntityGrid));
        Store.WaresMovementGrid = WaresMovementGrid;
    })(Store = Store_134.Store || (Store_134.Store = {}));
})(Store || (Store = {}));
/// <reference path="../../Common/Helpers/GridEditorDialog.ts" />
var Store;
(function (Store_135) {
    var Store;
    (function (Store) {
        var WaresMovementDetailsDialog = /** @class */ (function (_super) {
            __extends(WaresMovementDetailsDialog, _super);
            function WaresMovementDetailsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Store.WaresMovementDetailsForm(_this.idPrefix);
                _this.form.WaresId.changeSelect2(function (e) {
                    var waresID = Q.toId(_this.form.WaresId.value);
                    if (waresID != null) {
                        _this.form.SinglePrice.value = Store.WaresRow.getLookup().itemById[waresID].UnitPrice;
                    }
                });
                _this.form.Discount.addValidationRule(_this.uniqueName, function (e) {
                    var price = _this.form.SinglePrice.value;
                    var quantity = _this.form.Quantity.value;
                    var discount = _this.form.Discount.value;
                    if (price != null && quantity != null && discount != null &&
                        discount > 0 && discount >= price * quantity) {
                        return "Discount can't be higher than total price!";
                    }
                });
                return _this;
            }
            WaresMovementDetailsDialog.prototype.getFormKey = function () { return Store.WaresMovementDetailsForm.formKey; };
            WaresMovementDetailsDialog.prototype.getIdProperty = function () { return Store.WaresMovementDetailsRow.idProperty; };
            WaresMovementDetailsDialog.prototype.getLocalTextPrefix = function () { return Store.WaresMovementDetailsRow.localTextPrefix; };
            WaresMovementDetailsDialog.prototype.getService = function () { return Store.WaresMovementDetailsService.baseUrl; };
            WaresMovementDetailsDialog.prototype.getDeletePermission = function () { return Store.WaresMovementDetailsRow.deletePermission; };
            WaresMovementDetailsDialog.prototype.getInsertPermission = function () { return Store.WaresMovementDetailsRow.insertPermission; };
            WaresMovementDetailsDialog.prototype.getUpdatePermission = function () { return Store.WaresMovementDetailsRow.updatePermission; };
            WaresMovementDetailsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], WaresMovementDetailsDialog);
            return WaresMovementDetailsDialog;
        }(Store_135.Common.GridEditorDialog));
        Store.WaresMovementDetailsDialog = WaresMovementDetailsDialog;
    })(Store = Store_135.Store || (Store_135.Store = {}));
})(Store || (Store = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var Store;
(function (Store_136) {
    var Store;
    (function (Store) {
        var WaresMovementDetailsEditor = /** @class */ (function (_super) {
            __extends(WaresMovementDetailsEditor, _super);
            function WaresMovementDetailsEditor(container) {
                return _super.call(this, container) || this;
            }
            WaresMovementDetailsEditor.prototype.getColumnsKey = function () { return "Store.WaresMovementDetails"; };
            WaresMovementDetailsEditor.prototype.getDialogType = function () { return Store.WaresMovementDetailsDialog; };
            WaresMovementDetailsEditor.prototype.getLocalTextPrefix = function () { return Store.WaresMovementDetailsRow.localTextPrefix; };
            WaresMovementDetailsEditor.prototype.validateEntity = function (row, id) {
                row.WaresID = Q.toId(row.WaresId);
                var sameWares = Q.tryFirst(this.view.getItems(), function (x) { return x.WaresId === row.WaresId; });
                if (sameWares && this.id(sameWares) !== id) {
                    Q.alert('This ware is already in order details!');
                    return false;
                }
                row.WaresName = Store.WaresRow.getLookup().itemById[row.WaresId].WaresName;
                row.LineValue = (row.Quantity || 0) * (row.SinglePrice || 0) - (row.Discount || 0);
                //switch (row.WaresMoveOperationTypeOpCode) {
                //    case 102: {
                //        row.LineTotal = (row.Quantity || 0) * (row.IncomePrice || 0) - (row.Discount || 0);
                //        break;
                //    }
                //    case 201: {
                //        row.LineTotal = (row.Quantity || 0) * (row.SalePrice || 0) - (row.Discount || 0);
                //        break;
                //    }
                //    default: {
                //        row.LineTotal = (row.Quantity || 0) * (row.SinglePrice || 0) - (row.Discount || 0);
                //        break;
                //    }
                //}
                return true;
            };
            WaresMovementDetailsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], WaresMovementDetailsEditor);
            return WaresMovementDetailsEditor;
        }(Store_136.Common.GridEditorBase));
        Store.WaresMovementDetailsEditor = WaresMovementDetailsEditor;
    })(Store = Store_136.Store || (Store_136.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_137) {
    var Store;
    (function (Store) {
        var WaresMovementDetailsGrid = /** @class */ (function (_super) {
            __extends(WaresMovementDetailsGrid, _super);
            function WaresMovementDetailsGrid(container) {
                return _super.call(this, container) || this;
            }
            WaresMovementDetailsGrid.prototype.getColumnsKey = function () { return 'Store.WaresMovementDetails'; };
            WaresMovementDetailsGrid.prototype.getDialogType = function () { return Store.WaresMovementDetailsDialog; };
            WaresMovementDetailsGrid.prototype.getIdProperty = function () { return Store.WaresMovementDetailsRow.idProperty; };
            WaresMovementDetailsGrid.prototype.getInsertPermission = function () { return Store.WaresMovementDetailsRow.insertPermission; };
            WaresMovementDetailsGrid.prototype.getLocalTextPrefix = function () { return Store.WaresMovementDetailsRow.localTextPrefix; };
            WaresMovementDetailsGrid.prototype.getService = function () { return Store.WaresMovementDetailsService.baseUrl; };
            WaresMovementDetailsGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                // need to register this plugin for grouping or you'll have errors
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                this.view.setSummaryOptions({
                    aggregators: [
                        new Slick.Aggregators.Sum("LineValue" /* LineValue */),
                        new Slick.Aggregators.Sum("LineVAT" /* LineVAT */),
                        new Slick.Aggregators.Sum("LineTotal" /* LineTotal */)
                    ]
                });
                return grid;
            };
            WaresMovementDetailsGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                Q.first(columns, function (x) { return x.field === "LineValue" /* LineValue */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.sum ? ('value: ' + Q.coalesce(totals.sum[col.field], '')) : '');
                };
                Q.first(columns, function (x) { return x.field === "LineVAT" /* LineVAT */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.sum ? ('VAT: ' + Q.coalesce(totals.sum[col.field], '')) : '');
                };
                Q.first(columns, function (x) { return x.field === "LineTotal" /* LineTotal */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.sum ? ('Total: ' + Q.coalesce(totals.sum[col.field], '')) : '');
                };
                return columns;
            };
            WaresMovementDetailsGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.showFooterRow = true;
                return opt;
            };
            WaresMovementDetailsGrid.prototype.usePager = function () {
                return false;
            };
            WaresMovementDetailsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], WaresMovementDetailsGrid);
            return WaresMovementDetailsGrid;
        }(Serenity.EntityGrid));
        Store.WaresMovementDetailsGrid = WaresMovementDetailsGrid;
    })(Store = Store_137.Store || (Store_137.Store = {}));
})(Store || (Store = {}));
/// <reference path="../ProductMovement/ProductMovementDialog.ts" />
var Store;
(function (Store_138) {
    var Store;
    (function (Store) {
        var CounterpartiesProductMovementDialog = /** @class */ (function (_super) {
            __extends(CounterpartiesProductMovementDialog, _super);
            function CounterpartiesProductMovementDialog() {
                return _super.call(this) || this;
            }
            CounterpartiesProductMovementDialog.prototype.UpdateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.CounterpartyId, true);
            };
            CounterpartiesProductMovementDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CounterpartiesProductMovementDialog);
            return CounterpartiesProductMovementDialog;
        }(Store.ProductMovementDialog));
        Store.CounterpartiesProductMovementDialog = CounterpartiesProductMovementDialog;
    })(Store = Store_138.Store || (Store_138.Store = {}));
})(Store || (Store = {}));
/// <reference path="../ProductMovement/ProductMovementGrid.ts" />
var Store;
(function (Store_139) {
    var Store;
    (function (Store) {
        var CounterpartiesProductMovementGrid = /** @class */ (function (_super) {
            __extends(CounterpartiesProductMovementGrid, _super);
            function CounterpartiesProductMovementGrid(container) {
                return _super.call(this, container) || this;
            }
            CounterpartiesProductMovementGrid.prototype.getDialogType = function () { return Store.CounterpartiesProductMovementDialog; };
            CounterpartiesProductMovementGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this).filter(function (x) { return x.field !== "CounterpartyCompanyName" /* CounterpartyCompanyName */ && x.field !== "CounterpartyId" /* CounterpartyId */; });
            };
            CounterpartiesProductMovementGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CounterpartiesProductMovementGrid.prototype.AddButtonClick = function () {
                this.editItem({ CounterpartyID: this.counterpartyId });
            };
            CounterpartiesProductMovementGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CounterpartiesProductMovementGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.counterpartyId;
            };
            Object.defineProperty(CounterpartiesProductMovementGrid.prototype, "counterpartyId", {
                get: function () {
                    return this._counterpartyId;
                },
                set: function (value) {
                    if (this._counterpartyId !== value) {
                        this._counterpartyId = value;
                        this.setEquality('CounterpartyId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CounterpartiesProductMovementGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CounterpartiesProductMovementGrid);
            return CounterpartiesProductMovementGrid;
        }(Store.ProductMovementGrid));
        Store.CounterpartiesProductMovementGrid = CounterpartiesProductMovementGrid;
    })(Store = Store_139.Store || (Store_139.Store = {}));
})(Store || (Store = {}));
/// <reference path="../WaresMovement/WaresMovementDialog.ts" />
var Store;
(function (Store_140) {
    var Store;
    (function (Store) {
        var CounterpartiesWaresMovementDialog = /** @class */ (function (_super) {
            __extends(CounterpartiesWaresMovementDialog, _super);
            function CounterpartiesWaresMovementDialog() {
                return _super.call(this) || this;
            }
            CounterpartiesWaresMovementDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.CounterpartyId, true);
            };
            CounterpartiesWaresMovementDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CounterpartiesWaresMovementDialog);
            return CounterpartiesWaresMovementDialog;
        }(Store.WaresMovementDialog));
        Store.CounterpartiesWaresMovementDialog = CounterpartiesWaresMovementDialog;
    })(Store = Store_140.Store || (Store_140.Store = {}));
})(Store || (Store = {}));
/// <reference path="../WaresMovement/WaresMovementGrid.ts" />
var Store;
(function (Store_141) {
    var Store;
    (function (Store) {
        var CounterpartiesWaresMovementGrid = /** @class */ (function (_super) {
            __extends(CounterpartiesWaresMovementGrid, _super);
            function CounterpartiesWaresMovementGrid(container) {
                return _super.call(this, container) || this;
            }
            CounterpartiesWaresMovementGrid.prototype.getDialogType = function () { return Store.CounterpartiesWaresMovementDialog; };
            CounterpartiesWaresMovementGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this).filter(function (x) { return x.field !== "CounterpartyCompanyName" /* CounterpartyCompanyName */ && x.field !== "CounterpartyId" /* CounterpartyId */; });
            };
            CounterpartiesWaresMovementGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CounterpartiesWaresMovementGrid.prototype.AddButtonClick = function () {
                this.editItem({ CounterpartyId: this.counterpartyId });
            };
            CounterpartiesWaresMovementGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CounterpartiesWaresMovementGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.counterpartyId;
            };
            Object.defineProperty(CounterpartiesWaresMovementGrid.prototype, "counterpartyId", {
                get: function () {
                    return this._counterpartyId;
                },
                set: function (value) {
                    if (this._counterpartyId !== value) {
                        this._counterpartyId = value;
                        this.setEquality('CounterpartyId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CounterpartiesWaresMovementGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CounterpartiesWaresMovementGrid);
            return CounterpartiesWaresMovementGrid;
        }(Store.WaresMovementGrid));
        Store.CounterpartiesWaresMovementGrid = CounterpartiesWaresMovementGrid;
    })(Store = Store_141.Store || (Store_141.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_142) {
    var Store;
    (function (Store) {
        var NotesEditor = /** @class */ (function (_super) {
            __extends(NotesEditor, _super);
            function NotesEditor(div) {
                var _this = _super.call(this, div) || this;
                new Serenity.Toolbar(_this.byId('Toolbar'), {
                    buttons: [{
                            title: 'Add Note',
                            cssClass: 'add-button',
                            onClick: function (e) {
                                e.preventDefault();
                                _this.addClick();
                            }
                        }]
                });
                return _this;
            }
            NotesEditor.prototype.getTemplate = function () {
                return "<div><div id='~_Toolbar'></div><ul id='~_NoteList'></ul></div>";
            };
            NotesEditor.prototype.updateContent = function () {
                var _this = this;
                var noteList = this.byId('NoteList');
                noteList.children().remove();
                if (this.items) {
                    var index = 0;
                    for (var t1 = 0; t1 < this.items.length; t1++) {
                        var item = this.items[t1];
                        var li = $('<li/>');
                        $('<div/>').addClass('note-text').html(Q.coalesce(item.Text, '')).appendTo(li);
                        $('<a/>').attr('href', '#').addClass('note-date')
                            .text(item.InsertUserDisplayName + ' - ' +
                            Q.formatDate(item.InsertDate, 'g'))
                            .data('index', index).appendTo(li).click(function (e) { return _this.editClick(e); });
                        $('<a/>').attr('href', '#').addClass('note-delete')
                            .attr('title', 'delete note').data('index', index)
                            .appendTo(li).click(function (e) { return _this.deleteClick(e); });
                        li.appendTo(noteList);
                        index++;
                    }
                }
            };
            NotesEditor.prototype.addClick = function () {
                var _this = this;
                var dlg = new Store.NoteDialog();
                dlg.dialogTitle = 'Add Note';
                dlg.okClick = function () {
                    var text = Q.trimToNull(dlg.text);
                    if (text == null) {
                        return;
                    }
                    _this.items = _this.items || [];
                    Q.insert(_this.items, 0, {
                        Text: text,
                        InsertUserDisplayName: Store_142.Authorization.userDefinition.DisplayName,
                        InsertDate: Q.formatISODateTimeUTC(new Date())
                    });
                    _this.updateContent();
                    dlg.dialogClose();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                };
                dlg.dialogOpen();
            };
            NotesEditor.prototype.editClick = function (e) {
                var _this = this;
                e.preventDefault();
                var index = $(e.target).data('index');
                var old = this.items[index];
                var dlg = new Store.NoteDialog();
                dlg.dialogTitle = 'Edit Note';
                dlg.text = old.Text;
                dlg.okClick = function () {
                    var text = Q.trimToNull(dlg.text);
                    if (!text) {
                        return;
                    }
                    _this.items[index].Text = text;
                    _this.updateContent();
                    dlg.dialogClose();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                };
                dlg.dialogOpen();
            };
            NotesEditor.prototype.deleteClick = function (e) {
                var _this = this;
                e.preventDefault();
                var index = $(e.target).data('index');
                Q.confirm('Delete this note?', function () {
                    _this.items.splice(index, 1);
                    _this.updateContent();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                });
            };
            Object.defineProperty(NotesEditor.prototype, "value", {
                get: function () {
                    return this.items;
                },
                set: function (value) {
                    this.items = value || [];
                    this.set_isDirty(false);
                    this.updateContent();
                },
                enumerable: true,
                configurable: true
            });
            NotesEditor.prototype.getEditValue = function (prop, target) {
                target[prop.name] = this.value;
            };
            NotesEditor.prototype.setEditValue = function (source, prop) {
                this.value = source[prop.name] || [];
            };
            NotesEditor.prototype.get_isDirty = function () {
                return this.isDirty;
            };
            NotesEditor.prototype.set_isDirty = function (value) {
                this.isDirty = value;
            };
            NotesEditor = __decorate([
                Serenity.Decorators.registerEditor([Serenity.IGetEditValue, Serenity.ISetEditValue]),
                Serenity.Decorators.element("<div/>")
            ], NotesEditor);
            return NotesEditor;
        }(Serenity.TemplatedWidget));
        Store.NotesEditor = NotesEditor;
    })(Store = Store_142.Store || (Store_142.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_143) {
    var Store;
    (function (Store) {
        var NoteDialog = /** @class */ (function (_super) {
            __extends(NoteDialog, _super);
            function NoteDialog() {
                var _this = _super.call(this) || this;
                _this.textEditor = new Serenity.HtmlNoteContentEditor(_this.byId('Text'));
                return _this;
            }
            NoteDialog.prototype.getTemplate = function () {
                return ("<form id='~_Form' class='s-Form'>" +
                    "<textarea id='~_Text' class='required'></textarea>" +
                    "</form>");
            };
            NoteDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [{
                        text: Q.text('Dialogs.OkButton'),
                        click: function () {
                            if (!_this.validateForm()) {
                                return;
                            }
                            _this.okClick && _this.okClick();
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                return opt;
            };
            Object.defineProperty(NoteDialog.prototype, "text", {
                get: function () {
                    return this.textEditor.value;
                },
                set: function (value) {
                    this.textEditor.value = value;
                },
                enumerable: true,
                configurable: true
            });
            NoteDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], NoteDialog);
            return NoteDialog;
        }(Serenity.TemplatedDialog));
        Store.NoteDialog = NoteDialog;
    })(Store = Store_143.Store || (Store_143.Store = {}));
})(Store || (Store = {}));
var Store;
(function (Store_144) {
    var Store;
    (function (Store) {
        var NotesRow;
        (function (NotesRow) {
            NotesRow.idProperty = 'NoteId';
            NotesRow.nameProperty = 'EntityType';
            NotesRow.localTextPrefix = 'Store.Notes';
            NotesRow.deletePermission = 'Store:General';
            NotesRow.insertPermission = 'Store:General';
            NotesRow.readPermission = 'Store:General';
            NotesRow.updatePermission = 'Store:General';
        })(NotesRow = Store.NotesRow || (Store.NotesRow = {}));
    })(Store = Store_144.Store || (Store_144.Store = {}));
})(Store || (Store = {}));
//# sourceMappingURL=data:application/json;base64,